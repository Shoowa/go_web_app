// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// County is an object representing the database table.
type County struct {
	ID      int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name    string `boil:"name" json:"name" toml:"name" yaml:"name"`
	StateID string `boil:"state_id" json:"state_id" toml:"state_id" yaml:"state_id"`
	Fips    string `boil:"fips" json:"fips" toml:"fips" yaml:"fips"`
	Pop     int    `boil:"pop" json:"pop" toml:"pop" yaml:"pop"`

	R *countyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L countyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CountyColumns = struct {
	ID      string
	Name    string
	StateID string
	Fips    string
	Pop     string
}{
	ID:      "id",
	Name:    "name",
	StateID: "state_id",
	Fips:    "fips",
	Pop:     "pop",
}

var CountyTableColumns = struct {
	ID      string
	Name    string
	StateID string
	Fips    string
	Pop     string
}{
	ID:      "county.id",
	Name:    "county.name",
	StateID: "county.state_id",
	Fips:    "county.fips",
	Pop:     "county.pop",
}

// Generated where

var CountyWhere = struct {
	ID      whereHelperint
	Name    whereHelperstring
	StateID whereHelperstring
	Fips    whereHelperstring
	Pop     whereHelperint
}{
	ID:      whereHelperint{field: "\"alpha\".\"county\".\"id\""},
	Name:    whereHelperstring{field: "\"alpha\".\"county\".\"name\""},
	StateID: whereHelperstring{field: "\"alpha\".\"county\".\"state_id\""},
	Fips:    whereHelperstring{field: "\"alpha\".\"county\".\"fips\""},
	Pop:     whereHelperint{field: "\"alpha\".\"county\".\"pop\""},
}

// CountyRels is where relationship names are stored.
var CountyRels = struct {
	State                     string
	Companies                 string
	Depots                    string
	Munis                     string
	Offices                   string
	TaxCounties               string
	BuyerCountyTaxExemptions  string
	SellerCountyTaxExemptions string
}{
	State:                     "State",
	Companies:                 "Companies",
	Depots:                    "Depots",
	Munis:                     "Munis",
	Offices:                   "Offices",
	TaxCounties:               "TaxCounties",
	BuyerCountyTaxExemptions:  "BuyerCountyTaxExemptions",
	SellerCountyTaxExemptions: "SellerCountyTaxExemptions",
}

// countyR is where relationships are stored.
type countyR struct {
	State                     *State            `boil:"State" json:"State" toml:"State" yaml:"State"`
	Companies                 CompanySlice      `boil:"Companies" json:"Companies" toml:"Companies" yaml:"Companies"`
	Depots                    DepotSlice        `boil:"Depots" json:"Depots" toml:"Depots" yaml:"Depots"`
	Munis                     MuniSlice         `boil:"Munis" json:"Munis" toml:"Munis" yaml:"Munis"`
	Offices                   OfficeSlice       `boil:"Offices" json:"Offices" toml:"Offices" yaml:"Offices"`
	TaxCounties               TaxCountySlice    `boil:"TaxCounties" json:"TaxCounties" toml:"TaxCounties" yaml:"TaxCounties"`
	BuyerCountyTaxExemptions  TaxExemptionSlice `boil:"BuyerCountyTaxExemptions" json:"BuyerCountyTaxExemptions" toml:"BuyerCountyTaxExemptions" yaml:"BuyerCountyTaxExemptions"`
	SellerCountyTaxExemptions TaxExemptionSlice `boil:"SellerCountyTaxExemptions" json:"SellerCountyTaxExemptions" toml:"SellerCountyTaxExemptions" yaml:"SellerCountyTaxExemptions"`
}

// NewStruct creates a new relationship struct
func (*countyR) NewStruct() *countyR {
	return &countyR{}
}

func (r *countyR) GetState() *State {
	if r == nil {
		return nil
	}
	return r.State
}

func (r *countyR) GetCompanies() CompanySlice {
	if r == nil {
		return nil
	}
	return r.Companies
}

func (r *countyR) GetDepots() DepotSlice {
	if r == nil {
		return nil
	}
	return r.Depots
}

func (r *countyR) GetMunis() MuniSlice {
	if r == nil {
		return nil
	}
	return r.Munis
}

func (r *countyR) GetOffices() OfficeSlice {
	if r == nil {
		return nil
	}
	return r.Offices
}

func (r *countyR) GetTaxCounties() TaxCountySlice {
	if r == nil {
		return nil
	}
	return r.TaxCounties
}

func (r *countyR) GetBuyerCountyTaxExemptions() TaxExemptionSlice {
	if r == nil {
		return nil
	}
	return r.BuyerCountyTaxExemptions
}

func (r *countyR) GetSellerCountyTaxExemptions() TaxExemptionSlice {
	if r == nil {
		return nil
	}
	return r.SellerCountyTaxExemptions
}

// countyL is where Load methods for each relationship are stored.
type countyL struct{}

var (
	countyAllColumns            = []string{"id", "name", "state_id", "fips", "pop"}
	countyColumnsWithoutDefault = []string{"name", "state_id", "fips", "pop"}
	countyColumnsWithDefault    = []string{"id"}
	countyPrimaryKeyColumns     = []string{"id"}
	countyGeneratedColumns      = []string{"id"}
)

type (
	// CountySlice is an alias for a slice of pointers to County.
	// This should almost always be used instead of []County.
	CountySlice []*County

	countyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	countyType                 = reflect.TypeOf(&County{})
	countyMapping              = queries.MakeStructMapping(countyType)
	countyPrimaryKeyMapping, _ = queries.BindMapping(countyType, countyMapping, countyPrimaryKeyColumns)
	countyInsertCacheMut       sync.RWMutex
	countyInsertCache          = make(map[string]insertCache)
	countyUpdateCacheMut       sync.RWMutex
	countyUpdateCache          = make(map[string]updateCache)
	countyUpsertCacheMut       sync.RWMutex
	countyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single county record from the query using the global executor.
func (q countyQuery) OneG(ctx context.Context) (*County, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single county record from the query.
func (q countyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*County, error) {
	o := &County{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for county")
	}

	return o, nil
}

// AllG returns all County records from the query using the global executor.
func (q countyQuery) AllG(ctx context.Context) (CountySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all County records from the query.
func (q countyQuery) All(ctx context.Context, exec boil.ContextExecutor) (CountySlice, error) {
	var o []*County

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to County slice")
	}

	return o, nil
}

// CountG returns the count of all County records in the query using the global executor
func (q countyQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all County records in the query.
func (q countyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count county rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q countyQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q countyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if county exists")
	}

	return count > 0, nil
}

// State pointed to by the foreign key.
func (o *County) State(mods ...qm.QueryMod) stateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StateID),
	}

	queryMods = append(queryMods, mods...)

	return States(queryMods...)
}

// Companies retrieves all the company's Companies with an executor.
func (o *County) Companies(mods ...qm.QueryMod) companyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"companies\".\"county_id\"=?", o.ID),
	)

	return Companies(queryMods...)
}

// Depots retrieves all the depot's Depots with an executor.
func (o *County) Depots(mods ...qm.QueryMod) depotQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"depots\".\"county_id\"=?", o.ID),
	)

	return Depots(queryMods...)
}

// Munis retrieves all the muni's Munis with an executor.
func (o *County) Munis(mods ...qm.QueryMod) muniQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"muni\".\"county_id\"=?", o.ID),
	)

	return Munis(queryMods...)
}

// Offices retrieves all the office's Offices with an executor.
func (o *County) Offices(mods ...qm.QueryMod) officeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"offices\".\"county_id\"=?", o.ID),
	)

	return Offices(queryMods...)
}

// TaxCounties retrieves all the tax_county's TaxCounties with an executor.
func (o *County) TaxCounties(mods ...qm.QueryMod) taxCountyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"tax_county\".\"county_id\"=?", o.ID),
	)

	return TaxCounties(queryMods...)
}

// BuyerCountyTaxExemptions retrieves all the tax_exemption's TaxExemptions with an executor via buyer_county_id column.
func (o *County) BuyerCountyTaxExemptions(mods ...qm.QueryMod) taxExemptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"tax_exemptions\".\"buyer_county_id\"=?", o.ID),
	)

	return TaxExemptions(queryMods...)
}

// SellerCountyTaxExemptions retrieves all the tax_exemption's TaxExemptions with an executor via seller_county_id column.
func (o *County) SellerCountyTaxExemptions(mods ...qm.QueryMod) taxExemptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"tax_exemptions\".\"seller_county_id\"=?", o.ID),
	)

	return TaxExemptions(queryMods...)
}

// LoadState allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (countyL) LoadState(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCounty interface{}, mods queries.Applicator) error {
	var slice []*County
	var object *County

	if singular {
		var ok bool
		object, ok = maybeCounty.(*County)
		if !ok {
			object = new(County)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCounty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCounty))
			}
		}
	} else {
		s, ok := maybeCounty.(*[]*County)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCounty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCounty))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &countyR{}
		}
		args = append(args, object.StateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &countyR{}
			}

			for _, a := range args {
				if a == obj.StateID {
					continue Outer
				}
			}

			args = append(args, obj.StateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.state`),
		qm.WhereIn(`alpha.state.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load State")
	}

	var resultSlice []*State
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice State")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for state")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for state")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.State = foreign
		if foreign.R == nil {
			foreign.R = &stateR{}
		}
		foreign.R.Counties = append(foreign.R.Counties, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StateID == foreign.ID {
				local.R.State = foreign
				if foreign.R == nil {
					foreign.R = &stateR{}
				}
				foreign.R.Counties = append(foreign.R.Counties, local)
				break
			}
		}
	}

	return nil
}

// LoadCompanies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (countyL) LoadCompanies(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCounty interface{}, mods queries.Applicator) error {
	var slice []*County
	var object *County

	if singular {
		var ok bool
		object, ok = maybeCounty.(*County)
		if !ok {
			object = new(County)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCounty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCounty))
			}
		}
	} else {
		s, ok := maybeCounty.(*[]*County)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCounty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCounty))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &countyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &countyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.companies`),
		qm.WhereIn(`alpha.companies.county_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load companies")
	}

	var resultSlice []*Company
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice companies")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on companies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for companies")
	}

	if singular {
		object.R.Companies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &companyR{}
			}
			foreign.R.County = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CountyID {
				local.R.Companies = append(local.R.Companies, foreign)
				if foreign.R == nil {
					foreign.R = &companyR{}
				}
				foreign.R.County = local
				break
			}
		}
	}

	return nil
}

// LoadDepots allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (countyL) LoadDepots(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCounty interface{}, mods queries.Applicator) error {
	var slice []*County
	var object *County

	if singular {
		var ok bool
		object, ok = maybeCounty.(*County)
		if !ok {
			object = new(County)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCounty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCounty))
			}
		}
	} else {
		s, ok := maybeCounty.(*[]*County)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCounty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCounty))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &countyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &countyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.depots`),
		qm.WhereIn(`alpha.depots.county_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load depots")
	}

	var resultSlice []*Depot
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice depots")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on depots")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for depots")
	}

	if singular {
		object.R.Depots = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &depotR{}
			}
			foreign.R.County = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CountyID {
				local.R.Depots = append(local.R.Depots, foreign)
				if foreign.R == nil {
					foreign.R = &depotR{}
				}
				foreign.R.County = local
				break
			}
		}
	}

	return nil
}

// LoadMunis allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (countyL) LoadMunis(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCounty interface{}, mods queries.Applicator) error {
	var slice []*County
	var object *County

	if singular {
		var ok bool
		object, ok = maybeCounty.(*County)
		if !ok {
			object = new(County)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCounty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCounty))
			}
		}
	} else {
		s, ok := maybeCounty.(*[]*County)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCounty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCounty))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &countyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &countyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.muni`),
		qm.WhereIn(`alpha.muni.county_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load muni")
	}

	var resultSlice []*Muni
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice muni")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on muni")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for muni")
	}

	if singular {
		object.R.Munis = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &muniR{}
			}
			foreign.R.County = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CountyID {
				local.R.Munis = append(local.R.Munis, foreign)
				if foreign.R == nil {
					foreign.R = &muniR{}
				}
				foreign.R.County = local
				break
			}
		}
	}

	return nil
}

// LoadOffices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (countyL) LoadOffices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCounty interface{}, mods queries.Applicator) error {
	var slice []*County
	var object *County

	if singular {
		var ok bool
		object, ok = maybeCounty.(*County)
		if !ok {
			object = new(County)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCounty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCounty))
			}
		}
	} else {
		s, ok := maybeCounty.(*[]*County)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCounty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCounty))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &countyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &countyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.offices`),
		qm.WhereIn(`alpha.offices.county_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load offices")
	}

	var resultSlice []*Office
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice offices")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on offices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for offices")
	}

	if singular {
		object.R.Offices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &officeR{}
			}
			foreign.R.County = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CountyID {
				local.R.Offices = append(local.R.Offices, foreign)
				if foreign.R == nil {
					foreign.R = &officeR{}
				}
				foreign.R.County = local
				break
			}
		}
	}

	return nil
}

// LoadTaxCounties allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (countyL) LoadTaxCounties(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCounty interface{}, mods queries.Applicator) error {
	var slice []*County
	var object *County

	if singular {
		var ok bool
		object, ok = maybeCounty.(*County)
		if !ok {
			object = new(County)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCounty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCounty))
			}
		}
	} else {
		s, ok := maybeCounty.(*[]*County)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCounty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCounty))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &countyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &countyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.tax_county`),
		qm.WhereIn(`alpha.tax_county.county_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tax_county")
	}

	var resultSlice []*TaxCounty
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tax_county")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tax_county")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tax_county")
	}

	if singular {
		object.R.TaxCounties = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &taxCountyR{}
			}
			foreign.R.County = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CountyID {
				local.R.TaxCounties = append(local.R.TaxCounties, foreign)
				if foreign.R == nil {
					foreign.R = &taxCountyR{}
				}
				foreign.R.County = local
				break
			}
		}
	}

	return nil
}

// LoadBuyerCountyTaxExemptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (countyL) LoadBuyerCountyTaxExemptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCounty interface{}, mods queries.Applicator) error {
	var slice []*County
	var object *County

	if singular {
		var ok bool
		object, ok = maybeCounty.(*County)
		if !ok {
			object = new(County)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCounty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCounty))
			}
		}
	} else {
		s, ok := maybeCounty.(*[]*County)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCounty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCounty))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &countyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &countyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.tax_exemptions`),
		qm.WhereIn(`alpha.tax_exemptions.buyer_county_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tax_exemptions")
	}

	var resultSlice []*TaxExemption
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tax_exemptions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tax_exemptions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tax_exemptions")
	}

	if singular {
		object.R.BuyerCountyTaxExemptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &taxExemptionR{}
			}
			foreign.R.BuyerCounty = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BuyerCountyID) {
				local.R.BuyerCountyTaxExemptions = append(local.R.BuyerCountyTaxExemptions, foreign)
				if foreign.R == nil {
					foreign.R = &taxExemptionR{}
				}
				foreign.R.BuyerCounty = local
				break
			}
		}
	}

	return nil
}

// LoadSellerCountyTaxExemptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (countyL) LoadSellerCountyTaxExemptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCounty interface{}, mods queries.Applicator) error {
	var slice []*County
	var object *County

	if singular {
		var ok bool
		object, ok = maybeCounty.(*County)
		if !ok {
			object = new(County)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCounty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCounty))
			}
		}
	} else {
		s, ok := maybeCounty.(*[]*County)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCounty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCounty))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &countyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &countyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.tax_exemptions`),
		qm.WhereIn(`alpha.tax_exemptions.seller_county_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tax_exemptions")
	}

	var resultSlice []*TaxExemption
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tax_exemptions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tax_exemptions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tax_exemptions")
	}

	if singular {
		object.R.SellerCountyTaxExemptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &taxExemptionR{}
			}
			foreign.R.SellerCounty = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SellerCountyID) {
				local.R.SellerCountyTaxExemptions = append(local.R.SellerCountyTaxExemptions, foreign)
				if foreign.R == nil {
					foreign.R = &taxExemptionR{}
				}
				foreign.R.SellerCounty = local
				break
			}
		}
	}

	return nil
}

// SetStateG of the county to the related item.
// Sets o.R.State to related.
// Adds o to related.R.Counties.
// Uses the global database handle.
func (o *County) SetStateG(ctx context.Context, insert bool, related *State) error {
	return o.SetState(ctx, boil.GetContextDB(), insert, related)
}

// SetState of the county to the related item.
// Sets o.R.State to related.
// Adds o to related.R.Counties.
func (o *County) SetState(ctx context.Context, exec boil.ContextExecutor, insert bool, related *State) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"county\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"state_id"}),
		strmangle.WhereClause("\"", "\"", 2, countyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StateID = related.ID
	if o.R == nil {
		o.R = &countyR{
			State: related,
		}
	} else {
		o.R.State = related
	}

	if related.R == nil {
		related.R = &stateR{
			Counties: CountySlice{o},
		}
	} else {
		related.R.Counties = append(related.R.Counties, o)
	}

	return nil
}

// AddCompaniesG adds the given related objects to the existing relationships
// of the county, optionally inserting them as new records.
// Appends related to o.R.Companies.
// Sets related.R.County appropriately.
// Uses the global database handle.
func (o *County) AddCompaniesG(ctx context.Context, insert bool, related ...*Company) error {
	return o.AddCompanies(ctx, boil.GetContextDB(), insert, related...)
}

// AddCompanies adds the given related objects to the existing relationships
// of the county, optionally inserting them as new records.
// Appends related to o.R.Companies.
// Sets related.R.County appropriately.
func (o *County) AddCompanies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Company) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CountyID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"companies\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"county_id"}),
				strmangle.WhereClause("\"", "\"", 2, companyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CountyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &countyR{
			Companies: related,
		}
	} else {
		o.R.Companies = append(o.R.Companies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &companyR{
				County: o,
			}
		} else {
			rel.R.County = o
		}
	}
	return nil
}

// AddDepotsG adds the given related objects to the existing relationships
// of the county, optionally inserting them as new records.
// Appends related to o.R.Depots.
// Sets related.R.County appropriately.
// Uses the global database handle.
func (o *County) AddDepotsG(ctx context.Context, insert bool, related ...*Depot) error {
	return o.AddDepots(ctx, boil.GetContextDB(), insert, related...)
}

// AddDepots adds the given related objects to the existing relationships
// of the county, optionally inserting them as new records.
// Appends related to o.R.Depots.
// Sets related.R.County appropriately.
func (o *County) AddDepots(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Depot) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CountyID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"depots\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"county_id"}),
				strmangle.WhereClause("\"", "\"", 2, depotPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CountyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &countyR{
			Depots: related,
		}
	} else {
		o.R.Depots = append(o.R.Depots, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &depotR{
				County: o,
			}
		} else {
			rel.R.County = o
		}
	}
	return nil
}

// AddMunisG adds the given related objects to the existing relationships
// of the county, optionally inserting them as new records.
// Appends related to o.R.Munis.
// Sets related.R.County appropriately.
// Uses the global database handle.
func (o *County) AddMunisG(ctx context.Context, insert bool, related ...*Muni) error {
	return o.AddMunis(ctx, boil.GetContextDB(), insert, related...)
}

// AddMunis adds the given related objects to the existing relationships
// of the county, optionally inserting them as new records.
// Appends related to o.R.Munis.
// Sets related.R.County appropriately.
func (o *County) AddMunis(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Muni) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CountyID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"muni\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"county_id"}),
				strmangle.WhereClause("\"", "\"", 2, muniPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CountyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &countyR{
			Munis: related,
		}
	} else {
		o.R.Munis = append(o.R.Munis, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &muniR{
				County: o,
			}
		} else {
			rel.R.County = o
		}
	}
	return nil
}

// AddOfficesG adds the given related objects to the existing relationships
// of the county, optionally inserting them as new records.
// Appends related to o.R.Offices.
// Sets related.R.County appropriately.
// Uses the global database handle.
func (o *County) AddOfficesG(ctx context.Context, insert bool, related ...*Office) error {
	return o.AddOffices(ctx, boil.GetContextDB(), insert, related...)
}

// AddOffices adds the given related objects to the existing relationships
// of the county, optionally inserting them as new records.
// Appends related to o.R.Offices.
// Sets related.R.County appropriately.
func (o *County) AddOffices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Office) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CountyID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"offices\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"county_id"}),
				strmangle.WhereClause("\"", "\"", 2, officePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CountyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &countyR{
			Offices: related,
		}
	} else {
		o.R.Offices = append(o.R.Offices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &officeR{
				County: o,
			}
		} else {
			rel.R.County = o
		}
	}
	return nil
}

// AddTaxCountiesG adds the given related objects to the existing relationships
// of the county, optionally inserting them as new records.
// Appends related to o.R.TaxCounties.
// Sets related.R.County appropriately.
// Uses the global database handle.
func (o *County) AddTaxCountiesG(ctx context.Context, insert bool, related ...*TaxCounty) error {
	return o.AddTaxCounties(ctx, boil.GetContextDB(), insert, related...)
}

// AddTaxCounties adds the given related objects to the existing relationships
// of the county, optionally inserting them as new records.
// Appends related to o.R.TaxCounties.
// Sets related.R.County appropriately.
func (o *County) AddTaxCounties(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaxCounty) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CountyID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"tax_county\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"county_id"}),
				strmangle.WhereClause("\"", "\"", 2, taxCountyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CountyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &countyR{
			TaxCounties: related,
		}
	} else {
		o.R.TaxCounties = append(o.R.TaxCounties, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &taxCountyR{
				County: o,
			}
		} else {
			rel.R.County = o
		}
	}
	return nil
}

// AddBuyerCountyTaxExemptionsG adds the given related objects to the existing relationships
// of the county, optionally inserting them as new records.
// Appends related to o.R.BuyerCountyTaxExemptions.
// Sets related.R.BuyerCounty appropriately.
// Uses the global database handle.
func (o *County) AddBuyerCountyTaxExemptionsG(ctx context.Context, insert bool, related ...*TaxExemption) error {
	return o.AddBuyerCountyTaxExemptions(ctx, boil.GetContextDB(), insert, related...)
}

// AddBuyerCountyTaxExemptions adds the given related objects to the existing relationships
// of the county, optionally inserting them as new records.
// Appends related to o.R.BuyerCountyTaxExemptions.
// Sets related.R.BuyerCounty appropriately.
func (o *County) AddBuyerCountyTaxExemptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaxExemption) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BuyerCountyID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"tax_exemptions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"buyer_county_id"}),
				strmangle.WhereClause("\"", "\"", 2, taxExemptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BuyerCountyID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &countyR{
			BuyerCountyTaxExemptions: related,
		}
	} else {
		o.R.BuyerCountyTaxExemptions = append(o.R.BuyerCountyTaxExemptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &taxExemptionR{
				BuyerCounty: o,
			}
		} else {
			rel.R.BuyerCounty = o
		}
	}
	return nil
}

// SetBuyerCountyTaxExemptionsG removes all previously related items of the
// county replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BuyerCounty's BuyerCountyTaxExemptions accordingly.
// Replaces o.R.BuyerCountyTaxExemptions with related.
// Sets related.R.BuyerCounty's BuyerCountyTaxExemptions accordingly.
// Uses the global database handle.
func (o *County) SetBuyerCountyTaxExemptionsG(ctx context.Context, insert bool, related ...*TaxExemption) error {
	return o.SetBuyerCountyTaxExemptions(ctx, boil.GetContextDB(), insert, related...)
}

// SetBuyerCountyTaxExemptions removes all previously related items of the
// county replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BuyerCounty's BuyerCountyTaxExemptions accordingly.
// Replaces o.R.BuyerCountyTaxExemptions with related.
// Sets related.R.BuyerCounty's BuyerCountyTaxExemptions accordingly.
func (o *County) SetBuyerCountyTaxExemptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaxExemption) error {
	query := "update \"alpha\".\"tax_exemptions\" set \"buyer_county_id\" = null where \"buyer_county_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BuyerCountyTaxExemptions {
			queries.SetScanner(&rel.BuyerCountyID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.BuyerCounty = nil
		}
		o.R.BuyerCountyTaxExemptions = nil
	}

	return o.AddBuyerCountyTaxExemptions(ctx, exec, insert, related...)
}

// RemoveBuyerCountyTaxExemptionsG relationships from objects passed in.
// Removes related items from R.BuyerCountyTaxExemptions (uses pointer comparison, removal does not keep order)
// Sets related.R.BuyerCounty.
// Uses the global database handle.
func (o *County) RemoveBuyerCountyTaxExemptionsG(ctx context.Context, related ...*TaxExemption) error {
	return o.RemoveBuyerCountyTaxExemptions(ctx, boil.GetContextDB(), related...)
}

// RemoveBuyerCountyTaxExemptions relationships from objects passed in.
// Removes related items from R.BuyerCountyTaxExemptions (uses pointer comparison, removal does not keep order)
// Sets related.R.BuyerCounty.
func (o *County) RemoveBuyerCountyTaxExemptions(ctx context.Context, exec boil.ContextExecutor, related ...*TaxExemption) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BuyerCountyID, nil)
		if rel.R != nil {
			rel.R.BuyerCounty = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("buyer_county_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BuyerCountyTaxExemptions {
			if rel != ri {
				continue
			}

			ln := len(o.R.BuyerCountyTaxExemptions)
			if ln > 1 && i < ln-1 {
				o.R.BuyerCountyTaxExemptions[i] = o.R.BuyerCountyTaxExemptions[ln-1]
			}
			o.R.BuyerCountyTaxExemptions = o.R.BuyerCountyTaxExemptions[:ln-1]
			break
		}
	}

	return nil
}

// AddSellerCountyTaxExemptionsG adds the given related objects to the existing relationships
// of the county, optionally inserting them as new records.
// Appends related to o.R.SellerCountyTaxExemptions.
// Sets related.R.SellerCounty appropriately.
// Uses the global database handle.
func (o *County) AddSellerCountyTaxExemptionsG(ctx context.Context, insert bool, related ...*TaxExemption) error {
	return o.AddSellerCountyTaxExemptions(ctx, boil.GetContextDB(), insert, related...)
}

// AddSellerCountyTaxExemptions adds the given related objects to the existing relationships
// of the county, optionally inserting them as new records.
// Appends related to o.R.SellerCountyTaxExemptions.
// Sets related.R.SellerCounty appropriately.
func (o *County) AddSellerCountyTaxExemptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaxExemption) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SellerCountyID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"tax_exemptions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"seller_county_id"}),
				strmangle.WhereClause("\"", "\"", 2, taxExemptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SellerCountyID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &countyR{
			SellerCountyTaxExemptions: related,
		}
	} else {
		o.R.SellerCountyTaxExemptions = append(o.R.SellerCountyTaxExemptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &taxExemptionR{
				SellerCounty: o,
			}
		} else {
			rel.R.SellerCounty = o
		}
	}
	return nil
}

// SetSellerCountyTaxExemptionsG removes all previously related items of the
// county replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SellerCounty's SellerCountyTaxExemptions accordingly.
// Replaces o.R.SellerCountyTaxExemptions with related.
// Sets related.R.SellerCounty's SellerCountyTaxExemptions accordingly.
// Uses the global database handle.
func (o *County) SetSellerCountyTaxExemptionsG(ctx context.Context, insert bool, related ...*TaxExemption) error {
	return o.SetSellerCountyTaxExemptions(ctx, boil.GetContextDB(), insert, related...)
}

// SetSellerCountyTaxExemptions removes all previously related items of the
// county replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SellerCounty's SellerCountyTaxExemptions accordingly.
// Replaces o.R.SellerCountyTaxExemptions with related.
// Sets related.R.SellerCounty's SellerCountyTaxExemptions accordingly.
func (o *County) SetSellerCountyTaxExemptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaxExemption) error {
	query := "update \"alpha\".\"tax_exemptions\" set \"seller_county_id\" = null where \"seller_county_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SellerCountyTaxExemptions {
			queries.SetScanner(&rel.SellerCountyID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SellerCounty = nil
		}
		o.R.SellerCountyTaxExemptions = nil
	}

	return o.AddSellerCountyTaxExemptions(ctx, exec, insert, related...)
}

// RemoveSellerCountyTaxExemptionsG relationships from objects passed in.
// Removes related items from R.SellerCountyTaxExemptions (uses pointer comparison, removal does not keep order)
// Sets related.R.SellerCounty.
// Uses the global database handle.
func (o *County) RemoveSellerCountyTaxExemptionsG(ctx context.Context, related ...*TaxExemption) error {
	return o.RemoveSellerCountyTaxExemptions(ctx, boil.GetContextDB(), related...)
}

// RemoveSellerCountyTaxExemptions relationships from objects passed in.
// Removes related items from R.SellerCountyTaxExemptions (uses pointer comparison, removal does not keep order)
// Sets related.R.SellerCounty.
func (o *County) RemoveSellerCountyTaxExemptions(ctx context.Context, exec boil.ContextExecutor, related ...*TaxExemption) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SellerCountyID, nil)
		if rel.R != nil {
			rel.R.SellerCounty = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("seller_county_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SellerCountyTaxExemptions {
			if rel != ri {
				continue
			}

			ln := len(o.R.SellerCountyTaxExemptions)
			if ln > 1 && i < ln-1 {
				o.R.SellerCountyTaxExemptions[i] = o.R.SellerCountyTaxExemptions[ln-1]
			}
			o.R.SellerCountyTaxExemptions = o.R.SellerCountyTaxExemptions[:ln-1]
			break
		}
	}

	return nil
}

// Counties retrieves all the records using an executor.
func Counties(mods ...qm.QueryMod) countyQuery {
	mods = append(mods, qm.From("\"alpha\".\"county\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"county\".*"})
	}

	return countyQuery{q}
}

// FindCountyG retrieves a single record by ID.
func FindCountyG(ctx context.Context, iD int, selectCols ...string) (*County, error) {
	return FindCounty(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindCounty retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCounty(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*County, error) {
	countyObj := &County{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"county\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, countyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from county")
	}

	return countyObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *County) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *County) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no county provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(countyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	countyInsertCacheMut.RLock()
	cache, cached := countyInsertCache[key]
	countyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			countyAllColumns,
			countyColumnsWithDefault,
			countyColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, countyGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(countyType, countyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(countyType, countyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"county\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"county\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into county")
	}

	if !cached {
		countyInsertCacheMut.Lock()
		countyInsertCache[key] = cache
		countyInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single County record using the global executor.
// See Update for more documentation.
func (o *County) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the County.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *County) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	countyUpdateCacheMut.RLock()
	cache, cached := countyUpdateCache[key]
	countyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			countyAllColumns,
			countyPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, countyGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update county, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"county\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, countyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(countyType, countyMapping, append(wl, countyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update county row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for county")
	}

	if !cached {
		countyUpdateCacheMut.Lock()
		countyUpdateCache[key] = cache
		countyUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q countyQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q countyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for county")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for county")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CountySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CountySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), countyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"county\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, countyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in county slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all county")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *County) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *County) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no county provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(countyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	countyUpsertCacheMut.RLock()
	cache, cached := countyUpsertCache[key]
	countyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			countyAllColumns,
			countyColumnsWithDefault,
			countyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			countyAllColumns,
			countyPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, countyGeneratedColumns)
		update = strmangle.SetComplement(update, countyGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert county, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(countyPrimaryKeyColumns))
			copy(conflict, countyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"county\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(countyType, countyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(countyType, countyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert county")
	}

	if !cached {
		countyUpsertCacheMut.Lock()
		countyUpsertCache[key] = cache
		countyUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single County record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *County) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single County record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *County) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no County provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), countyPrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"county\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from county")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for county")
	}

	return rowsAff, nil
}

func (q countyQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q countyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no countyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from county")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for county")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CountySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CountySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), countyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"county\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, countyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from county slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for county")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *County) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no County provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *County) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCounty(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CountySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty CountySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CountySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CountySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), countyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"county\".* FROM \"alpha\".\"county\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, countyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CountySlice")
	}

	*o = slice

	return nil
}

// CountyExistsG checks if the County row exists.
func CountyExistsG(ctx context.Context, iD int) (bool, error) {
	return CountyExists(ctx, boil.GetContextDB(), iD)
}

// CountyExists checks if the County row exists.
func CountyExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"county\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if county exists")
	}

	return exists, nil
}
