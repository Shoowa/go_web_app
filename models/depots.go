// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Depot is an object representing the database table.
type Depot struct {
	ID            int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	CompanyID     int         `boil:"company_id" json:"company_id" toml:"company_id" yaml:"company_id"`
	InternalLabel null.String `boil:"internal_label" json:"internal_label,omitempty" toml:"internal_label" yaml:"internal_label,omitempty"`
	Active        bool        `boil:"active" json:"active" toml:"active" yaml:"active"`
	Name          string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Street        string      `boil:"street" json:"street" toml:"street" yaml:"street"`
	Suite         null.String `boil:"suite" json:"suite,omitempty" toml:"suite" yaml:"suite,omitempty"`
	Postal        string      `boil:"postal" json:"postal" toml:"postal" yaml:"postal"`
	StateID       string      `boil:"state_id" json:"state_id" toml:"state_id" yaml:"state_id"`
	CountyID      int         `boil:"county_id" json:"county_id" toml:"county_id" yaml:"county_id"`
	MuniID        null.Int    `boil:"muni_id" json:"muni_id,omitempty" toml:"muni_id" yaml:"muni_id,omitempty"`
	Created       time.Time   `boil:"created" json:"created" toml:"created" yaml:"created"`

	R *depotR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L depotL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DepotColumns = struct {
	ID            string
	CompanyID     string
	InternalLabel string
	Active        string
	Name          string
	Street        string
	Suite         string
	Postal        string
	StateID       string
	CountyID      string
	MuniID        string
	Created       string
}{
	ID:            "id",
	CompanyID:     "company_id",
	InternalLabel: "internal_label",
	Active:        "active",
	Name:          "name",
	Street:        "street",
	Suite:         "suite",
	Postal:        "postal",
	StateID:       "state_id",
	CountyID:      "county_id",
	MuniID:        "muni_id",
	Created:       "created",
}

var DepotTableColumns = struct {
	ID            string
	CompanyID     string
	InternalLabel string
	Active        string
	Name          string
	Street        string
	Suite         string
	Postal        string
	StateID       string
	CountyID      string
	MuniID        string
	Created       string
}{
	ID:            "depots.id",
	CompanyID:     "depots.company_id",
	InternalLabel: "depots.internal_label",
	Active:        "depots.active",
	Name:          "depots.name",
	Street:        "depots.street",
	Suite:         "depots.suite",
	Postal:        "depots.postal",
	StateID:       "depots.state_id",
	CountyID:      "depots.county_id",
	MuniID:        "depots.muni_id",
	Created:       "depots.created",
}

// Generated where

var DepotWhere = struct {
	ID            whereHelperint
	CompanyID     whereHelperint
	InternalLabel whereHelpernull_String
	Active        whereHelperbool
	Name          whereHelperstring
	Street        whereHelperstring
	Suite         whereHelpernull_String
	Postal        whereHelperstring
	StateID       whereHelperstring
	CountyID      whereHelperint
	MuniID        whereHelpernull_Int
	Created       whereHelpertime_Time
}{
	ID:            whereHelperint{field: "\"alpha\".\"depots\".\"id\""},
	CompanyID:     whereHelperint{field: "\"alpha\".\"depots\".\"company_id\""},
	InternalLabel: whereHelpernull_String{field: "\"alpha\".\"depots\".\"internal_label\""},
	Active:        whereHelperbool{field: "\"alpha\".\"depots\".\"active\""},
	Name:          whereHelperstring{field: "\"alpha\".\"depots\".\"name\""},
	Street:        whereHelperstring{field: "\"alpha\".\"depots\".\"street\""},
	Suite:         whereHelpernull_String{field: "\"alpha\".\"depots\".\"suite\""},
	Postal:        whereHelperstring{field: "\"alpha\".\"depots\".\"postal\""},
	StateID:       whereHelperstring{field: "\"alpha\".\"depots\".\"state_id\""},
	CountyID:      whereHelperint{field: "\"alpha\".\"depots\".\"county_id\""},
	MuniID:        whereHelpernull_Int{field: "\"alpha\".\"depots\".\"muni_id\""},
	Created:       whereHelpertime_Time{field: "\"alpha\".\"depots\".\"created\""},
}

// DepotRels is where relationship names are stored.
var DepotRels = struct {
	Company string
	County  string
	Muni    string
	State   string
	Stocks  string
}{
	Company: "Company",
	County:  "County",
	Muni:    "Muni",
	State:   "State",
	Stocks:  "Stocks",
}

// depotR is where relationships are stored.
type depotR struct {
	Company *Company   `boil:"Company" json:"Company" toml:"Company" yaml:"Company"`
	County  *County    `boil:"County" json:"County" toml:"County" yaml:"County"`
	Muni    *Muni      `boil:"Muni" json:"Muni" toml:"Muni" yaml:"Muni"`
	State   *State     `boil:"State" json:"State" toml:"State" yaml:"State"`
	Stocks  StockSlice `boil:"Stocks" json:"Stocks" toml:"Stocks" yaml:"Stocks"`
}

// NewStruct creates a new relationship struct
func (*depotR) NewStruct() *depotR {
	return &depotR{}
}

func (r *depotR) GetCompany() *Company {
	if r == nil {
		return nil
	}
	return r.Company
}

func (r *depotR) GetCounty() *County {
	if r == nil {
		return nil
	}
	return r.County
}

func (r *depotR) GetMuni() *Muni {
	if r == nil {
		return nil
	}
	return r.Muni
}

func (r *depotR) GetState() *State {
	if r == nil {
		return nil
	}
	return r.State
}

func (r *depotR) GetStocks() StockSlice {
	if r == nil {
		return nil
	}
	return r.Stocks
}

// depotL is where Load methods for each relationship are stored.
type depotL struct{}

var (
	depotAllColumns            = []string{"id", "company_id", "internal_label", "active", "name", "street", "suite", "postal", "state_id", "county_id", "muni_id", "created"}
	depotColumnsWithoutDefault = []string{"company_id", "name", "street", "postal", "state_id", "county_id"}
	depotColumnsWithDefault    = []string{"id", "internal_label", "active", "suite", "muni_id", "created"}
	depotPrimaryKeyColumns     = []string{"id"}
	depotGeneratedColumns      = []string{"id"}
)

type (
	// DepotSlice is an alias for a slice of pointers to Depot.
	// This should almost always be used instead of []Depot.
	DepotSlice []*Depot

	depotQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	depotType                 = reflect.TypeOf(&Depot{})
	depotMapping              = queries.MakeStructMapping(depotType)
	depotPrimaryKeyMapping, _ = queries.BindMapping(depotType, depotMapping, depotPrimaryKeyColumns)
	depotInsertCacheMut       sync.RWMutex
	depotInsertCache          = make(map[string]insertCache)
	depotUpdateCacheMut       sync.RWMutex
	depotUpdateCache          = make(map[string]updateCache)
	depotUpsertCacheMut       sync.RWMutex
	depotUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single depot record from the query using the global executor.
func (q depotQuery) OneG(ctx context.Context) (*Depot, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single depot record from the query.
func (q depotQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Depot, error) {
	o := &Depot{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for depots")
	}

	return o, nil
}

// AllG returns all Depot records from the query using the global executor.
func (q depotQuery) AllG(ctx context.Context) (DepotSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Depot records from the query.
func (q depotQuery) All(ctx context.Context, exec boil.ContextExecutor) (DepotSlice, error) {
	var o []*Depot

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Depot slice")
	}

	return o, nil
}

// CountG returns the count of all Depot records in the query using the global executor
func (q depotQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Depot records in the query.
func (q depotQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count depots rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q depotQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q depotQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if depots exists")
	}

	return count > 0, nil
}

// Company pointed to by the foreign key.
func (o *Depot) Company(mods ...qm.QueryMod) companyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CompanyID),
	}

	queryMods = append(queryMods, mods...)

	return Companies(queryMods...)
}

// County pointed to by the foreign key.
func (o *Depot) County(mods ...qm.QueryMod) countyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CountyID),
	}

	queryMods = append(queryMods, mods...)

	return Counties(queryMods...)
}

// Muni pointed to by the foreign key.
func (o *Depot) Muni(mods ...qm.QueryMod) muniQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MuniID),
	}

	queryMods = append(queryMods, mods...)

	return Munis(queryMods...)
}

// State pointed to by the foreign key.
func (o *Depot) State(mods ...qm.QueryMod) stateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StateID),
	}

	queryMods = append(queryMods, mods...)

	return States(queryMods...)
}

// Stocks retrieves all the stock's Stocks with an executor.
func (o *Depot) Stocks(mods ...qm.QueryMod) stockQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"stock\".\"depot_id\"=?", o.ID),
	)

	return Stocks(queryMods...)
}

// LoadCompany allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (depotL) LoadCompany(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDepot interface{}, mods queries.Applicator) error {
	var slice []*Depot
	var object *Depot

	if singular {
		var ok bool
		object, ok = maybeDepot.(*Depot)
		if !ok {
			object = new(Depot)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDepot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDepot))
			}
		}
	} else {
		s, ok := maybeDepot.(*[]*Depot)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDepot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDepot))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &depotR{}
		}
		args = append(args, object.CompanyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &depotR{}
			}

			for _, a := range args {
				if a == obj.CompanyID {
					continue Outer
				}
			}

			args = append(args, obj.CompanyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.companies`),
		qm.WhereIn(`alpha.companies.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Company")
	}

	var resultSlice []*Company
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Company")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for companies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for companies")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Company = foreign
		if foreign.R == nil {
			foreign.R = &companyR{}
		}
		foreign.R.Depots = append(foreign.R.Depots, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CompanyID == foreign.ID {
				local.R.Company = foreign
				if foreign.R == nil {
					foreign.R = &companyR{}
				}
				foreign.R.Depots = append(foreign.R.Depots, local)
				break
			}
		}
	}

	return nil
}

// LoadCounty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (depotL) LoadCounty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDepot interface{}, mods queries.Applicator) error {
	var slice []*Depot
	var object *Depot

	if singular {
		var ok bool
		object, ok = maybeDepot.(*Depot)
		if !ok {
			object = new(Depot)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDepot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDepot))
			}
		}
	} else {
		s, ok := maybeDepot.(*[]*Depot)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDepot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDepot))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &depotR{}
		}
		args = append(args, object.CountyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &depotR{}
			}

			for _, a := range args {
				if a == obj.CountyID {
					continue Outer
				}
			}

			args = append(args, obj.CountyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.county`),
		qm.WhereIn(`alpha.county.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load County")
	}

	var resultSlice []*County
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice County")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for county")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for county")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.County = foreign
		if foreign.R == nil {
			foreign.R = &countyR{}
		}
		foreign.R.Depots = append(foreign.R.Depots, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CountyID == foreign.ID {
				local.R.County = foreign
				if foreign.R == nil {
					foreign.R = &countyR{}
				}
				foreign.R.Depots = append(foreign.R.Depots, local)
				break
			}
		}
	}

	return nil
}

// LoadMuni allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (depotL) LoadMuni(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDepot interface{}, mods queries.Applicator) error {
	var slice []*Depot
	var object *Depot

	if singular {
		var ok bool
		object, ok = maybeDepot.(*Depot)
		if !ok {
			object = new(Depot)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDepot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDepot))
			}
		}
	} else {
		s, ok := maybeDepot.(*[]*Depot)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDepot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDepot))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &depotR{}
		}
		if !queries.IsNil(object.MuniID) {
			args = append(args, object.MuniID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &depotR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.MuniID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.MuniID) {
				args = append(args, obj.MuniID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.muni`),
		qm.WhereIn(`alpha.muni.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Muni")
	}

	var resultSlice []*Muni
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Muni")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for muni")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for muni")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Muni = foreign
		if foreign.R == nil {
			foreign.R = &muniR{}
		}
		foreign.R.Depots = append(foreign.R.Depots, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MuniID, foreign.ID) {
				local.R.Muni = foreign
				if foreign.R == nil {
					foreign.R = &muniR{}
				}
				foreign.R.Depots = append(foreign.R.Depots, local)
				break
			}
		}
	}

	return nil
}

// LoadState allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (depotL) LoadState(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDepot interface{}, mods queries.Applicator) error {
	var slice []*Depot
	var object *Depot

	if singular {
		var ok bool
		object, ok = maybeDepot.(*Depot)
		if !ok {
			object = new(Depot)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDepot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDepot))
			}
		}
	} else {
		s, ok := maybeDepot.(*[]*Depot)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDepot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDepot))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &depotR{}
		}
		args = append(args, object.StateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &depotR{}
			}

			for _, a := range args {
				if a == obj.StateID {
					continue Outer
				}
			}

			args = append(args, obj.StateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.state`),
		qm.WhereIn(`alpha.state.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load State")
	}

	var resultSlice []*State
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice State")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for state")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for state")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.State = foreign
		if foreign.R == nil {
			foreign.R = &stateR{}
		}
		foreign.R.Depots = append(foreign.R.Depots, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StateID == foreign.ID {
				local.R.State = foreign
				if foreign.R == nil {
					foreign.R = &stateR{}
				}
				foreign.R.Depots = append(foreign.R.Depots, local)
				break
			}
		}
	}

	return nil
}

// LoadStocks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (depotL) LoadStocks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDepot interface{}, mods queries.Applicator) error {
	var slice []*Depot
	var object *Depot

	if singular {
		var ok bool
		object, ok = maybeDepot.(*Depot)
		if !ok {
			object = new(Depot)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDepot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDepot))
			}
		}
	} else {
		s, ok := maybeDepot.(*[]*Depot)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDepot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDepot))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &depotR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &depotR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.stock`),
		qm.WhereIn(`alpha.stock.depot_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load stock")
	}

	var resultSlice []*Stock
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice stock")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on stock")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stock")
	}

	if singular {
		object.R.Stocks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &stockR{}
			}
			foreign.R.Depot = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DepotID) {
				local.R.Stocks = append(local.R.Stocks, foreign)
				if foreign.R == nil {
					foreign.R = &stockR{}
				}
				foreign.R.Depot = local
				break
			}
		}
	}

	return nil
}

// SetCompanyG of the depot to the related item.
// Sets o.R.Company to related.
// Adds o to related.R.Depots.
// Uses the global database handle.
func (o *Depot) SetCompanyG(ctx context.Context, insert bool, related *Company) error {
	return o.SetCompany(ctx, boil.GetContextDB(), insert, related)
}

// SetCompany of the depot to the related item.
// Sets o.R.Company to related.
// Adds o to related.R.Depots.
func (o *Depot) SetCompany(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Company) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"depots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"company_id"}),
		strmangle.WhereClause("\"", "\"", 2, depotPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CompanyID = related.ID
	if o.R == nil {
		o.R = &depotR{
			Company: related,
		}
	} else {
		o.R.Company = related
	}

	if related.R == nil {
		related.R = &companyR{
			Depots: DepotSlice{o},
		}
	} else {
		related.R.Depots = append(related.R.Depots, o)
	}

	return nil
}

// SetCountyG of the depot to the related item.
// Sets o.R.County to related.
// Adds o to related.R.Depots.
// Uses the global database handle.
func (o *Depot) SetCountyG(ctx context.Context, insert bool, related *County) error {
	return o.SetCounty(ctx, boil.GetContextDB(), insert, related)
}

// SetCounty of the depot to the related item.
// Sets o.R.County to related.
// Adds o to related.R.Depots.
func (o *Depot) SetCounty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *County) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"depots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"county_id"}),
		strmangle.WhereClause("\"", "\"", 2, depotPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CountyID = related.ID
	if o.R == nil {
		o.R = &depotR{
			County: related,
		}
	} else {
		o.R.County = related
	}

	if related.R == nil {
		related.R = &countyR{
			Depots: DepotSlice{o},
		}
	} else {
		related.R.Depots = append(related.R.Depots, o)
	}

	return nil
}

// SetMuniG of the depot to the related item.
// Sets o.R.Muni to related.
// Adds o to related.R.Depots.
// Uses the global database handle.
func (o *Depot) SetMuniG(ctx context.Context, insert bool, related *Muni) error {
	return o.SetMuni(ctx, boil.GetContextDB(), insert, related)
}

// SetMuni of the depot to the related item.
// Sets o.R.Muni to related.
// Adds o to related.R.Depots.
func (o *Depot) SetMuni(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Muni) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"depots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"muni_id"}),
		strmangle.WhereClause("\"", "\"", 2, depotPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MuniID, related.ID)
	if o.R == nil {
		o.R = &depotR{
			Muni: related,
		}
	} else {
		o.R.Muni = related
	}

	if related.R == nil {
		related.R = &muniR{
			Depots: DepotSlice{o},
		}
	} else {
		related.R.Depots = append(related.R.Depots, o)
	}

	return nil
}

// RemoveMuniG relationship.
// Sets o.R.Muni to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Depot) RemoveMuniG(ctx context.Context, related *Muni) error {
	return o.RemoveMuni(ctx, boil.GetContextDB(), related)
}

// RemoveMuni relationship.
// Sets o.R.Muni to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Depot) RemoveMuni(ctx context.Context, exec boil.ContextExecutor, related *Muni) error {
	var err error

	queries.SetScanner(&o.MuniID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("muni_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Muni = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Depots {
		if queries.Equal(o.MuniID, ri.MuniID) {
			continue
		}

		ln := len(related.R.Depots)
		if ln > 1 && i < ln-1 {
			related.R.Depots[i] = related.R.Depots[ln-1]
		}
		related.R.Depots = related.R.Depots[:ln-1]
		break
	}
	return nil
}

// SetStateG of the depot to the related item.
// Sets o.R.State to related.
// Adds o to related.R.Depots.
// Uses the global database handle.
func (o *Depot) SetStateG(ctx context.Context, insert bool, related *State) error {
	return o.SetState(ctx, boil.GetContextDB(), insert, related)
}

// SetState of the depot to the related item.
// Sets o.R.State to related.
// Adds o to related.R.Depots.
func (o *Depot) SetState(ctx context.Context, exec boil.ContextExecutor, insert bool, related *State) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"depots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"state_id"}),
		strmangle.WhereClause("\"", "\"", 2, depotPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StateID = related.ID
	if o.R == nil {
		o.R = &depotR{
			State: related,
		}
	} else {
		o.R.State = related
	}

	if related.R == nil {
		related.R = &stateR{
			Depots: DepotSlice{o},
		}
	} else {
		related.R.Depots = append(related.R.Depots, o)
	}

	return nil
}

// AddStocksG adds the given related objects to the existing relationships
// of the depot, optionally inserting them as new records.
// Appends related to o.R.Stocks.
// Sets related.R.Depot appropriately.
// Uses the global database handle.
func (o *Depot) AddStocksG(ctx context.Context, insert bool, related ...*Stock) error {
	return o.AddStocks(ctx, boil.GetContextDB(), insert, related...)
}

// AddStocks adds the given related objects to the existing relationships
// of the depot, optionally inserting them as new records.
// Appends related to o.R.Stocks.
// Sets related.R.Depot appropriately.
func (o *Depot) AddStocks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Stock) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DepotID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"stock\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"depot_id"}),
				strmangle.WhereClause("\"", "\"", 2, stockPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DepotID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &depotR{
			Stocks: related,
		}
	} else {
		o.R.Stocks = append(o.R.Stocks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &stockR{
				Depot: o,
			}
		} else {
			rel.R.Depot = o
		}
	}
	return nil
}

// SetStocksG removes all previously related items of the
// depot replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Depot's Stocks accordingly.
// Replaces o.R.Stocks with related.
// Sets related.R.Depot's Stocks accordingly.
// Uses the global database handle.
func (o *Depot) SetStocksG(ctx context.Context, insert bool, related ...*Stock) error {
	return o.SetStocks(ctx, boil.GetContextDB(), insert, related...)
}

// SetStocks removes all previously related items of the
// depot replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Depot's Stocks accordingly.
// Replaces o.R.Stocks with related.
// Sets related.R.Depot's Stocks accordingly.
func (o *Depot) SetStocks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Stock) error {
	query := "update \"alpha\".\"stock\" set \"depot_id\" = null where \"depot_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Stocks {
			queries.SetScanner(&rel.DepotID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Depot = nil
		}
		o.R.Stocks = nil
	}

	return o.AddStocks(ctx, exec, insert, related...)
}

// RemoveStocksG relationships from objects passed in.
// Removes related items from R.Stocks (uses pointer comparison, removal does not keep order)
// Sets related.R.Depot.
// Uses the global database handle.
func (o *Depot) RemoveStocksG(ctx context.Context, related ...*Stock) error {
	return o.RemoveStocks(ctx, boil.GetContextDB(), related...)
}

// RemoveStocks relationships from objects passed in.
// Removes related items from R.Stocks (uses pointer comparison, removal does not keep order)
// Sets related.R.Depot.
func (o *Depot) RemoveStocks(ctx context.Context, exec boil.ContextExecutor, related ...*Stock) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DepotID, nil)
		if rel.R != nil {
			rel.R.Depot = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("depot_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Stocks {
			if rel != ri {
				continue
			}

			ln := len(o.R.Stocks)
			if ln > 1 && i < ln-1 {
				o.R.Stocks[i] = o.R.Stocks[ln-1]
			}
			o.R.Stocks = o.R.Stocks[:ln-1]
			break
		}
	}

	return nil
}

// Depots retrieves all the records using an executor.
func Depots(mods ...qm.QueryMod) depotQuery {
	mods = append(mods, qm.From("\"alpha\".\"depots\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"depots\".*"})
	}

	return depotQuery{q}
}

// FindDepotG retrieves a single record by ID.
func FindDepotG(ctx context.Context, iD int, selectCols ...string) (*Depot, error) {
	return FindDepot(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindDepot retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDepot(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Depot, error) {
	depotObj := &Depot{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"depots\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, depotObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from depots")
	}

	return depotObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Depot) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Depot) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no depots provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(depotColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	depotInsertCacheMut.RLock()
	cache, cached := depotInsertCache[key]
	depotInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			depotAllColumns,
			depotColumnsWithDefault,
			depotColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, depotGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(depotType, depotMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(depotType, depotMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"depots\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"depots\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into depots")
	}

	if !cached {
		depotInsertCacheMut.Lock()
		depotInsertCache[key] = cache
		depotInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Depot record using the global executor.
// See Update for more documentation.
func (o *Depot) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Depot.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Depot) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	depotUpdateCacheMut.RLock()
	cache, cached := depotUpdateCache[key]
	depotUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			depotAllColumns,
			depotPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, depotGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update depots, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"depots\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, depotPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(depotType, depotMapping, append(wl, depotPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update depots row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for depots")
	}

	if !cached {
		depotUpdateCacheMut.Lock()
		depotUpdateCache[key] = cache
		depotUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q depotQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q depotQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for depots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for depots")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DepotSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DepotSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), depotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"depots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, depotPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in depot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all depot")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Depot) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Depot) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no depots provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(depotColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	depotUpsertCacheMut.RLock()
	cache, cached := depotUpsertCache[key]
	depotUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			depotAllColumns,
			depotColumnsWithDefault,
			depotColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			depotAllColumns,
			depotPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, depotGeneratedColumns)
		update = strmangle.SetComplement(update, depotGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert depots, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(depotPrimaryKeyColumns))
			copy(conflict, depotPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"depots\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(depotType, depotMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(depotType, depotMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert depots")
	}

	if !cached {
		depotUpsertCacheMut.Lock()
		depotUpsertCache[key] = cache
		depotUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single Depot record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Depot) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Depot record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Depot) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Depot provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), depotPrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"depots\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from depots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for depots")
	}

	return rowsAff, nil
}

func (q depotQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q depotQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no depotQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from depots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for depots")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DepotSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DepotSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), depotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"depots\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, depotPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from depot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for depots")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Depot) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Depot provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Depot) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDepot(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DepotSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty DepotSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DepotSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DepotSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), depotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"depots\".* FROM \"alpha\".\"depots\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, depotPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DepotSlice")
	}

	*o = slice

	return nil
}

// DepotExistsG checks if the Depot row exists.
func DepotExistsG(ctx context.Context, iD int) (bool, error) {
	return DepotExists(ctx, boil.GetContextDB(), iD)
}

// DepotExists checks if the Depot row exists.
func DepotExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"depots\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if depots exists")
	}

	return exists, nil
}
