// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TaxExemption is an object representing the database table.
type TaxExemption struct {
	ID               int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	SalesorderID     null.Int    `boil:"salesorder_id" json:"salesorder_id,omitempty" toml:"salesorder_id" yaml:"salesorder_id,omitempty"`
	AuthCertID       null.Int    `boil:"auth_cert_id" json:"auth_cert_id,omitempty" toml:"auth_cert_id" yaml:"auth_cert_id,omitempty"`
	RegistrationDate time.Time   `boil:"registration_date" json:"registration_date" toml:"registration_date" yaml:"registration_date"`
	BuyerName        string      `boil:"buyer_name" json:"buyer_name" toml:"buyer_name" yaml:"buyer_name"`
	BuyerStreet      string      `boil:"buyer_street" json:"buyer_street" toml:"buyer_street" yaml:"buyer_street"`
	BuyerSuite       null.String `boil:"buyer_suite" json:"buyer_suite,omitempty" toml:"buyer_suite" yaml:"buyer_suite,omitempty"`
	BuyerPostal      string      `boil:"buyer_postal" json:"buyer_postal" toml:"buyer_postal" yaml:"buyer_postal"`
	BuyerStateID     null.String `boil:"buyer_state_id" json:"buyer_state_id,omitempty" toml:"buyer_state_id" yaml:"buyer_state_id,omitempty"`
	BuyerCountyID    null.Int    `boil:"buyer_county_id" json:"buyer_county_id,omitempty" toml:"buyer_county_id" yaml:"buyer_county_id,omitempty"`
	BuyerMuniID      null.Int    `boil:"buyer_muni_id" json:"buyer_muni_id,omitempty" toml:"buyer_muni_id" yaml:"buyer_muni_id,omitempty"`
	SellerName       string      `boil:"seller_name" json:"seller_name" toml:"seller_name" yaml:"seller_name"`
	SellerStreet     string      `boil:"seller_street" json:"seller_street" toml:"seller_street" yaml:"seller_street"`
	SellerSuite      null.String `boil:"seller_suite" json:"seller_suite,omitempty" toml:"seller_suite" yaml:"seller_suite,omitempty"`
	SellerPostal     string      `boil:"seller_postal" json:"seller_postal" toml:"seller_postal" yaml:"seller_postal"`
	SellerStateID    null.String `boil:"seller_state_id" json:"seller_state_id,omitempty" toml:"seller_state_id" yaml:"seller_state_id,omitempty"`
	SellerCountyID   null.Int    `boil:"seller_county_id" json:"seller_county_id,omitempty" toml:"seller_county_id" yaml:"seller_county_id,omitempty"`
	SellerMuniD      null.Int    `boil:"seller_muni_d" json:"seller_muni_d,omitempty" toml:"seller_muni_d" yaml:"seller_muni_d,omitempty"`

	R *taxExemptionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L taxExemptionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TaxExemptionColumns = struct {
	ID               string
	SalesorderID     string
	AuthCertID       string
	RegistrationDate string
	BuyerName        string
	BuyerStreet      string
	BuyerSuite       string
	BuyerPostal      string
	BuyerStateID     string
	BuyerCountyID    string
	BuyerMuniID      string
	SellerName       string
	SellerStreet     string
	SellerSuite      string
	SellerPostal     string
	SellerStateID    string
	SellerCountyID   string
	SellerMuniD      string
}{
	ID:               "id",
	SalesorderID:     "salesorder_id",
	AuthCertID:       "auth_cert_id",
	RegistrationDate: "registration_date",
	BuyerName:        "buyer_name",
	BuyerStreet:      "buyer_street",
	BuyerSuite:       "buyer_suite",
	BuyerPostal:      "buyer_postal",
	BuyerStateID:     "buyer_state_id",
	BuyerCountyID:    "buyer_county_id",
	BuyerMuniID:      "buyer_muni_id",
	SellerName:       "seller_name",
	SellerStreet:     "seller_street",
	SellerSuite:      "seller_suite",
	SellerPostal:     "seller_postal",
	SellerStateID:    "seller_state_id",
	SellerCountyID:   "seller_county_id",
	SellerMuniD:      "seller_muni_d",
}

var TaxExemptionTableColumns = struct {
	ID               string
	SalesorderID     string
	AuthCertID       string
	RegistrationDate string
	BuyerName        string
	BuyerStreet      string
	BuyerSuite       string
	BuyerPostal      string
	BuyerStateID     string
	BuyerCountyID    string
	BuyerMuniID      string
	SellerName       string
	SellerStreet     string
	SellerSuite      string
	SellerPostal     string
	SellerStateID    string
	SellerCountyID   string
	SellerMuniD      string
}{
	ID:               "tax_exemptions.id",
	SalesorderID:     "tax_exemptions.salesorder_id",
	AuthCertID:       "tax_exemptions.auth_cert_id",
	RegistrationDate: "tax_exemptions.registration_date",
	BuyerName:        "tax_exemptions.buyer_name",
	BuyerStreet:      "tax_exemptions.buyer_street",
	BuyerSuite:       "tax_exemptions.buyer_suite",
	BuyerPostal:      "tax_exemptions.buyer_postal",
	BuyerStateID:     "tax_exemptions.buyer_state_id",
	BuyerCountyID:    "tax_exemptions.buyer_county_id",
	BuyerMuniID:      "tax_exemptions.buyer_muni_id",
	SellerName:       "tax_exemptions.seller_name",
	SellerStreet:     "tax_exemptions.seller_street",
	SellerSuite:      "tax_exemptions.seller_suite",
	SellerPostal:     "tax_exemptions.seller_postal",
	SellerStateID:    "tax_exemptions.seller_state_id",
	SellerCountyID:   "tax_exemptions.seller_county_id",
	SellerMuniD:      "tax_exemptions.seller_muni_d",
}

// Generated where

var TaxExemptionWhere = struct {
	ID               whereHelperint
	SalesorderID     whereHelpernull_Int
	AuthCertID       whereHelpernull_Int
	RegistrationDate whereHelpertime_Time
	BuyerName        whereHelperstring
	BuyerStreet      whereHelperstring
	BuyerSuite       whereHelpernull_String
	BuyerPostal      whereHelperstring
	BuyerStateID     whereHelpernull_String
	BuyerCountyID    whereHelpernull_Int
	BuyerMuniID      whereHelpernull_Int
	SellerName       whereHelperstring
	SellerStreet     whereHelperstring
	SellerSuite      whereHelpernull_String
	SellerPostal     whereHelperstring
	SellerStateID    whereHelpernull_String
	SellerCountyID   whereHelpernull_Int
	SellerMuniD      whereHelpernull_Int
}{
	ID:               whereHelperint{field: "\"alpha\".\"tax_exemptions\".\"id\""},
	SalesorderID:     whereHelpernull_Int{field: "\"alpha\".\"tax_exemptions\".\"salesorder_id\""},
	AuthCertID:       whereHelpernull_Int{field: "\"alpha\".\"tax_exemptions\".\"auth_cert_id\""},
	RegistrationDate: whereHelpertime_Time{field: "\"alpha\".\"tax_exemptions\".\"registration_date\""},
	BuyerName:        whereHelperstring{field: "\"alpha\".\"tax_exemptions\".\"buyer_name\""},
	BuyerStreet:      whereHelperstring{field: "\"alpha\".\"tax_exemptions\".\"buyer_street\""},
	BuyerSuite:       whereHelpernull_String{field: "\"alpha\".\"tax_exemptions\".\"buyer_suite\""},
	BuyerPostal:      whereHelperstring{field: "\"alpha\".\"tax_exemptions\".\"buyer_postal\""},
	BuyerStateID:     whereHelpernull_String{field: "\"alpha\".\"tax_exemptions\".\"buyer_state_id\""},
	BuyerCountyID:    whereHelpernull_Int{field: "\"alpha\".\"tax_exemptions\".\"buyer_county_id\""},
	BuyerMuniID:      whereHelpernull_Int{field: "\"alpha\".\"tax_exemptions\".\"buyer_muni_id\""},
	SellerName:       whereHelperstring{field: "\"alpha\".\"tax_exemptions\".\"seller_name\""},
	SellerStreet:     whereHelperstring{field: "\"alpha\".\"tax_exemptions\".\"seller_street\""},
	SellerSuite:      whereHelpernull_String{field: "\"alpha\".\"tax_exemptions\".\"seller_suite\""},
	SellerPostal:     whereHelperstring{field: "\"alpha\".\"tax_exemptions\".\"seller_postal\""},
	SellerStateID:    whereHelpernull_String{field: "\"alpha\".\"tax_exemptions\".\"seller_state_id\""},
	SellerCountyID:   whereHelpernull_Int{field: "\"alpha\".\"tax_exemptions\".\"seller_county_id\""},
	SellerMuniD:      whereHelpernull_Int{field: "\"alpha\".\"tax_exemptions\".\"seller_muni_d\""},
}

// TaxExemptionRels is where relationship names are stored.
var TaxExemptionRels = struct {
	AuthCert        string
	BuyerCounty     string
	BuyerMuni       string
	BuyerState      string
	Salesorder      string
	SellerCounty    string
	SellerMuniDMuni string
	SellerState     string
}{
	AuthCert:        "AuthCert",
	BuyerCounty:     "BuyerCounty",
	BuyerMuni:       "BuyerMuni",
	BuyerState:      "BuyerState",
	Salesorder:      "Salesorder",
	SellerCounty:    "SellerCounty",
	SellerMuniDMuni: "SellerMuniDMuni",
	SellerState:     "SellerState",
}

// taxExemptionR is where relationships are stored.
type taxExemptionR struct {
	AuthCert        *CertOfAuthority `boil:"AuthCert" json:"AuthCert" toml:"AuthCert" yaml:"AuthCert"`
	BuyerCounty     *County          `boil:"BuyerCounty" json:"BuyerCounty" toml:"BuyerCounty" yaml:"BuyerCounty"`
	BuyerMuni       *Muni            `boil:"BuyerMuni" json:"BuyerMuni" toml:"BuyerMuni" yaml:"BuyerMuni"`
	BuyerState      *State           `boil:"BuyerState" json:"BuyerState" toml:"BuyerState" yaml:"BuyerState"`
	Salesorder      *Salesorder      `boil:"Salesorder" json:"Salesorder" toml:"Salesorder" yaml:"Salesorder"`
	SellerCounty    *County          `boil:"SellerCounty" json:"SellerCounty" toml:"SellerCounty" yaml:"SellerCounty"`
	SellerMuniDMuni *Muni            `boil:"SellerMuniDMuni" json:"SellerMuniDMuni" toml:"SellerMuniDMuni" yaml:"SellerMuniDMuni"`
	SellerState     *State           `boil:"SellerState" json:"SellerState" toml:"SellerState" yaml:"SellerState"`
}

// NewStruct creates a new relationship struct
func (*taxExemptionR) NewStruct() *taxExemptionR {
	return &taxExemptionR{}
}

func (r *taxExemptionR) GetAuthCert() *CertOfAuthority {
	if r == nil {
		return nil
	}
	return r.AuthCert
}

func (r *taxExemptionR) GetBuyerCounty() *County {
	if r == nil {
		return nil
	}
	return r.BuyerCounty
}

func (r *taxExemptionR) GetBuyerMuni() *Muni {
	if r == nil {
		return nil
	}
	return r.BuyerMuni
}

func (r *taxExemptionR) GetBuyerState() *State {
	if r == nil {
		return nil
	}
	return r.BuyerState
}

func (r *taxExemptionR) GetSalesorder() *Salesorder {
	if r == nil {
		return nil
	}
	return r.Salesorder
}

func (r *taxExemptionR) GetSellerCounty() *County {
	if r == nil {
		return nil
	}
	return r.SellerCounty
}

func (r *taxExemptionR) GetSellerMuniDMuni() *Muni {
	if r == nil {
		return nil
	}
	return r.SellerMuniDMuni
}

func (r *taxExemptionR) GetSellerState() *State {
	if r == nil {
		return nil
	}
	return r.SellerState
}

// taxExemptionL is where Load methods for each relationship are stored.
type taxExemptionL struct{}

var (
	taxExemptionAllColumns            = []string{"id", "salesorder_id", "auth_cert_id", "registration_date", "buyer_name", "buyer_street", "buyer_suite", "buyer_postal", "buyer_state_id", "buyer_county_id", "buyer_muni_id", "seller_name", "seller_street", "seller_suite", "seller_postal", "seller_state_id", "seller_county_id", "seller_muni_d"}
	taxExemptionColumnsWithoutDefault = []string{"registration_date", "buyer_name", "buyer_street", "buyer_postal", "seller_name", "seller_street", "seller_postal"}
	taxExemptionColumnsWithDefault    = []string{"id", "salesorder_id", "auth_cert_id", "buyer_suite", "buyer_state_id", "buyer_county_id", "buyer_muni_id", "seller_suite", "seller_state_id", "seller_county_id", "seller_muni_d"}
	taxExemptionPrimaryKeyColumns     = []string{"id"}
	taxExemptionGeneratedColumns      = []string{"id"}
)

type (
	// TaxExemptionSlice is an alias for a slice of pointers to TaxExemption.
	// This should almost always be used instead of []TaxExemption.
	TaxExemptionSlice []*TaxExemption

	taxExemptionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	taxExemptionType                 = reflect.TypeOf(&TaxExemption{})
	taxExemptionMapping              = queries.MakeStructMapping(taxExemptionType)
	taxExemptionPrimaryKeyMapping, _ = queries.BindMapping(taxExemptionType, taxExemptionMapping, taxExemptionPrimaryKeyColumns)
	taxExemptionInsertCacheMut       sync.RWMutex
	taxExemptionInsertCache          = make(map[string]insertCache)
	taxExemptionUpdateCacheMut       sync.RWMutex
	taxExemptionUpdateCache          = make(map[string]updateCache)
	taxExemptionUpsertCacheMut       sync.RWMutex
	taxExemptionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single taxExemption record from the query using the global executor.
func (q taxExemptionQuery) OneG(ctx context.Context) (*TaxExemption, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single taxExemption record from the query.
func (q taxExemptionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TaxExemption, error) {
	o := &TaxExemption{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tax_exemptions")
	}

	return o, nil
}

// AllG returns all TaxExemption records from the query using the global executor.
func (q taxExemptionQuery) AllG(ctx context.Context) (TaxExemptionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TaxExemption records from the query.
func (q taxExemptionQuery) All(ctx context.Context, exec boil.ContextExecutor) (TaxExemptionSlice, error) {
	var o []*TaxExemption

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TaxExemption slice")
	}

	return o, nil
}

// CountG returns the count of all TaxExemption records in the query using the global executor
func (q taxExemptionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TaxExemption records in the query.
func (q taxExemptionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tax_exemptions rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q taxExemptionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q taxExemptionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tax_exemptions exists")
	}

	return count > 0, nil
}

// AuthCert pointed to by the foreign key.
func (o *TaxExemption) AuthCert(mods ...qm.QueryMod) certOfAuthorityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AuthCertID),
	}

	queryMods = append(queryMods, mods...)

	return CertOfAuthorities(queryMods...)
}

// BuyerCounty pointed to by the foreign key.
func (o *TaxExemption) BuyerCounty(mods ...qm.QueryMod) countyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BuyerCountyID),
	}

	queryMods = append(queryMods, mods...)

	return Counties(queryMods...)
}

// BuyerMuni pointed to by the foreign key.
func (o *TaxExemption) BuyerMuni(mods ...qm.QueryMod) muniQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BuyerMuniID),
	}

	queryMods = append(queryMods, mods...)

	return Munis(queryMods...)
}

// BuyerState pointed to by the foreign key.
func (o *TaxExemption) BuyerState(mods ...qm.QueryMod) stateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BuyerStateID),
	}

	queryMods = append(queryMods, mods...)

	return States(queryMods...)
}

// Salesorder pointed to by the foreign key.
func (o *TaxExemption) Salesorder(mods ...qm.QueryMod) salesorderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SalesorderID),
	}

	queryMods = append(queryMods, mods...)

	return Salesorders(queryMods...)
}

// SellerCounty pointed to by the foreign key.
func (o *TaxExemption) SellerCounty(mods ...qm.QueryMod) countyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SellerCountyID),
	}

	queryMods = append(queryMods, mods...)

	return Counties(queryMods...)
}

// SellerMuniDMuni pointed to by the foreign key.
func (o *TaxExemption) SellerMuniDMuni(mods ...qm.QueryMod) muniQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SellerMuniD),
	}

	queryMods = append(queryMods, mods...)

	return Munis(queryMods...)
}

// SellerState pointed to by the foreign key.
func (o *TaxExemption) SellerState(mods ...qm.QueryMod) stateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SellerStateID),
	}

	queryMods = append(queryMods, mods...)

	return States(queryMods...)
}

// LoadAuthCert allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (taxExemptionL) LoadAuthCert(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTaxExemption interface{}, mods queries.Applicator) error {
	var slice []*TaxExemption
	var object *TaxExemption

	if singular {
		var ok bool
		object, ok = maybeTaxExemption.(*TaxExemption)
		if !ok {
			object = new(TaxExemption)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTaxExemption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTaxExemption))
			}
		}
	} else {
		s, ok := maybeTaxExemption.(*[]*TaxExemption)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTaxExemption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTaxExemption))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &taxExemptionR{}
		}
		if !queries.IsNil(object.AuthCertID) {
			args = append(args, object.AuthCertID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taxExemptionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AuthCertID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AuthCertID) {
				args = append(args, obj.AuthCertID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.cert_of_authority`),
		qm.WhereIn(`alpha.cert_of_authority.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CertOfAuthority")
	}

	var resultSlice []*CertOfAuthority
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CertOfAuthority")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cert_of_authority")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cert_of_authority")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AuthCert = foreign
		if foreign.R == nil {
			foreign.R = &certOfAuthorityR{}
		}
		foreign.R.AuthCertTaxExemptions = append(foreign.R.AuthCertTaxExemptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AuthCertID, foreign.ID) {
				local.R.AuthCert = foreign
				if foreign.R == nil {
					foreign.R = &certOfAuthorityR{}
				}
				foreign.R.AuthCertTaxExemptions = append(foreign.R.AuthCertTaxExemptions, local)
				break
			}
		}
	}

	return nil
}

// LoadBuyerCounty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (taxExemptionL) LoadBuyerCounty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTaxExemption interface{}, mods queries.Applicator) error {
	var slice []*TaxExemption
	var object *TaxExemption

	if singular {
		var ok bool
		object, ok = maybeTaxExemption.(*TaxExemption)
		if !ok {
			object = new(TaxExemption)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTaxExemption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTaxExemption))
			}
		}
	} else {
		s, ok := maybeTaxExemption.(*[]*TaxExemption)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTaxExemption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTaxExemption))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &taxExemptionR{}
		}
		if !queries.IsNil(object.BuyerCountyID) {
			args = append(args, object.BuyerCountyID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taxExemptionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BuyerCountyID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BuyerCountyID) {
				args = append(args, obj.BuyerCountyID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.county`),
		qm.WhereIn(`alpha.county.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load County")
	}

	var resultSlice []*County
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice County")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for county")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for county")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerCounty = foreign
		if foreign.R == nil {
			foreign.R = &countyR{}
		}
		foreign.R.BuyerCountyTaxExemptions = append(foreign.R.BuyerCountyTaxExemptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BuyerCountyID, foreign.ID) {
				local.R.BuyerCounty = foreign
				if foreign.R == nil {
					foreign.R = &countyR{}
				}
				foreign.R.BuyerCountyTaxExemptions = append(foreign.R.BuyerCountyTaxExemptions, local)
				break
			}
		}
	}

	return nil
}

// LoadBuyerMuni allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (taxExemptionL) LoadBuyerMuni(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTaxExemption interface{}, mods queries.Applicator) error {
	var slice []*TaxExemption
	var object *TaxExemption

	if singular {
		var ok bool
		object, ok = maybeTaxExemption.(*TaxExemption)
		if !ok {
			object = new(TaxExemption)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTaxExemption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTaxExemption))
			}
		}
	} else {
		s, ok := maybeTaxExemption.(*[]*TaxExemption)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTaxExemption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTaxExemption))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &taxExemptionR{}
		}
		if !queries.IsNil(object.BuyerMuniID) {
			args = append(args, object.BuyerMuniID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taxExemptionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BuyerMuniID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BuyerMuniID) {
				args = append(args, obj.BuyerMuniID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.muni`),
		qm.WhereIn(`alpha.muni.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Muni")
	}

	var resultSlice []*Muni
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Muni")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for muni")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for muni")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerMuni = foreign
		if foreign.R == nil {
			foreign.R = &muniR{}
		}
		foreign.R.BuyerMuniTaxExemptions = append(foreign.R.BuyerMuniTaxExemptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BuyerMuniID, foreign.ID) {
				local.R.BuyerMuni = foreign
				if foreign.R == nil {
					foreign.R = &muniR{}
				}
				foreign.R.BuyerMuniTaxExemptions = append(foreign.R.BuyerMuniTaxExemptions, local)
				break
			}
		}
	}

	return nil
}

// LoadBuyerState allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (taxExemptionL) LoadBuyerState(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTaxExemption interface{}, mods queries.Applicator) error {
	var slice []*TaxExemption
	var object *TaxExemption

	if singular {
		var ok bool
		object, ok = maybeTaxExemption.(*TaxExemption)
		if !ok {
			object = new(TaxExemption)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTaxExemption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTaxExemption))
			}
		}
	} else {
		s, ok := maybeTaxExemption.(*[]*TaxExemption)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTaxExemption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTaxExemption))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &taxExemptionR{}
		}
		if !queries.IsNil(object.BuyerStateID) {
			args = append(args, object.BuyerStateID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taxExemptionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BuyerStateID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BuyerStateID) {
				args = append(args, obj.BuyerStateID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.state`),
		qm.WhereIn(`alpha.state.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load State")
	}

	var resultSlice []*State
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice State")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for state")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for state")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerState = foreign
		if foreign.R == nil {
			foreign.R = &stateR{}
		}
		foreign.R.BuyerStateTaxExemptions = append(foreign.R.BuyerStateTaxExemptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BuyerStateID, foreign.ID) {
				local.R.BuyerState = foreign
				if foreign.R == nil {
					foreign.R = &stateR{}
				}
				foreign.R.BuyerStateTaxExemptions = append(foreign.R.BuyerStateTaxExemptions, local)
				break
			}
		}
	}

	return nil
}

// LoadSalesorder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (taxExemptionL) LoadSalesorder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTaxExemption interface{}, mods queries.Applicator) error {
	var slice []*TaxExemption
	var object *TaxExemption

	if singular {
		var ok bool
		object, ok = maybeTaxExemption.(*TaxExemption)
		if !ok {
			object = new(TaxExemption)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTaxExemption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTaxExemption))
			}
		}
	} else {
		s, ok := maybeTaxExemption.(*[]*TaxExemption)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTaxExemption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTaxExemption))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &taxExemptionR{}
		}
		if !queries.IsNil(object.SalesorderID) {
			args = append(args, object.SalesorderID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taxExemptionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SalesorderID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SalesorderID) {
				args = append(args, obj.SalesorderID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.salesorders`),
		qm.WhereIn(`alpha.salesorders.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Salesorder")
	}

	var resultSlice []*Salesorder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Salesorder")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for salesorders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for salesorders")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Salesorder = foreign
		if foreign.R == nil {
			foreign.R = &salesorderR{}
		}
		foreign.R.TaxExemptions = append(foreign.R.TaxExemptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SalesorderID, foreign.ID) {
				local.R.Salesorder = foreign
				if foreign.R == nil {
					foreign.R = &salesorderR{}
				}
				foreign.R.TaxExemptions = append(foreign.R.TaxExemptions, local)
				break
			}
		}
	}

	return nil
}

// LoadSellerCounty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (taxExemptionL) LoadSellerCounty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTaxExemption interface{}, mods queries.Applicator) error {
	var slice []*TaxExemption
	var object *TaxExemption

	if singular {
		var ok bool
		object, ok = maybeTaxExemption.(*TaxExemption)
		if !ok {
			object = new(TaxExemption)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTaxExemption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTaxExemption))
			}
		}
	} else {
		s, ok := maybeTaxExemption.(*[]*TaxExemption)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTaxExemption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTaxExemption))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &taxExemptionR{}
		}
		if !queries.IsNil(object.SellerCountyID) {
			args = append(args, object.SellerCountyID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taxExemptionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SellerCountyID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SellerCountyID) {
				args = append(args, obj.SellerCountyID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.county`),
		qm.WhereIn(`alpha.county.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load County")
	}

	var resultSlice []*County
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice County")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for county")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for county")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SellerCounty = foreign
		if foreign.R == nil {
			foreign.R = &countyR{}
		}
		foreign.R.SellerCountyTaxExemptions = append(foreign.R.SellerCountyTaxExemptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SellerCountyID, foreign.ID) {
				local.R.SellerCounty = foreign
				if foreign.R == nil {
					foreign.R = &countyR{}
				}
				foreign.R.SellerCountyTaxExemptions = append(foreign.R.SellerCountyTaxExemptions, local)
				break
			}
		}
	}

	return nil
}

// LoadSellerMuniDMuni allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (taxExemptionL) LoadSellerMuniDMuni(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTaxExemption interface{}, mods queries.Applicator) error {
	var slice []*TaxExemption
	var object *TaxExemption

	if singular {
		var ok bool
		object, ok = maybeTaxExemption.(*TaxExemption)
		if !ok {
			object = new(TaxExemption)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTaxExemption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTaxExemption))
			}
		}
	} else {
		s, ok := maybeTaxExemption.(*[]*TaxExemption)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTaxExemption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTaxExemption))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &taxExemptionR{}
		}
		if !queries.IsNil(object.SellerMuniD) {
			args = append(args, object.SellerMuniD)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taxExemptionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SellerMuniD) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SellerMuniD) {
				args = append(args, obj.SellerMuniD)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.muni`),
		qm.WhereIn(`alpha.muni.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Muni")
	}

	var resultSlice []*Muni
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Muni")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for muni")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for muni")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SellerMuniDMuni = foreign
		if foreign.R == nil {
			foreign.R = &muniR{}
		}
		foreign.R.SellerMuniDTaxExemptions = append(foreign.R.SellerMuniDTaxExemptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SellerMuniD, foreign.ID) {
				local.R.SellerMuniDMuni = foreign
				if foreign.R == nil {
					foreign.R = &muniR{}
				}
				foreign.R.SellerMuniDTaxExemptions = append(foreign.R.SellerMuniDTaxExemptions, local)
				break
			}
		}
	}

	return nil
}

// LoadSellerState allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (taxExemptionL) LoadSellerState(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTaxExemption interface{}, mods queries.Applicator) error {
	var slice []*TaxExemption
	var object *TaxExemption

	if singular {
		var ok bool
		object, ok = maybeTaxExemption.(*TaxExemption)
		if !ok {
			object = new(TaxExemption)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTaxExemption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTaxExemption))
			}
		}
	} else {
		s, ok := maybeTaxExemption.(*[]*TaxExemption)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTaxExemption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTaxExemption))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &taxExemptionR{}
		}
		if !queries.IsNil(object.SellerStateID) {
			args = append(args, object.SellerStateID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taxExemptionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SellerStateID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SellerStateID) {
				args = append(args, obj.SellerStateID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.state`),
		qm.WhereIn(`alpha.state.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load State")
	}

	var resultSlice []*State
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice State")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for state")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for state")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SellerState = foreign
		if foreign.R == nil {
			foreign.R = &stateR{}
		}
		foreign.R.SellerStateTaxExemptions = append(foreign.R.SellerStateTaxExemptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SellerStateID, foreign.ID) {
				local.R.SellerState = foreign
				if foreign.R == nil {
					foreign.R = &stateR{}
				}
				foreign.R.SellerStateTaxExemptions = append(foreign.R.SellerStateTaxExemptions, local)
				break
			}
		}
	}

	return nil
}

// SetAuthCertG of the taxExemption to the related item.
// Sets o.R.AuthCert to related.
// Adds o to related.R.AuthCertTaxExemptions.
// Uses the global database handle.
func (o *TaxExemption) SetAuthCertG(ctx context.Context, insert bool, related *CertOfAuthority) error {
	return o.SetAuthCert(ctx, boil.GetContextDB(), insert, related)
}

// SetAuthCert of the taxExemption to the related item.
// Sets o.R.AuthCert to related.
// Adds o to related.R.AuthCertTaxExemptions.
func (o *TaxExemption) SetAuthCert(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CertOfAuthority) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"tax_exemptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"auth_cert_id"}),
		strmangle.WhereClause("\"", "\"", 2, taxExemptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AuthCertID, related.ID)
	if o.R == nil {
		o.R = &taxExemptionR{
			AuthCert: related,
		}
	} else {
		o.R.AuthCert = related
	}

	if related.R == nil {
		related.R = &certOfAuthorityR{
			AuthCertTaxExemptions: TaxExemptionSlice{o},
		}
	} else {
		related.R.AuthCertTaxExemptions = append(related.R.AuthCertTaxExemptions, o)
	}

	return nil
}

// RemoveAuthCertG relationship.
// Sets o.R.AuthCert to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *TaxExemption) RemoveAuthCertG(ctx context.Context, related *CertOfAuthority) error {
	return o.RemoveAuthCert(ctx, boil.GetContextDB(), related)
}

// RemoveAuthCert relationship.
// Sets o.R.AuthCert to nil.
// Removes o from all passed in related items' relationships struct.
func (o *TaxExemption) RemoveAuthCert(ctx context.Context, exec boil.ContextExecutor, related *CertOfAuthority) error {
	var err error

	queries.SetScanner(&o.AuthCertID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("auth_cert_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AuthCert = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AuthCertTaxExemptions {
		if queries.Equal(o.AuthCertID, ri.AuthCertID) {
			continue
		}

		ln := len(related.R.AuthCertTaxExemptions)
		if ln > 1 && i < ln-1 {
			related.R.AuthCertTaxExemptions[i] = related.R.AuthCertTaxExemptions[ln-1]
		}
		related.R.AuthCertTaxExemptions = related.R.AuthCertTaxExemptions[:ln-1]
		break
	}
	return nil
}

// SetBuyerCountyG of the taxExemption to the related item.
// Sets o.R.BuyerCounty to related.
// Adds o to related.R.BuyerCountyTaxExemptions.
// Uses the global database handle.
func (o *TaxExemption) SetBuyerCountyG(ctx context.Context, insert bool, related *County) error {
	return o.SetBuyerCounty(ctx, boil.GetContextDB(), insert, related)
}

// SetBuyerCounty of the taxExemption to the related item.
// Sets o.R.BuyerCounty to related.
// Adds o to related.R.BuyerCountyTaxExemptions.
func (o *TaxExemption) SetBuyerCounty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *County) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"tax_exemptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"buyer_county_id"}),
		strmangle.WhereClause("\"", "\"", 2, taxExemptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BuyerCountyID, related.ID)
	if o.R == nil {
		o.R = &taxExemptionR{
			BuyerCounty: related,
		}
	} else {
		o.R.BuyerCounty = related
	}

	if related.R == nil {
		related.R = &countyR{
			BuyerCountyTaxExemptions: TaxExemptionSlice{o},
		}
	} else {
		related.R.BuyerCountyTaxExemptions = append(related.R.BuyerCountyTaxExemptions, o)
	}

	return nil
}

// RemoveBuyerCountyG relationship.
// Sets o.R.BuyerCounty to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *TaxExemption) RemoveBuyerCountyG(ctx context.Context, related *County) error {
	return o.RemoveBuyerCounty(ctx, boil.GetContextDB(), related)
}

// RemoveBuyerCounty relationship.
// Sets o.R.BuyerCounty to nil.
// Removes o from all passed in related items' relationships struct.
func (o *TaxExemption) RemoveBuyerCounty(ctx context.Context, exec boil.ContextExecutor, related *County) error {
	var err error

	queries.SetScanner(&o.BuyerCountyID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("buyer_county_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BuyerCounty = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BuyerCountyTaxExemptions {
		if queries.Equal(o.BuyerCountyID, ri.BuyerCountyID) {
			continue
		}

		ln := len(related.R.BuyerCountyTaxExemptions)
		if ln > 1 && i < ln-1 {
			related.R.BuyerCountyTaxExemptions[i] = related.R.BuyerCountyTaxExemptions[ln-1]
		}
		related.R.BuyerCountyTaxExemptions = related.R.BuyerCountyTaxExemptions[:ln-1]
		break
	}
	return nil
}

// SetBuyerMuniG of the taxExemption to the related item.
// Sets o.R.BuyerMuni to related.
// Adds o to related.R.BuyerMuniTaxExemptions.
// Uses the global database handle.
func (o *TaxExemption) SetBuyerMuniG(ctx context.Context, insert bool, related *Muni) error {
	return o.SetBuyerMuni(ctx, boil.GetContextDB(), insert, related)
}

// SetBuyerMuni of the taxExemption to the related item.
// Sets o.R.BuyerMuni to related.
// Adds o to related.R.BuyerMuniTaxExemptions.
func (o *TaxExemption) SetBuyerMuni(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Muni) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"tax_exemptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"buyer_muni_id"}),
		strmangle.WhereClause("\"", "\"", 2, taxExemptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BuyerMuniID, related.ID)
	if o.R == nil {
		o.R = &taxExemptionR{
			BuyerMuni: related,
		}
	} else {
		o.R.BuyerMuni = related
	}

	if related.R == nil {
		related.R = &muniR{
			BuyerMuniTaxExemptions: TaxExemptionSlice{o},
		}
	} else {
		related.R.BuyerMuniTaxExemptions = append(related.R.BuyerMuniTaxExemptions, o)
	}

	return nil
}

// RemoveBuyerMuniG relationship.
// Sets o.R.BuyerMuni to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *TaxExemption) RemoveBuyerMuniG(ctx context.Context, related *Muni) error {
	return o.RemoveBuyerMuni(ctx, boil.GetContextDB(), related)
}

// RemoveBuyerMuni relationship.
// Sets o.R.BuyerMuni to nil.
// Removes o from all passed in related items' relationships struct.
func (o *TaxExemption) RemoveBuyerMuni(ctx context.Context, exec boil.ContextExecutor, related *Muni) error {
	var err error

	queries.SetScanner(&o.BuyerMuniID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("buyer_muni_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BuyerMuni = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BuyerMuniTaxExemptions {
		if queries.Equal(o.BuyerMuniID, ri.BuyerMuniID) {
			continue
		}

		ln := len(related.R.BuyerMuniTaxExemptions)
		if ln > 1 && i < ln-1 {
			related.R.BuyerMuniTaxExemptions[i] = related.R.BuyerMuniTaxExemptions[ln-1]
		}
		related.R.BuyerMuniTaxExemptions = related.R.BuyerMuniTaxExemptions[:ln-1]
		break
	}
	return nil
}

// SetBuyerStateG of the taxExemption to the related item.
// Sets o.R.BuyerState to related.
// Adds o to related.R.BuyerStateTaxExemptions.
// Uses the global database handle.
func (o *TaxExemption) SetBuyerStateG(ctx context.Context, insert bool, related *State) error {
	return o.SetBuyerState(ctx, boil.GetContextDB(), insert, related)
}

// SetBuyerState of the taxExemption to the related item.
// Sets o.R.BuyerState to related.
// Adds o to related.R.BuyerStateTaxExemptions.
func (o *TaxExemption) SetBuyerState(ctx context.Context, exec boil.ContextExecutor, insert bool, related *State) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"tax_exemptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"buyer_state_id"}),
		strmangle.WhereClause("\"", "\"", 2, taxExemptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BuyerStateID, related.ID)
	if o.R == nil {
		o.R = &taxExemptionR{
			BuyerState: related,
		}
	} else {
		o.R.BuyerState = related
	}

	if related.R == nil {
		related.R = &stateR{
			BuyerStateTaxExemptions: TaxExemptionSlice{o},
		}
	} else {
		related.R.BuyerStateTaxExemptions = append(related.R.BuyerStateTaxExemptions, o)
	}

	return nil
}

// RemoveBuyerStateG relationship.
// Sets o.R.BuyerState to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *TaxExemption) RemoveBuyerStateG(ctx context.Context, related *State) error {
	return o.RemoveBuyerState(ctx, boil.GetContextDB(), related)
}

// RemoveBuyerState relationship.
// Sets o.R.BuyerState to nil.
// Removes o from all passed in related items' relationships struct.
func (o *TaxExemption) RemoveBuyerState(ctx context.Context, exec boil.ContextExecutor, related *State) error {
	var err error

	queries.SetScanner(&o.BuyerStateID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("buyer_state_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BuyerState = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BuyerStateTaxExemptions {
		if queries.Equal(o.BuyerStateID, ri.BuyerStateID) {
			continue
		}

		ln := len(related.R.BuyerStateTaxExemptions)
		if ln > 1 && i < ln-1 {
			related.R.BuyerStateTaxExemptions[i] = related.R.BuyerStateTaxExemptions[ln-1]
		}
		related.R.BuyerStateTaxExemptions = related.R.BuyerStateTaxExemptions[:ln-1]
		break
	}
	return nil
}

// SetSalesorderG of the taxExemption to the related item.
// Sets o.R.Salesorder to related.
// Adds o to related.R.TaxExemptions.
// Uses the global database handle.
func (o *TaxExemption) SetSalesorderG(ctx context.Context, insert bool, related *Salesorder) error {
	return o.SetSalesorder(ctx, boil.GetContextDB(), insert, related)
}

// SetSalesorder of the taxExemption to the related item.
// Sets o.R.Salesorder to related.
// Adds o to related.R.TaxExemptions.
func (o *TaxExemption) SetSalesorder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Salesorder) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"tax_exemptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"salesorder_id"}),
		strmangle.WhereClause("\"", "\"", 2, taxExemptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SalesorderID, related.ID)
	if o.R == nil {
		o.R = &taxExemptionR{
			Salesorder: related,
		}
	} else {
		o.R.Salesorder = related
	}

	if related.R == nil {
		related.R = &salesorderR{
			TaxExemptions: TaxExemptionSlice{o},
		}
	} else {
		related.R.TaxExemptions = append(related.R.TaxExemptions, o)
	}

	return nil
}

// RemoveSalesorderG relationship.
// Sets o.R.Salesorder to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *TaxExemption) RemoveSalesorderG(ctx context.Context, related *Salesorder) error {
	return o.RemoveSalesorder(ctx, boil.GetContextDB(), related)
}

// RemoveSalesorder relationship.
// Sets o.R.Salesorder to nil.
// Removes o from all passed in related items' relationships struct.
func (o *TaxExemption) RemoveSalesorder(ctx context.Context, exec boil.ContextExecutor, related *Salesorder) error {
	var err error

	queries.SetScanner(&o.SalesorderID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("salesorder_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Salesorder = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TaxExemptions {
		if queries.Equal(o.SalesorderID, ri.SalesorderID) {
			continue
		}

		ln := len(related.R.TaxExemptions)
		if ln > 1 && i < ln-1 {
			related.R.TaxExemptions[i] = related.R.TaxExemptions[ln-1]
		}
		related.R.TaxExemptions = related.R.TaxExemptions[:ln-1]
		break
	}
	return nil
}

// SetSellerCountyG of the taxExemption to the related item.
// Sets o.R.SellerCounty to related.
// Adds o to related.R.SellerCountyTaxExemptions.
// Uses the global database handle.
func (o *TaxExemption) SetSellerCountyG(ctx context.Context, insert bool, related *County) error {
	return o.SetSellerCounty(ctx, boil.GetContextDB(), insert, related)
}

// SetSellerCounty of the taxExemption to the related item.
// Sets o.R.SellerCounty to related.
// Adds o to related.R.SellerCountyTaxExemptions.
func (o *TaxExemption) SetSellerCounty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *County) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"tax_exemptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"seller_county_id"}),
		strmangle.WhereClause("\"", "\"", 2, taxExemptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SellerCountyID, related.ID)
	if o.R == nil {
		o.R = &taxExemptionR{
			SellerCounty: related,
		}
	} else {
		o.R.SellerCounty = related
	}

	if related.R == nil {
		related.R = &countyR{
			SellerCountyTaxExemptions: TaxExemptionSlice{o},
		}
	} else {
		related.R.SellerCountyTaxExemptions = append(related.R.SellerCountyTaxExemptions, o)
	}

	return nil
}

// RemoveSellerCountyG relationship.
// Sets o.R.SellerCounty to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *TaxExemption) RemoveSellerCountyG(ctx context.Context, related *County) error {
	return o.RemoveSellerCounty(ctx, boil.GetContextDB(), related)
}

// RemoveSellerCounty relationship.
// Sets o.R.SellerCounty to nil.
// Removes o from all passed in related items' relationships struct.
func (o *TaxExemption) RemoveSellerCounty(ctx context.Context, exec boil.ContextExecutor, related *County) error {
	var err error

	queries.SetScanner(&o.SellerCountyID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("seller_county_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SellerCounty = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SellerCountyTaxExemptions {
		if queries.Equal(o.SellerCountyID, ri.SellerCountyID) {
			continue
		}

		ln := len(related.R.SellerCountyTaxExemptions)
		if ln > 1 && i < ln-1 {
			related.R.SellerCountyTaxExemptions[i] = related.R.SellerCountyTaxExemptions[ln-1]
		}
		related.R.SellerCountyTaxExemptions = related.R.SellerCountyTaxExemptions[:ln-1]
		break
	}
	return nil
}

// SetSellerMuniDMuniG of the taxExemption to the related item.
// Sets o.R.SellerMuniDMuni to related.
// Adds o to related.R.SellerMuniDTaxExemptions.
// Uses the global database handle.
func (o *TaxExemption) SetSellerMuniDMuniG(ctx context.Context, insert bool, related *Muni) error {
	return o.SetSellerMuniDMuni(ctx, boil.GetContextDB(), insert, related)
}

// SetSellerMuniDMuni of the taxExemption to the related item.
// Sets o.R.SellerMuniDMuni to related.
// Adds o to related.R.SellerMuniDTaxExemptions.
func (o *TaxExemption) SetSellerMuniDMuni(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Muni) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"tax_exemptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"seller_muni_d"}),
		strmangle.WhereClause("\"", "\"", 2, taxExemptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SellerMuniD, related.ID)
	if o.R == nil {
		o.R = &taxExemptionR{
			SellerMuniDMuni: related,
		}
	} else {
		o.R.SellerMuniDMuni = related
	}

	if related.R == nil {
		related.R = &muniR{
			SellerMuniDTaxExemptions: TaxExemptionSlice{o},
		}
	} else {
		related.R.SellerMuniDTaxExemptions = append(related.R.SellerMuniDTaxExemptions, o)
	}

	return nil
}

// RemoveSellerMuniDMuniG relationship.
// Sets o.R.SellerMuniDMuni to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *TaxExemption) RemoveSellerMuniDMuniG(ctx context.Context, related *Muni) error {
	return o.RemoveSellerMuniDMuni(ctx, boil.GetContextDB(), related)
}

// RemoveSellerMuniDMuni relationship.
// Sets o.R.SellerMuniDMuni to nil.
// Removes o from all passed in related items' relationships struct.
func (o *TaxExemption) RemoveSellerMuniDMuni(ctx context.Context, exec boil.ContextExecutor, related *Muni) error {
	var err error

	queries.SetScanner(&o.SellerMuniD, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("seller_muni_d")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SellerMuniDMuni = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SellerMuniDTaxExemptions {
		if queries.Equal(o.SellerMuniD, ri.SellerMuniD) {
			continue
		}

		ln := len(related.R.SellerMuniDTaxExemptions)
		if ln > 1 && i < ln-1 {
			related.R.SellerMuniDTaxExemptions[i] = related.R.SellerMuniDTaxExemptions[ln-1]
		}
		related.R.SellerMuniDTaxExemptions = related.R.SellerMuniDTaxExemptions[:ln-1]
		break
	}
	return nil
}

// SetSellerStateG of the taxExemption to the related item.
// Sets o.R.SellerState to related.
// Adds o to related.R.SellerStateTaxExemptions.
// Uses the global database handle.
func (o *TaxExemption) SetSellerStateG(ctx context.Context, insert bool, related *State) error {
	return o.SetSellerState(ctx, boil.GetContextDB(), insert, related)
}

// SetSellerState of the taxExemption to the related item.
// Sets o.R.SellerState to related.
// Adds o to related.R.SellerStateTaxExemptions.
func (o *TaxExemption) SetSellerState(ctx context.Context, exec boil.ContextExecutor, insert bool, related *State) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"tax_exemptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"seller_state_id"}),
		strmangle.WhereClause("\"", "\"", 2, taxExemptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SellerStateID, related.ID)
	if o.R == nil {
		o.R = &taxExemptionR{
			SellerState: related,
		}
	} else {
		o.R.SellerState = related
	}

	if related.R == nil {
		related.R = &stateR{
			SellerStateTaxExemptions: TaxExemptionSlice{o},
		}
	} else {
		related.R.SellerStateTaxExemptions = append(related.R.SellerStateTaxExemptions, o)
	}

	return nil
}

// RemoveSellerStateG relationship.
// Sets o.R.SellerState to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *TaxExemption) RemoveSellerStateG(ctx context.Context, related *State) error {
	return o.RemoveSellerState(ctx, boil.GetContextDB(), related)
}

// RemoveSellerState relationship.
// Sets o.R.SellerState to nil.
// Removes o from all passed in related items' relationships struct.
func (o *TaxExemption) RemoveSellerState(ctx context.Context, exec boil.ContextExecutor, related *State) error {
	var err error

	queries.SetScanner(&o.SellerStateID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("seller_state_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SellerState = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SellerStateTaxExemptions {
		if queries.Equal(o.SellerStateID, ri.SellerStateID) {
			continue
		}

		ln := len(related.R.SellerStateTaxExemptions)
		if ln > 1 && i < ln-1 {
			related.R.SellerStateTaxExemptions[i] = related.R.SellerStateTaxExemptions[ln-1]
		}
		related.R.SellerStateTaxExemptions = related.R.SellerStateTaxExemptions[:ln-1]
		break
	}
	return nil
}

// TaxExemptions retrieves all the records using an executor.
func TaxExemptions(mods ...qm.QueryMod) taxExemptionQuery {
	mods = append(mods, qm.From("\"alpha\".\"tax_exemptions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"tax_exemptions\".*"})
	}

	return taxExemptionQuery{q}
}

// FindTaxExemptionG retrieves a single record by ID.
func FindTaxExemptionG(ctx context.Context, iD int, selectCols ...string) (*TaxExemption, error) {
	return FindTaxExemption(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTaxExemption retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTaxExemption(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TaxExemption, error) {
	taxExemptionObj := &TaxExemption{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"tax_exemptions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, taxExemptionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tax_exemptions")
	}

	return taxExemptionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TaxExemption) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TaxExemption) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tax_exemptions provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(taxExemptionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	taxExemptionInsertCacheMut.RLock()
	cache, cached := taxExemptionInsertCache[key]
	taxExemptionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			taxExemptionAllColumns,
			taxExemptionColumnsWithDefault,
			taxExemptionColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, taxExemptionGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(taxExemptionType, taxExemptionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(taxExemptionType, taxExemptionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"tax_exemptions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"tax_exemptions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tax_exemptions")
	}

	if !cached {
		taxExemptionInsertCacheMut.Lock()
		taxExemptionInsertCache[key] = cache
		taxExemptionInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single TaxExemption record using the global executor.
// See Update for more documentation.
func (o *TaxExemption) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the TaxExemption.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TaxExemption) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	taxExemptionUpdateCacheMut.RLock()
	cache, cached := taxExemptionUpdateCache[key]
	taxExemptionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			taxExemptionAllColumns,
			taxExemptionPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, taxExemptionGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tax_exemptions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"tax_exemptions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, taxExemptionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(taxExemptionType, taxExemptionMapping, append(wl, taxExemptionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tax_exemptions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tax_exemptions")
	}

	if !cached {
		taxExemptionUpdateCacheMut.Lock()
		taxExemptionUpdateCache[key] = cache
		taxExemptionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q taxExemptionQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q taxExemptionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tax_exemptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tax_exemptions")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TaxExemptionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TaxExemptionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taxExemptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"tax_exemptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, taxExemptionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in taxExemption slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all taxExemption")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TaxExemption) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TaxExemption) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tax_exemptions provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(taxExemptionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	taxExemptionUpsertCacheMut.RLock()
	cache, cached := taxExemptionUpsertCache[key]
	taxExemptionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			taxExemptionAllColumns,
			taxExemptionColumnsWithDefault,
			taxExemptionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			taxExemptionAllColumns,
			taxExemptionPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, taxExemptionGeneratedColumns)
		update = strmangle.SetComplement(update, taxExemptionGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert tax_exemptions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(taxExemptionPrimaryKeyColumns))
			copy(conflict, taxExemptionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"tax_exemptions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(taxExemptionType, taxExemptionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(taxExemptionType, taxExemptionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert tax_exemptions")
	}

	if !cached {
		taxExemptionUpsertCacheMut.Lock()
		taxExemptionUpsertCache[key] = cache
		taxExemptionUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single TaxExemption record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TaxExemption) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single TaxExemption record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TaxExemption) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TaxExemption provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), taxExemptionPrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"tax_exemptions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tax_exemptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tax_exemptions")
	}

	return rowsAff, nil
}

func (q taxExemptionQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q taxExemptionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no taxExemptionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tax_exemptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tax_exemptions")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TaxExemptionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TaxExemptionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taxExemptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"tax_exemptions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, taxExemptionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from taxExemption slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tax_exemptions")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TaxExemption) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no TaxExemption provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TaxExemption) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTaxExemption(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TaxExemptionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty TaxExemptionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TaxExemptionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TaxExemptionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taxExemptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"tax_exemptions\".* FROM \"alpha\".\"tax_exemptions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, taxExemptionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TaxExemptionSlice")
	}

	*o = slice

	return nil
}

// TaxExemptionExistsG checks if the TaxExemption row exists.
func TaxExemptionExistsG(ctx context.Context, iD int) (bool, error) {
	return TaxExemptionExists(ctx, boil.GetContextDB(), iD)
}

// TaxExemptionExists checks if the TaxExemption row exists.
func TaxExemptionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"tax_exemptions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tax_exemptions exists")
	}

	return exists, nil
}
