// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CertOfAuthority is an object representing the database table.
type CertOfAuthority struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CompanyID int       `boil:"company_id" json:"company_id" toml:"company_id" yaml:"company_id"`
	Active    bool      `boil:"active" json:"active" toml:"active" yaml:"active"`
	StateID   string    `boil:"state_id" json:"state_id" toml:"state_id" yaml:"state_id"`
	Number    string    `boil:"number" json:"number" toml:"number" yaml:"number"`
	Since     time.Time `boil:"since" json:"since" toml:"since" yaml:"since"`
	Created   time.Time `boil:"created" json:"created" toml:"created" yaml:"created"`

	R *certOfAuthorityR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L certOfAuthorityL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CertOfAuthorityColumns = struct {
	ID        string
	CompanyID string
	Active    string
	StateID   string
	Number    string
	Since     string
	Created   string
}{
	ID:        "id",
	CompanyID: "company_id",
	Active:    "active",
	StateID:   "state_id",
	Number:    "number",
	Since:     "since",
	Created:   "created",
}

var CertOfAuthorityTableColumns = struct {
	ID        string
	CompanyID string
	Active    string
	StateID   string
	Number    string
	Since     string
	Created   string
}{
	ID:        "cert_of_authority.id",
	CompanyID: "cert_of_authority.company_id",
	Active:    "cert_of_authority.active",
	StateID:   "cert_of_authority.state_id",
	Number:    "cert_of_authority.number",
	Since:     "cert_of_authority.since",
	Created:   "cert_of_authority.created",
}

// Generated where

var CertOfAuthorityWhere = struct {
	ID        whereHelperint
	CompanyID whereHelperint
	Active    whereHelperbool
	StateID   whereHelperstring
	Number    whereHelperstring
	Since     whereHelpertime_Time
	Created   whereHelpertime_Time
}{
	ID:        whereHelperint{field: "\"alpha\".\"cert_of_authority\".\"id\""},
	CompanyID: whereHelperint{field: "\"alpha\".\"cert_of_authority\".\"company_id\""},
	Active:    whereHelperbool{field: "\"alpha\".\"cert_of_authority\".\"active\""},
	StateID:   whereHelperstring{field: "\"alpha\".\"cert_of_authority\".\"state_id\""},
	Number:    whereHelperstring{field: "\"alpha\".\"cert_of_authority\".\"number\""},
	Since:     whereHelpertime_Time{field: "\"alpha\".\"cert_of_authority\".\"since\""},
	Created:   whereHelpertime_Time{field: "\"alpha\".\"cert_of_authority\".\"created\""},
}

// CertOfAuthorityRels is where relationship names are stored.
var CertOfAuthorityRels = struct {
	Company               string
	State                 string
	AuthCertTaxExemptions string
}{
	Company:               "Company",
	State:                 "State",
	AuthCertTaxExemptions: "AuthCertTaxExemptions",
}

// certOfAuthorityR is where relationships are stored.
type certOfAuthorityR struct {
	Company               *Company          `boil:"Company" json:"Company" toml:"Company" yaml:"Company"`
	State                 *State            `boil:"State" json:"State" toml:"State" yaml:"State"`
	AuthCertTaxExemptions TaxExemptionSlice `boil:"AuthCertTaxExemptions" json:"AuthCertTaxExemptions" toml:"AuthCertTaxExemptions" yaml:"AuthCertTaxExemptions"`
}

// NewStruct creates a new relationship struct
func (*certOfAuthorityR) NewStruct() *certOfAuthorityR {
	return &certOfAuthorityR{}
}

func (r *certOfAuthorityR) GetCompany() *Company {
	if r == nil {
		return nil
	}
	return r.Company
}

func (r *certOfAuthorityR) GetState() *State {
	if r == nil {
		return nil
	}
	return r.State
}

func (r *certOfAuthorityR) GetAuthCertTaxExemptions() TaxExemptionSlice {
	if r == nil {
		return nil
	}
	return r.AuthCertTaxExemptions
}

// certOfAuthorityL is where Load methods for each relationship are stored.
type certOfAuthorityL struct{}

var (
	certOfAuthorityAllColumns            = []string{"id", "company_id", "active", "state_id", "number", "since", "created"}
	certOfAuthorityColumnsWithoutDefault = []string{"company_id", "active", "state_id", "number", "since"}
	certOfAuthorityColumnsWithDefault    = []string{"id", "created"}
	certOfAuthorityPrimaryKeyColumns     = []string{"id"}
	certOfAuthorityGeneratedColumns      = []string{"id"}
)

type (
	// CertOfAuthoritySlice is an alias for a slice of pointers to CertOfAuthority.
	// This should almost always be used instead of []CertOfAuthority.
	CertOfAuthoritySlice []*CertOfAuthority

	certOfAuthorityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	certOfAuthorityType                 = reflect.TypeOf(&CertOfAuthority{})
	certOfAuthorityMapping              = queries.MakeStructMapping(certOfAuthorityType)
	certOfAuthorityPrimaryKeyMapping, _ = queries.BindMapping(certOfAuthorityType, certOfAuthorityMapping, certOfAuthorityPrimaryKeyColumns)
	certOfAuthorityInsertCacheMut       sync.RWMutex
	certOfAuthorityInsertCache          = make(map[string]insertCache)
	certOfAuthorityUpdateCacheMut       sync.RWMutex
	certOfAuthorityUpdateCache          = make(map[string]updateCache)
	certOfAuthorityUpsertCacheMut       sync.RWMutex
	certOfAuthorityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single certOfAuthority record from the query using the global executor.
func (q certOfAuthorityQuery) OneG(ctx context.Context) (*CertOfAuthority, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single certOfAuthority record from the query.
func (q certOfAuthorityQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CertOfAuthority, error) {
	o := &CertOfAuthority{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cert_of_authority")
	}

	return o, nil
}

// AllG returns all CertOfAuthority records from the query using the global executor.
func (q certOfAuthorityQuery) AllG(ctx context.Context) (CertOfAuthoritySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all CertOfAuthority records from the query.
func (q certOfAuthorityQuery) All(ctx context.Context, exec boil.ContextExecutor) (CertOfAuthoritySlice, error) {
	var o []*CertOfAuthority

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CertOfAuthority slice")
	}

	return o, nil
}

// CountG returns the count of all CertOfAuthority records in the query using the global executor
func (q certOfAuthorityQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all CertOfAuthority records in the query.
func (q certOfAuthorityQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cert_of_authority rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q certOfAuthorityQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q certOfAuthorityQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cert_of_authority exists")
	}

	return count > 0, nil
}

// Company pointed to by the foreign key.
func (o *CertOfAuthority) Company(mods ...qm.QueryMod) companyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CompanyID),
	}

	queryMods = append(queryMods, mods...)

	return Companies(queryMods...)
}

// State pointed to by the foreign key.
func (o *CertOfAuthority) State(mods ...qm.QueryMod) stateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StateID),
	}

	queryMods = append(queryMods, mods...)

	return States(queryMods...)
}

// AuthCertTaxExemptions retrieves all the tax_exemption's TaxExemptions with an executor via auth_cert_id column.
func (o *CertOfAuthority) AuthCertTaxExemptions(mods ...qm.QueryMod) taxExemptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"tax_exemptions\".\"auth_cert_id\"=?", o.ID),
	)

	return TaxExemptions(queryMods...)
}

// LoadCompany allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (certOfAuthorityL) LoadCompany(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCertOfAuthority interface{}, mods queries.Applicator) error {
	var slice []*CertOfAuthority
	var object *CertOfAuthority

	if singular {
		var ok bool
		object, ok = maybeCertOfAuthority.(*CertOfAuthority)
		if !ok {
			object = new(CertOfAuthority)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCertOfAuthority)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCertOfAuthority))
			}
		}
	} else {
		s, ok := maybeCertOfAuthority.(*[]*CertOfAuthority)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCertOfAuthority)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCertOfAuthority))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &certOfAuthorityR{}
		}
		args = append(args, object.CompanyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &certOfAuthorityR{}
			}

			for _, a := range args {
				if a == obj.CompanyID {
					continue Outer
				}
			}

			args = append(args, obj.CompanyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.companies`),
		qm.WhereIn(`alpha.companies.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Company")
	}

	var resultSlice []*Company
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Company")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for companies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for companies")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Company = foreign
		if foreign.R == nil {
			foreign.R = &companyR{}
		}
		foreign.R.CertOfAuthorities = append(foreign.R.CertOfAuthorities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CompanyID == foreign.ID {
				local.R.Company = foreign
				if foreign.R == nil {
					foreign.R = &companyR{}
				}
				foreign.R.CertOfAuthorities = append(foreign.R.CertOfAuthorities, local)
				break
			}
		}
	}

	return nil
}

// LoadState allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (certOfAuthorityL) LoadState(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCertOfAuthority interface{}, mods queries.Applicator) error {
	var slice []*CertOfAuthority
	var object *CertOfAuthority

	if singular {
		var ok bool
		object, ok = maybeCertOfAuthority.(*CertOfAuthority)
		if !ok {
			object = new(CertOfAuthority)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCertOfAuthority)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCertOfAuthority))
			}
		}
	} else {
		s, ok := maybeCertOfAuthority.(*[]*CertOfAuthority)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCertOfAuthority)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCertOfAuthority))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &certOfAuthorityR{}
		}
		args = append(args, object.StateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &certOfAuthorityR{}
			}

			for _, a := range args {
				if a == obj.StateID {
					continue Outer
				}
			}

			args = append(args, obj.StateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.state`),
		qm.WhereIn(`alpha.state.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load State")
	}

	var resultSlice []*State
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice State")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for state")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for state")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.State = foreign
		if foreign.R == nil {
			foreign.R = &stateR{}
		}
		foreign.R.CertOfAuthorities = append(foreign.R.CertOfAuthorities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StateID == foreign.ID {
				local.R.State = foreign
				if foreign.R == nil {
					foreign.R = &stateR{}
				}
				foreign.R.CertOfAuthorities = append(foreign.R.CertOfAuthorities, local)
				break
			}
		}
	}

	return nil
}

// LoadAuthCertTaxExemptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (certOfAuthorityL) LoadAuthCertTaxExemptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCertOfAuthority interface{}, mods queries.Applicator) error {
	var slice []*CertOfAuthority
	var object *CertOfAuthority

	if singular {
		var ok bool
		object, ok = maybeCertOfAuthority.(*CertOfAuthority)
		if !ok {
			object = new(CertOfAuthority)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCertOfAuthority)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCertOfAuthority))
			}
		}
	} else {
		s, ok := maybeCertOfAuthority.(*[]*CertOfAuthority)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCertOfAuthority)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCertOfAuthority))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &certOfAuthorityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &certOfAuthorityR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.tax_exemptions`),
		qm.WhereIn(`alpha.tax_exemptions.auth_cert_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tax_exemptions")
	}

	var resultSlice []*TaxExemption
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tax_exemptions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tax_exemptions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tax_exemptions")
	}

	if singular {
		object.R.AuthCertTaxExemptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &taxExemptionR{}
			}
			foreign.R.AuthCert = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AuthCertID) {
				local.R.AuthCertTaxExemptions = append(local.R.AuthCertTaxExemptions, foreign)
				if foreign.R == nil {
					foreign.R = &taxExemptionR{}
				}
				foreign.R.AuthCert = local
				break
			}
		}
	}

	return nil
}

// SetCompanyG of the certOfAuthority to the related item.
// Sets o.R.Company to related.
// Adds o to related.R.CertOfAuthorities.
// Uses the global database handle.
func (o *CertOfAuthority) SetCompanyG(ctx context.Context, insert bool, related *Company) error {
	return o.SetCompany(ctx, boil.GetContextDB(), insert, related)
}

// SetCompany of the certOfAuthority to the related item.
// Sets o.R.Company to related.
// Adds o to related.R.CertOfAuthorities.
func (o *CertOfAuthority) SetCompany(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Company) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"cert_of_authority\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"company_id"}),
		strmangle.WhereClause("\"", "\"", 2, certOfAuthorityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CompanyID = related.ID
	if o.R == nil {
		o.R = &certOfAuthorityR{
			Company: related,
		}
	} else {
		o.R.Company = related
	}

	if related.R == nil {
		related.R = &companyR{
			CertOfAuthorities: CertOfAuthoritySlice{o},
		}
	} else {
		related.R.CertOfAuthorities = append(related.R.CertOfAuthorities, o)
	}

	return nil
}

// SetStateG of the certOfAuthority to the related item.
// Sets o.R.State to related.
// Adds o to related.R.CertOfAuthorities.
// Uses the global database handle.
func (o *CertOfAuthority) SetStateG(ctx context.Context, insert bool, related *State) error {
	return o.SetState(ctx, boil.GetContextDB(), insert, related)
}

// SetState of the certOfAuthority to the related item.
// Sets o.R.State to related.
// Adds o to related.R.CertOfAuthorities.
func (o *CertOfAuthority) SetState(ctx context.Context, exec boil.ContextExecutor, insert bool, related *State) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"cert_of_authority\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"state_id"}),
		strmangle.WhereClause("\"", "\"", 2, certOfAuthorityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StateID = related.ID
	if o.R == nil {
		o.R = &certOfAuthorityR{
			State: related,
		}
	} else {
		o.R.State = related
	}

	if related.R == nil {
		related.R = &stateR{
			CertOfAuthorities: CertOfAuthoritySlice{o},
		}
	} else {
		related.R.CertOfAuthorities = append(related.R.CertOfAuthorities, o)
	}

	return nil
}

// AddAuthCertTaxExemptionsG adds the given related objects to the existing relationships
// of the cert_of_authority, optionally inserting them as new records.
// Appends related to o.R.AuthCertTaxExemptions.
// Sets related.R.AuthCert appropriately.
// Uses the global database handle.
func (o *CertOfAuthority) AddAuthCertTaxExemptionsG(ctx context.Context, insert bool, related ...*TaxExemption) error {
	return o.AddAuthCertTaxExemptions(ctx, boil.GetContextDB(), insert, related...)
}

// AddAuthCertTaxExemptions adds the given related objects to the existing relationships
// of the cert_of_authority, optionally inserting them as new records.
// Appends related to o.R.AuthCertTaxExemptions.
// Sets related.R.AuthCert appropriately.
func (o *CertOfAuthority) AddAuthCertTaxExemptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaxExemption) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AuthCertID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"tax_exemptions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"auth_cert_id"}),
				strmangle.WhereClause("\"", "\"", 2, taxExemptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AuthCertID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &certOfAuthorityR{
			AuthCertTaxExemptions: related,
		}
	} else {
		o.R.AuthCertTaxExemptions = append(o.R.AuthCertTaxExemptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &taxExemptionR{
				AuthCert: o,
			}
		} else {
			rel.R.AuthCert = o
		}
	}
	return nil
}

// SetAuthCertTaxExemptionsG removes all previously related items of the
// cert_of_authority replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AuthCert's AuthCertTaxExemptions accordingly.
// Replaces o.R.AuthCertTaxExemptions with related.
// Sets related.R.AuthCert's AuthCertTaxExemptions accordingly.
// Uses the global database handle.
func (o *CertOfAuthority) SetAuthCertTaxExemptionsG(ctx context.Context, insert bool, related ...*TaxExemption) error {
	return o.SetAuthCertTaxExemptions(ctx, boil.GetContextDB(), insert, related...)
}

// SetAuthCertTaxExemptions removes all previously related items of the
// cert_of_authority replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AuthCert's AuthCertTaxExemptions accordingly.
// Replaces o.R.AuthCertTaxExemptions with related.
// Sets related.R.AuthCert's AuthCertTaxExemptions accordingly.
func (o *CertOfAuthority) SetAuthCertTaxExemptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaxExemption) error {
	query := "update \"alpha\".\"tax_exemptions\" set \"auth_cert_id\" = null where \"auth_cert_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AuthCertTaxExemptions {
			queries.SetScanner(&rel.AuthCertID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AuthCert = nil
		}
		o.R.AuthCertTaxExemptions = nil
	}

	return o.AddAuthCertTaxExemptions(ctx, exec, insert, related...)
}

// RemoveAuthCertTaxExemptionsG relationships from objects passed in.
// Removes related items from R.AuthCertTaxExemptions (uses pointer comparison, removal does not keep order)
// Sets related.R.AuthCert.
// Uses the global database handle.
func (o *CertOfAuthority) RemoveAuthCertTaxExemptionsG(ctx context.Context, related ...*TaxExemption) error {
	return o.RemoveAuthCertTaxExemptions(ctx, boil.GetContextDB(), related...)
}

// RemoveAuthCertTaxExemptions relationships from objects passed in.
// Removes related items from R.AuthCertTaxExemptions (uses pointer comparison, removal does not keep order)
// Sets related.R.AuthCert.
func (o *CertOfAuthority) RemoveAuthCertTaxExemptions(ctx context.Context, exec boil.ContextExecutor, related ...*TaxExemption) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AuthCertID, nil)
		if rel.R != nil {
			rel.R.AuthCert = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("auth_cert_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AuthCertTaxExemptions {
			if rel != ri {
				continue
			}

			ln := len(o.R.AuthCertTaxExemptions)
			if ln > 1 && i < ln-1 {
				o.R.AuthCertTaxExemptions[i] = o.R.AuthCertTaxExemptions[ln-1]
			}
			o.R.AuthCertTaxExemptions = o.R.AuthCertTaxExemptions[:ln-1]
			break
		}
	}

	return nil
}

// CertOfAuthorities retrieves all the records using an executor.
func CertOfAuthorities(mods ...qm.QueryMod) certOfAuthorityQuery {
	mods = append(mods, qm.From("\"alpha\".\"cert_of_authority\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"cert_of_authority\".*"})
	}

	return certOfAuthorityQuery{q}
}

// FindCertOfAuthorityG retrieves a single record by ID.
func FindCertOfAuthorityG(ctx context.Context, iD int, selectCols ...string) (*CertOfAuthority, error) {
	return FindCertOfAuthority(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindCertOfAuthority retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCertOfAuthority(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*CertOfAuthority, error) {
	certOfAuthorityObj := &CertOfAuthority{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"cert_of_authority\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, certOfAuthorityObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cert_of_authority")
	}

	return certOfAuthorityObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CertOfAuthority) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CertOfAuthority) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cert_of_authority provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(certOfAuthorityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	certOfAuthorityInsertCacheMut.RLock()
	cache, cached := certOfAuthorityInsertCache[key]
	certOfAuthorityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			certOfAuthorityAllColumns,
			certOfAuthorityColumnsWithDefault,
			certOfAuthorityColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, certOfAuthorityGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(certOfAuthorityType, certOfAuthorityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(certOfAuthorityType, certOfAuthorityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"cert_of_authority\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"cert_of_authority\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cert_of_authority")
	}

	if !cached {
		certOfAuthorityInsertCacheMut.Lock()
		certOfAuthorityInsertCache[key] = cache
		certOfAuthorityInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single CertOfAuthority record using the global executor.
// See Update for more documentation.
func (o *CertOfAuthority) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the CertOfAuthority.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CertOfAuthority) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	certOfAuthorityUpdateCacheMut.RLock()
	cache, cached := certOfAuthorityUpdateCache[key]
	certOfAuthorityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			certOfAuthorityAllColumns,
			certOfAuthorityPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, certOfAuthorityGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cert_of_authority, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"cert_of_authority\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, certOfAuthorityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(certOfAuthorityType, certOfAuthorityMapping, append(wl, certOfAuthorityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cert_of_authority row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cert_of_authority")
	}

	if !cached {
		certOfAuthorityUpdateCacheMut.Lock()
		certOfAuthorityUpdateCache[key] = cache
		certOfAuthorityUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q certOfAuthorityQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q certOfAuthorityQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cert_of_authority")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cert_of_authority")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CertOfAuthoritySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CertOfAuthoritySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), certOfAuthorityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"cert_of_authority\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, certOfAuthorityPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in certOfAuthority slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all certOfAuthority")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CertOfAuthority) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CertOfAuthority) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cert_of_authority provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(certOfAuthorityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	certOfAuthorityUpsertCacheMut.RLock()
	cache, cached := certOfAuthorityUpsertCache[key]
	certOfAuthorityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			certOfAuthorityAllColumns,
			certOfAuthorityColumnsWithDefault,
			certOfAuthorityColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			certOfAuthorityAllColumns,
			certOfAuthorityPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, certOfAuthorityGeneratedColumns)
		update = strmangle.SetComplement(update, certOfAuthorityGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert cert_of_authority, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(certOfAuthorityPrimaryKeyColumns))
			copy(conflict, certOfAuthorityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"cert_of_authority\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(certOfAuthorityType, certOfAuthorityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(certOfAuthorityType, certOfAuthorityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert cert_of_authority")
	}

	if !cached {
		certOfAuthorityUpsertCacheMut.Lock()
		certOfAuthorityUpsertCache[key] = cache
		certOfAuthorityUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single CertOfAuthority record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CertOfAuthority) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single CertOfAuthority record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CertOfAuthority) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CertOfAuthority provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), certOfAuthorityPrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"cert_of_authority\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cert_of_authority")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cert_of_authority")
	}

	return rowsAff, nil
}

func (q certOfAuthorityQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q certOfAuthorityQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no certOfAuthorityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cert_of_authority")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cert_of_authority")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CertOfAuthoritySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CertOfAuthoritySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), certOfAuthorityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"cert_of_authority\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, certOfAuthorityPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from certOfAuthority slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cert_of_authority")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CertOfAuthority) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no CertOfAuthority provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CertOfAuthority) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCertOfAuthority(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CertOfAuthoritySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty CertOfAuthoritySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CertOfAuthoritySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CertOfAuthoritySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), certOfAuthorityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"cert_of_authority\".* FROM \"alpha\".\"cert_of_authority\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, certOfAuthorityPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CertOfAuthoritySlice")
	}

	*o = slice

	return nil
}

// CertOfAuthorityExistsG checks if the CertOfAuthority row exists.
func CertOfAuthorityExistsG(ctx context.Context, iD int) (bool, error) {
	return CertOfAuthorityExists(ctx, boil.GetContextDB(), iD)
}

// CertOfAuthorityExists checks if the CertOfAuthority row exists.
func CertOfAuthorityExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"cert_of_authority\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cert_of_authority exists")
	}

	return exists, nil
}
