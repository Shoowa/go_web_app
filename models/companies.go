// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Company is an object representing the database table.
type Company struct {
	ID        int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Email     string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	Telephone string      `boil:"telephone" json:"telephone" toml:"telephone" yaml:"telephone"`
	Ext       null.String `boil:"ext" json:"ext,omitempty" toml:"ext" yaml:"ext,omitempty"`
	Street    string      `boil:"street" json:"street" toml:"street" yaml:"street"`
	Suite     null.String `boil:"suite" json:"suite,omitempty" toml:"suite" yaml:"suite,omitempty"`
	Postal    string      `boil:"postal" json:"postal" toml:"postal" yaml:"postal"`
	Active    bool        `boil:"active" json:"active" toml:"active" yaml:"active"`
	StateID   string      `boil:"state_id" json:"state_id" toml:"state_id" yaml:"state_id"`
	CountyID  int         `boil:"county_id" json:"county_id" toml:"county_id" yaml:"county_id"`
	MuniID    null.Int    `boil:"muni_id" json:"muni_id,omitempty" toml:"muni_id" yaml:"muni_id,omitempty"`
	StructID  int         `boil:"struct_id" json:"struct_id" toml:"struct_id" yaml:"struct_id"`
	Created   time.Time   `boil:"created" json:"created" toml:"created" yaml:"created"`
	Modified  null.Time   `boil:"modified" json:"modified,omitempty" toml:"modified" yaml:"modified,omitempty"`

	R *companyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L companyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CompanyColumns = struct {
	ID        string
	Name      string
	Email     string
	Telephone string
	Ext       string
	Street    string
	Suite     string
	Postal    string
	Active    string
	StateID   string
	CountyID  string
	MuniID    string
	StructID  string
	Created   string
	Modified  string
}{
	ID:        "id",
	Name:      "name",
	Email:     "email",
	Telephone: "telephone",
	Ext:       "ext",
	Street:    "street",
	Suite:     "suite",
	Postal:    "postal",
	Active:    "active",
	StateID:   "state_id",
	CountyID:  "county_id",
	MuniID:    "muni_id",
	StructID:  "struct_id",
	Created:   "created",
	Modified:  "modified",
}

var CompanyTableColumns = struct {
	ID        string
	Name      string
	Email     string
	Telephone string
	Ext       string
	Street    string
	Suite     string
	Postal    string
	Active    string
	StateID   string
	CountyID  string
	MuniID    string
	StructID  string
	Created   string
	Modified  string
}{
	ID:        "companies.id",
	Name:      "companies.name",
	Email:     "companies.email",
	Telephone: "companies.telephone",
	Ext:       "companies.ext",
	Street:    "companies.street",
	Suite:     "companies.suite",
	Postal:    "companies.postal",
	Active:    "companies.active",
	StateID:   "companies.state_id",
	CountyID:  "companies.county_id",
	MuniID:    "companies.muni_id",
	StructID:  "companies.struct_id",
	Created:   "companies.created",
	Modified:  "companies.modified",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CompanyWhere = struct {
	ID        whereHelperint
	Name      whereHelperstring
	Email     whereHelperstring
	Telephone whereHelperstring
	Ext       whereHelpernull_String
	Street    whereHelperstring
	Suite     whereHelpernull_String
	Postal    whereHelperstring
	Active    whereHelperbool
	StateID   whereHelperstring
	CountyID  whereHelperint
	MuniID    whereHelpernull_Int
	StructID  whereHelperint
	Created   whereHelpertime_Time
	Modified  whereHelpernull_Time
}{
	ID:        whereHelperint{field: "\"alpha\".\"companies\".\"id\""},
	Name:      whereHelperstring{field: "\"alpha\".\"companies\".\"name\""},
	Email:     whereHelperstring{field: "\"alpha\".\"companies\".\"email\""},
	Telephone: whereHelperstring{field: "\"alpha\".\"companies\".\"telephone\""},
	Ext:       whereHelpernull_String{field: "\"alpha\".\"companies\".\"ext\""},
	Street:    whereHelperstring{field: "\"alpha\".\"companies\".\"street\""},
	Suite:     whereHelpernull_String{field: "\"alpha\".\"companies\".\"suite\""},
	Postal:    whereHelperstring{field: "\"alpha\".\"companies\".\"postal\""},
	Active:    whereHelperbool{field: "\"alpha\".\"companies\".\"active\""},
	StateID:   whereHelperstring{field: "\"alpha\".\"companies\".\"state_id\""},
	CountyID:  whereHelperint{field: "\"alpha\".\"companies\".\"county_id\""},
	MuniID:    whereHelpernull_Int{field: "\"alpha\".\"companies\".\"muni_id\""},
	StructID:  whereHelperint{field: "\"alpha\".\"companies\".\"struct_id\""},
	Created:   whereHelpertime_Time{field: "\"alpha\".\"companies\".\"created\""},
	Modified:  whereHelpernull_Time{field: "\"alpha\".\"companies\".\"modified\""},
}

// CompanyRels is where relationship names are stored.
var CompanyRels = struct {
	County                         string
	Muni                           string
	State                          string
	Struct                         string
	CertOfAuthorities              string
	Commissions                    string
	Depots                         string
	Offices                        string
	Classes                        string
	Persons                        string
	Products                       string
	RevokerSalesorderCancellations string
	BuyerSalesorders               string
	SellerSalesorders              string
}{
	County:                         "County",
	Muni:                           "Muni",
	State:                          "State",
	Struct:                         "Struct",
	CertOfAuthorities:              "CertOfAuthorities",
	Commissions:                    "Commissions",
	Depots:                         "Depots",
	Offices:                        "Offices",
	Classes:                        "Classes",
	Persons:                        "Persons",
	Products:                       "Products",
	RevokerSalesorderCancellations: "RevokerSalesorderCancellations",
	BuyerSalesorders:               "BuyerSalesorders",
	SellerSalesorders:              "SellerSalesorders",
}

// companyR is where relationships are stored.
type companyR struct {
	County                         *County                     `boil:"County" json:"County" toml:"County" yaml:"County"`
	Muni                           *Muni                       `boil:"Muni" json:"Muni" toml:"Muni" yaml:"Muni"`
	State                          *State                      `boil:"State" json:"State" toml:"State" yaml:"State"`
	Struct                         *BizStruct                  `boil:"Struct" json:"Struct" toml:"Struct" yaml:"Struct"`
	CertOfAuthorities              CertOfAuthoritySlice        `boil:"CertOfAuthorities" json:"CertOfAuthorities" toml:"CertOfAuthorities" yaml:"CertOfAuthorities"`
	Commissions                    CommissionSlice             `boil:"Commissions" json:"Commissions" toml:"Commissions" yaml:"Commissions"`
	Depots                         DepotSlice                  `boil:"Depots" json:"Depots" toml:"Depots" yaml:"Depots"`
	Offices                        OfficeSlice                 `boil:"Offices" json:"Offices" toml:"Offices" yaml:"Offices"`
	Classes                        ClassSlice                  `boil:"Classes" json:"Classes" toml:"Classes" yaml:"Classes"`
	Persons                        PersonSlice                 `boil:"Persons" json:"Persons" toml:"Persons" yaml:"Persons"`
	Products                       ProductSlice                `boil:"Products" json:"Products" toml:"Products" yaml:"Products"`
	RevokerSalesorderCancellations SalesorderCancellationSlice `boil:"RevokerSalesorderCancellations" json:"RevokerSalesorderCancellations" toml:"RevokerSalesorderCancellations" yaml:"RevokerSalesorderCancellations"`
	BuyerSalesorders               SalesorderSlice             `boil:"BuyerSalesorders" json:"BuyerSalesorders" toml:"BuyerSalesorders" yaml:"BuyerSalesorders"`
	SellerSalesorders              SalesorderSlice             `boil:"SellerSalesorders" json:"SellerSalesorders" toml:"SellerSalesorders" yaml:"SellerSalesorders"`
}

// NewStruct creates a new relationship struct
func (*companyR) NewStruct() *companyR {
	return &companyR{}
}

func (r *companyR) GetCounty() *County {
	if r == nil {
		return nil
	}
	return r.County
}

func (r *companyR) GetMuni() *Muni {
	if r == nil {
		return nil
	}
	return r.Muni
}

func (r *companyR) GetState() *State {
	if r == nil {
		return nil
	}
	return r.State
}

func (r *companyR) GetStruct() *BizStruct {
	if r == nil {
		return nil
	}
	return r.Struct
}

func (r *companyR) GetCertOfAuthorities() CertOfAuthoritySlice {
	if r == nil {
		return nil
	}
	return r.CertOfAuthorities
}

func (r *companyR) GetCommissions() CommissionSlice {
	if r == nil {
		return nil
	}
	return r.Commissions
}

func (r *companyR) GetDepots() DepotSlice {
	if r == nil {
		return nil
	}
	return r.Depots
}

func (r *companyR) GetOffices() OfficeSlice {
	if r == nil {
		return nil
	}
	return r.Offices
}

func (r *companyR) GetClasses() ClassSlice {
	if r == nil {
		return nil
	}
	return r.Classes
}

func (r *companyR) GetPersons() PersonSlice {
	if r == nil {
		return nil
	}
	return r.Persons
}

func (r *companyR) GetProducts() ProductSlice {
	if r == nil {
		return nil
	}
	return r.Products
}

func (r *companyR) GetRevokerSalesorderCancellations() SalesorderCancellationSlice {
	if r == nil {
		return nil
	}
	return r.RevokerSalesorderCancellations
}

func (r *companyR) GetBuyerSalesorders() SalesorderSlice {
	if r == nil {
		return nil
	}
	return r.BuyerSalesorders
}

func (r *companyR) GetSellerSalesorders() SalesorderSlice {
	if r == nil {
		return nil
	}
	return r.SellerSalesorders
}

// companyL is where Load methods for each relationship are stored.
type companyL struct{}

var (
	companyAllColumns            = []string{"id", "name", "email", "telephone", "ext", "street", "suite", "postal", "active", "state_id", "county_id", "muni_id", "struct_id", "created", "modified"}
	companyColumnsWithoutDefault = []string{"name", "email", "telephone", "street", "postal", "active", "state_id", "county_id", "struct_id"}
	companyColumnsWithDefault    = []string{"id", "ext", "suite", "muni_id", "created", "modified"}
	companyPrimaryKeyColumns     = []string{"id"}
	companyGeneratedColumns      = []string{"id"}
)

type (
	// CompanySlice is an alias for a slice of pointers to Company.
	// This should almost always be used instead of []Company.
	CompanySlice []*Company

	companyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	companyType                 = reflect.TypeOf(&Company{})
	companyMapping              = queries.MakeStructMapping(companyType)
	companyPrimaryKeyMapping, _ = queries.BindMapping(companyType, companyMapping, companyPrimaryKeyColumns)
	companyInsertCacheMut       sync.RWMutex
	companyInsertCache          = make(map[string]insertCache)
	companyUpdateCacheMut       sync.RWMutex
	companyUpdateCache          = make(map[string]updateCache)
	companyUpsertCacheMut       sync.RWMutex
	companyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single company record from the query using the global executor.
func (q companyQuery) OneG(ctx context.Context) (*Company, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single company record from the query.
func (q companyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Company, error) {
	o := &Company{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for companies")
	}

	return o, nil
}

// AllG returns all Company records from the query using the global executor.
func (q companyQuery) AllG(ctx context.Context) (CompanySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Company records from the query.
func (q companyQuery) All(ctx context.Context, exec boil.ContextExecutor) (CompanySlice, error) {
	var o []*Company

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Company slice")
	}

	return o, nil
}

// CountG returns the count of all Company records in the query using the global executor
func (q companyQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Company records in the query.
func (q companyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count companies rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q companyQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q companyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if companies exists")
	}

	return count > 0, nil
}

// County pointed to by the foreign key.
func (o *Company) County(mods ...qm.QueryMod) countyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CountyID),
	}

	queryMods = append(queryMods, mods...)

	return Counties(queryMods...)
}

// Muni pointed to by the foreign key.
func (o *Company) Muni(mods ...qm.QueryMod) muniQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MuniID),
	}

	queryMods = append(queryMods, mods...)

	return Munis(queryMods...)
}

// State pointed to by the foreign key.
func (o *Company) State(mods ...qm.QueryMod) stateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StateID),
	}

	queryMods = append(queryMods, mods...)

	return States(queryMods...)
}

// Struct pointed to by the foreign key.
func (o *Company) Struct(mods ...qm.QueryMod) bizStructQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StructID),
	}

	queryMods = append(queryMods, mods...)

	return BizStructs(queryMods...)
}

// CertOfAuthorities retrieves all the cert_of_authority's CertOfAuthorities with an executor.
func (o *Company) CertOfAuthorities(mods ...qm.QueryMod) certOfAuthorityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"cert_of_authority\".\"company_id\"=?", o.ID),
	)

	return CertOfAuthorities(queryMods...)
}

// Commissions retrieves all the commission's Commissions with an executor.
func (o *Company) Commissions(mods ...qm.QueryMod) commissionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"commissions\".\"company_id\"=?", o.ID),
	)

	return Commissions(queryMods...)
}

// Depots retrieves all the depot's Depots with an executor.
func (o *Company) Depots(mods ...qm.QueryMod) depotQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"depots\".\"company_id\"=?", o.ID),
	)

	return Depots(queryMods...)
}

// Offices retrieves all the office's Offices with an executor.
func (o *Company) Offices(mods ...qm.QueryMod) officeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"offices\".\"company_id\"=?", o.ID),
	)

	return Offices(queryMods...)
}

// Classes retrieves all the class's Classes with an executor.
func (o *Company) Classes(mods ...qm.QueryMod) classQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"alpha\".\"pairings\" on \"alpha\".\"classes\".\"name\" = \"alpha\".\"pairings\".\"class_id\""),
		qm.Where("\"alpha\".\"pairings\".\"company_id\"=?", o.ID),
	)

	return Classes(queryMods...)
}

// Persons retrieves all the person's Persons with an executor.
func (o *Company) Persons(mods ...qm.QueryMod) personQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"persons\".\"company_id\"=?", o.ID),
	)

	return Persons(queryMods...)
}

// Products retrieves all the product's Products with an executor.
func (o *Company) Products(mods ...qm.QueryMod) productQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"products\".\"company_id\"=?", o.ID),
	)

	return Products(queryMods...)
}

// RevokerSalesorderCancellations retrieves all the salesorder_cancellation's SalesorderCancellations with an executor via revoker_id column.
func (o *Company) RevokerSalesorderCancellations(mods ...qm.QueryMod) salesorderCancellationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"salesorder_cancellations\".\"revoker_id\"=?", o.ID),
	)

	return SalesorderCancellations(queryMods...)
}

// BuyerSalesorders retrieves all the salesorder's Salesorders with an executor via buyer_id column.
func (o *Company) BuyerSalesorders(mods ...qm.QueryMod) salesorderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"salesorders\".\"buyer_id\"=?", o.ID),
	)

	return Salesorders(queryMods...)
}

// SellerSalesorders retrieves all the salesorder's Salesorders with an executor via seller_id column.
func (o *Company) SellerSalesorders(mods ...qm.QueryMod) salesorderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"salesorders\".\"seller_id\"=?", o.ID),
	)

	return Salesorders(queryMods...)
}

// LoadCounty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (companyL) LoadCounty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompany interface{}, mods queries.Applicator) error {
	var slice []*Company
	var object *Company

	if singular {
		var ok bool
		object, ok = maybeCompany.(*Company)
		if !ok {
			object = new(Company)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompany))
			}
		}
	} else {
		s, ok := maybeCompany.(*[]*Company)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompany))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyR{}
		}
		args = append(args, object.CountyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyR{}
			}

			for _, a := range args {
				if a == obj.CountyID {
					continue Outer
				}
			}

			args = append(args, obj.CountyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.county`),
		qm.WhereIn(`alpha.county.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load County")
	}

	var resultSlice []*County
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice County")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for county")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for county")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.County = foreign
		if foreign.R == nil {
			foreign.R = &countyR{}
		}
		foreign.R.Companies = append(foreign.R.Companies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CountyID == foreign.ID {
				local.R.County = foreign
				if foreign.R == nil {
					foreign.R = &countyR{}
				}
				foreign.R.Companies = append(foreign.R.Companies, local)
				break
			}
		}
	}

	return nil
}

// LoadMuni allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (companyL) LoadMuni(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompany interface{}, mods queries.Applicator) error {
	var slice []*Company
	var object *Company

	if singular {
		var ok bool
		object, ok = maybeCompany.(*Company)
		if !ok {
			object = new(Company)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompany))
			}
		}
	} else {
		s, ok := maybeCompany.(*[]*Company)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompany))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyR{}
		}
		if !queries.IsNil(object.MuniID) {
			args = append(args, object.MuniID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.MuniID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.MuniID) {
				args = append(args, obj.MuniID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.muni`),
		qm.WhereIn(`alpha.muni.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Muni")
	}

	var resultSlice []*Muni
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Muni")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for muni")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for muni")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Muni = foreign
		if foreign.R == nil {
			foreign.R = &muniR{}
		}
		foreign.R.Companies = append(foreign.R.Companies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MuniID, foreign.ID) {
				local.R.Muni = foreign
				if foreign.R == nil {
					foreign.R = &muniR{}
				}
				foreign.R.Companies = append(foreign.R.Companies, local)
				break
			}
		}
	}

	return nil
}

// LoadState allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (companyL) LoadState(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompany interface{}, mods queries.Applicator) error {
	var slice []*Company
	var object *Company

	if singular {
		var ok bool
		object, ok = maybeCompany.(*Company)
		if !ok {
			object = new(Company)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompany))
			}
		}
	} else {
		s, ok := maybeCompany.(*[]*Company)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompany))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyR{}
		}
		args = append(args, object.StateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyR{}
			}

			for _, a := range args {
				if a == obj.StateID {
					continue Outer
				}
			}

			args = append(args, obj.StateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.state`),
		qm.WhereIn(`alpha.state.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load State")
	}

	var resultSlice []*State
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice State")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for state")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for state")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.State = foreign
		if foreign.R == nil {
			foreign.R = &stateR{}
		}
		foreign.R.Companies = append(foreign.R.Companies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StateID == foreign.ID {
				local.R.State = foreign
				if foreign.R == nil {
					foreign.R = &stateR{}
				}
				foreign.R.Companies = append(foreign.R.Companies, local)
				break
			}
		}
	}

	return nil
}

// LoadStruct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (companyL) LoadStruct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompany interface{}, mods queries.Applicator) error {
	var slice []*Company
	var object *Company

	if singular {
		var ok bool
		object, ok = maybeCompany.(*Company)
		if !ok {
			object = new(Company)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompany))
			}
		}
	} else {
		s, ok := maybeCompany.(*[]*Company)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompany))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyR{}
		}
		args = append(args, object.StructID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyR{}
			}

			for _, a := range args {
				if a == obj.StructID {
					continue Outer
				}
			}

			args = append(args, obj.StructID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.biz_struct`),
		qm.WhereIn(`alpha.biz_struct.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BizStruct")
	}

	var resultSlice []*BizStruct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BizStruct")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for biz_struct")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for biz_struct")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Struct = foreign
		if foreign.R == nil {
			foreign.R = &bizStructR{}
		}
		foreign.R.StructCompanies = append(foreign.R.StructCompanies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StructID == foreign.ID {
				local.R.Struct = foreign
				if foreign.R == nil {
					foreign.R = &bizStructR{}
				}
				foreign.R.StructCompanies = append(foreign.R.StructCompanies, local)
				break
			}
		}
	}

	return nil
}

// LoadCertOfAuthorities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (companyL) LoadCertOfAuthorities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompany interface{}, mods queries.Applicator) error {
	var slice []*Company
	var object *Company

	if singular {
		var ok bool
		object, ok = maybeCompany.(*Company)
		if !ok {
			object = new(Company)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompany))
			}
		}
	} else {
		s, ok := maybeCompany.(*[]*Company)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompany))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.cert_of_authority`),
		qm.WhereIn(`alpha.cert_of_authority.company_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cert_of_authority")
	}

	var resultSlice []*CertOfAuthority
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cert_of_authority")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cert_of_authority")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cert_of_authority")
	}

	if singular {
		object.R.CertOfAuthorities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &certOfAuthorityR{}
			}
			foreign.R.Company = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CompanyID {
				local.R.CertOfAuthorities = append(local.R.CertOfAuthorities, foreign)
				if foreign.R == nil {
					foreign.R = &certOfAuthorityR{}
				}
				foreign.R.Company = local
				break
			}
		}
	}

	return nil
}

// LoadCommissions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (companyL) LoadCommissions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompany interface{}, mods queries.Applicator) error {
	var slice []*Company
	var object *Company

	if singular {
		var ok bool
		object, ok = maybeCompany.(*Company)
		if !ok {
			object = new(Company)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompany))
			}
		}
	} else {
		s, ok := maybeCompany.(*[]*Company)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompany))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.commissions`),
		qm.WhereIn(`alpha.commissions.company_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load commissions")
	}

	var resultSlice []*Commission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice commissions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on commissions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for commissions")
	}

	if singular {
		object.R.Commissions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &commissionR{}
			}
			foreign.R.Company = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CompanyID {
				local.R.Commissions = append(local.R.Commissions, foreign)
				if foreign.R == nil {
					foreign.R = &commissionR{}
				}
				foreign.R.Company = local
				break
			}
		}
	}

	return nil
}

// LoadDepots allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (companyL) LoadDepots(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompany interface{}, mods queries.Applicator) error {
	var slice []*Company
	var object *Company

	if singular {
		var ok bool
		object, ok = maybeCompany.(*Company)
		if !ok {
			object = new(Company)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompany))
			}
		}
	} else {
		s, ok := maybeCompany.(*[]*Company)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompany))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.depots`),
		qm.WhereIn(`alpha.depots.company_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load depots")
	}

	var resultSlice []*Depot
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice depots")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on depots")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for depots")
	}

	if singular {
		object.R.Depots = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &depotR{}
			}
			foreign.R.Company = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CompanyID {
				local.R.Depots = append(local.R.Depots, foreign)
				if foreign.R == nil {
					foreign.R = &depotR{}
				}
				foreign.R.Company = local
				break
			}
		}
	}

	return nil
}

// LoadOffices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (companyL) LoadOffices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompany interface{}, mods queries.Applicator) error {
	var slice []*Company
	var object *Company

	if singular {
		var ok bool
		object, ok = maybeCompany.(*Company)
		if !ok {
			object = new(Company)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompany))
			}
		}
	} else {
		s, ok := maybeCompany.(*[]*Company)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompany))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.offices`),
		qm.WhereIn(`alpha.offices.company_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load offices")
	}

	var resultSlice []*Office
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice offices")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on offices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for offices")
	}

	if singular {
		object.R.Offices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &officeR{}
			}
			foreign.R.Company = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CompanyID {
				local.R.Offices = append(local.R.Offices, foreign)
				if foreign.R == nil {
					foreign.R = &officeR{}
				}
				foreign.R.Company = local
				break
			}
		}
	}

	return nil
}

// LoadClasses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (companyL) LoadClasses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompany interface{}, mods queries.Applicator) error {
	var slice []*Company
	var object *Company

	if singular {
		var ok bool
		object, ok = maybeCompany.(*Company)
		if !ok {
			object = new(Company)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompany))
			}
		}
	} else {
		s, ok := maybeCompany.(*[]*Company)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompany))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"alpha\".\"classes\".\"name\", \"a\".\"company_id\""),
		qm.From("\"alpha\".\"classes\""),
		qm.InnerJoin("\"alpha\".\"pairings\" as \"a\" on \"alpha\".\"classes\".\"name\" = \"a\".\"class_id\""),
		qm.WhereIn("\"a\".\"company_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load classes")
	}

	var resultSlice []*Class

	var localJoinCols []int
	for results.Next() {
		one := new(Class)
		var localJoinCol int

		err = results.Scan(&one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for classes")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice classes")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on classes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for classes")
	}

	if singular {
		object.R.Classes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &classR{}
			}
			foreign.R.Companies = append(foreign.R.Companies, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Classes = append(local.R.Classes, foreign)
				if foreign.R == nil {
					foreign.R = &classR{}
				}
				foreign.R.Companies = append(foreign.R.Companies, local)
				break
			}
		}
	}

	return nil
}

// LoadPersons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (companyL) LoadPersons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompany interface{}, mods queries.Applicator) error {
	var slice []*Company
	var object *Company

	if singular {
		var ok bool
		object, ok = maybeCompany.(*Company)
		if !ok {
			object = new(Company)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompany))
			}
		}
	} else {
		s, ok := maybeCompany.(*[]*Company)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompany))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.persons`),
		qm.WhereIn(`alpha.persons.company_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load persons")
	}

	var resultSlice []*Person
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice persons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on persons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for persons")
	}

	if singular {
		object.R.Persons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &personR{}
			}
			foreign.R.Company = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CompanyID {
				local.R.Persons = append(local.R.Persons, foreign)
				if foreign.R == nil {
					foreign.R = &personR{}
				}
				foreign.R.Company = local
				break
			}
		}
	}

	return nil
}

// LoadProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (companyL) LoadProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompany interface{}, mods queries.Applicator) error {
	var slice []*Company
	var object *Company

	if singular {
		var ok bool
		object, ok = maybeCompany.(*Company)
		if !ok {
			object = new(Company)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompany))
			}
		}
	} else {
		s, ok := maybeCompany.(*[]*Company)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompany))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.products`),
		qm.WhereIn(`alpha.products.company_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load products")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if singular {
		object.R.Products = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productR{}
			}
			foreign.R.Company = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CompanyID {
				local.R.Products = append(local.R.Products, foreign)
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.Company = local
				break
			}
		}
	}

	return nil
}

// LoadRevokerSalesorderCancellations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (companyL) LoadRevokerSalesorderCancellations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompany interface{}, mods queries.Applicator) error {
	var slice []*Company
	var object *Company

	if singular {
		var ok bool
		object, ok = maybeCompany.(*Company)
		if !ok {
			object = new(Company)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompany))
			}
		}
	} else {
		s, ok := maybeCompany.(*[]*Company)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompany))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.salesorder_cancellations`),
		qm.WhereIn(`alpha.salesorder_cancellations.revoker_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load salesorder_cancellations")
	}

	var resultSlice []*SalesorderCancellation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice salesorder_cancellations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on salesorder_cancellations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for salesorder_cancellations")
	}

	if singular {
		object.R.RevokerSalesorderCancellations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &salesorderCancellationR{}
			}
			foreign.R.Revoker = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RevokerID {
				local.R.RevokerSalesorderCancellations = append(local.R.RevokerSalesorderCancellations, foreign)
				if foreign.R == nil {
					foreign.R = &salesorderCancellationR{}
				}
				foreign.R.Revoker = local
				break
			}
		}
	}

	return nil
}

// LoadBuyerSalesorders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (companyL) LoadBuyerSalesorders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompany interface{}, mods queries.Applicator) error {
	var slice []*Company
	var object *Company

	if singular {
		var ok bool
		object, ok = maybeCompany.(*Company)
		if !ok {
			object = new(Company)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompany))
			}
		}
	} else {
		s, ok := maybeCompany.(*[]*Company)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompany))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.salesorders`),
		qm.WhereIn(`alpha.salesorders.buyer_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load salesorders")
	}

	var resultSlice []*Salesorder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice salesorders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on salesorders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for salesorders")
	}

	if singular {
		object.R.BuyerSalesorders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &salesorderR{}
			}
			foreign.R.Buyer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BuyerID {
				local.R.BuyerSalesorders = append(local.R.BuyerSalesorders, foreign)
				if foreign.R == nil {
					foreign.R = &salesorderR{}
				}
				foreign.R.Buyer = local
				break
			}
		}
	}

	return nil
}

// LoadSellerSalesorders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (companyL) LoadSellerSalesorders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompany interface{}, mods queries.Applicator) error {
	var slice []*Company
	var object *Company

	if singular {
		var ok bool
		object, ok = maybeCompany.(*Company)
		if !ok {
			object = new(Company)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompany))
			}
		}
	} else {
		s, ok := maybeCompany.(*[]*Company)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompany)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompany))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.salesorders`),
		qm.WhereIn(`alpha.salesorders.seller_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load salesorders")
	}

	var resultSlice []*Salesorder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice salesorders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on salesorders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for salesorders")
	}

	if singular {
		object.R.SellerSalesorders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &salesorderR{}
			}
			foreign.R.Seller = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SellerID {
				local.R.SellerSalesorders = append(local.R.SellerSalesorders, foreign)
				if foreign.R == nil {
					foreign.R = &salesorderR{}
				}
				foreign.R.Seller = local
				break
			}
		}
	}

	return nil
}

// SetCountyG of the company to the related item.
// Sets o.R.County to related.
// Adds o to related.R.Companies.
// Uses the global database handle.
func (o *Company) SetCountyG(ctx context.Context, insert bool, related *County) error {
	return o.SetCounty(ctx, boil.GetContextDB(), insert, related)
}

// SetCounty of the company to the related item.
// Sets o.R.County to related.
// Adds o to related.R.Companies.
func (o *Company) SetCounty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *County) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"companies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"county_id"}),
		strmangle.WhereClause("\"", "\"", 2, companyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CountyID = related.ID
	if o.R == nil {
		o.R = &companyR{
			County: related,
		}
	} else {
		o.R.County = related
	}

	if related.R == nil {
		related.R = &countyR{
			Companies: CompanySlice{o},
		}
	} else {
		related.R.Companies = append(related.R.Companies, o)
	}

	return nil
}

// SetMuniG of the company to the related item.
// Sets o.R.Muni to related.
// Adds o to related.R.Companies.
// Uses the global database handle.
func (o *Company) SetMuniG(ctx context.Context, insert bool, related *Muni) error {
	return o.SetMuni(ctx, boil.GetContextDB(), insert, related)
}

// SetMuni of the company to the related item.
// Sets o.R.Muni to related.
// Adds o to related.R.Companies.
func (o *Company) SetMuni(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Muni) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"companies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"muni_id"}),
		strmangle.WhereClause("\"", "\"", 2, companyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MuniID, related.ID)
	if o.R == nil {
		o.R = &companyR{
			Muni: related,
		}
	} else {
		o.R.Muni = related
	}

	if related.R == nil {
		related.R = &muniR{
			Companies: CompanySlice{o},
		}
	} else {
		related.R.Companies = append(related.R.Companies, o)
	}

	return nil
}

// RemoveMuniG relationship.
// Sets o.R.Muni to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Company) RemoveMuniG(ctx context.Context, related *Muni) error {
	return o.RemoveMuni(ctx, boil.GetContextDB(), related)
}

// RemoveMuni relationship.
// Sets o.R.Muni to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Company) RemoveMuni(ctx context.Context, exec boil.ContextExecutor, related *Muni) error {
	var err error

	queries.SetScanner(&o.MuniID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("muni_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Muni = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Companies {
		if queries.Equal(o.MuniID, ri.MuniID) {
			continue
		}

		ln := len(related.R.Companies)
		if ln > 1 && i < ln-1 {
			related.R.Companies[i] = related.R.Companies[ln-1]
		}
		related.R.Companies = related.R.Companies[:ln-1]
		break
	}
	return nil
}

// SetStateG of the company to the related item.
// Sets o.R.State to related.
// Adds o to related.R.Companies.
// Uses the global database handle.
func (o *Company) SetStateG(ctx context.Context, insert bool, related *State) error {
	return o.SetState(ctx, boil.GetContextDB(), insert, related)
}

// SetState of the company to the related item.
// Sets o.R.State to related.
// Adds o to related.R.Companies.
func (o *Company) SetState(ctx context.Context, exec boil.ContextExecutor, insert bool, related *State) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"companies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"state_id"}),
		strmangle.WhereClause("\"", "\"", 2, companyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StateID = related.ID
	if o.R == nil {
		o.R = &companyR{
			State: related,
		}
	} else {
		o.R.State = related
	}

	if related.R == nil {
		related.R = &stateR{
			Companies: CompanySlice{o},
		}
	} else {
		related.R.Companies = append(related.R.Companies, o)
	}

	return nil
}

// SetStructG of the company to the related item.
// Sets o.R.Struct to related.
// Adds o to related.R.StructCompanies.
// Uses the global database handle.
func (o *Company) SetStructG(ctx context.Context, insert bool, related *BizStruct) error {
	return o.SetStruct(ctx, boil.GetContextDB(), insert, related)
}

// SetStruct of the company to the related item.
// Sets o.R.Struct to related.
// Adds o to related.R.StructCompanies.
func (o *Company) SetStruct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BizStruct) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"companies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"struct_id"}),
		strmangle.WhereClause("\"", "\"", 2, companyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StructID = related.ID
	if o.R == nil {
		o.R = &companyR{
			Struct: related,
		}
	} else {
		o.R.Struct = related
	}

	if related.R == nil {
		related.R = &bizStructR{
			StructCompanies: CompanySlice{o},
		}
	} else {
		related.R.StructCompanies = append(related.R.StructCompanies, o)
	}

	return nil
}

// AddCertOfAuthoritiesG adds the given related objects to the existing relationships
// of the company, optionally inserting them as new records.
// Appends related to o.R.CertOfAuthorities.
// Sets related.R.Company appropriately.
// Uses the global database handle.
func (o *Company) AddCertOfAuthoritiesG(ctx context.Context, insert bool, related ...*CertOfAuthority) error {
	return o.AddCertOfAuthorities(ctx, boil.GetContextDB(), insert, related...)
}

// AddCertOfAuthorities adds the given related objects to the existing relationships
// of the company, optionally inserting them as new records.
// Appends related to o.R.CertOfAuthorities.
// Sets related.R.Company appropriately.
func (o *Company) AddCertOfAuthorities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CertOfAuthority) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CompanyID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"cert_of_authority\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"company_id"}),
				strmangle.WhereClause("\"", "\"", 2, certOfAuthorityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CompanyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &companyR{
			CertOfAuthorities: related,
		}
	} else {
		o.R.CertOfAuthorities = append(o.R.CertOfAuthorities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &certOfAuthorityR{
				Company: o,
			}
		} else {
			rel.R.Company = o
		}
	}
	return nil
}

// AddCommissionsG adds the given related objects to the existing relationships
// of the company, optionally inserting them as new records.
// Appends related to o.R.Commissions.
// Sets related.R.Company appropriately.
// Uses the global database handle.
func (o *Company) AddCommissionsG(ctx context.Context, insert bool, related ...*Commission) error {
	return o.AddCommissions(ctx, boil.GetContextDB(), insert, related...)
}

// AddCommissions adds the given related objects to the existing relationships
// of the company, optionally inserting them as new records.
// Appends related to o.R.Commissions.
// Sets related.R.Company appropriately.
func (o *Company) AddCommissions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Commission) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CompanyID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"commissions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"company_id"}),
				strmangle.WhereClause("\"", "\"", 2, commissionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CompanyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &companyR{
			Commissions: related,
		}
	} else {
		o.R.Commissions = append(o.R.Commissions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &commissionR{
				Company: o,
			}
		} else {
			rel.R.Company = o
		}
	}
	return nil
}

// AddDepotsG adds the given related objects to the existing relationships
// of the company, optionally inserting them as new records.
// Appends related to o.R.Depots.
// Sets related.R.Company appropriately.
// Uses the global database handle.
func (o *Company) AddDepotsG(ctx context.Context, insert bool, related ...*Depot) error {
	return o.AddDepots(ctx, boil.GetContextDB(), insert, related...)
}

// AddDepots adds the given related objects to the existing relationships
// of the company, optionally inserting them as new records.
// Appends related to o.R.Depots.
// Sets related.R.Company appropriately.
func (o *Company) AddDepots(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Depot) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CompanyID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"depots\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"company_id"}),
				strmangle.WhereClause("\"", "\"", 2, depotPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CompanyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &companyR{
			Depots: related,
		}
	} else {
		o.R.Depots = append(o.R.Depots, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &depotR{
				Company: o,
			}
		} else {
			rel.R.Company = o
		}
	}
	return nil
}

// AddOfficesG adds the given related objects to the existing relationships
// of the company, optionally inserting them as new records.
// Appends related to o.R.Offices.
// Sets related.R.Company appropriately.
// Uses the global database handle.
func (o *Company) AddOfficesG(ctx context.Context, insert bool, related ...*Office) error {
	return o.AddOffices(ctx, boil.GetContextDB(), insert, related...)
}

// AddOffices adds the given related objects to the existing relationships
// of the company, optionally inserting them as new records.
// Appends related to o.R.Offices.
// Sets related.R.Company appropriately.
func (o *Company) AddOffices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Office) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CompanyID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"offices\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"company_id"}),
				strmangle.WhereClause("\"", "\"", 2, officePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CompanyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &companyR{
			Offices: related,
		}
	} else {
		o.R.Offices = append(o.R.Offices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &officeR{
				Company: o,
			}
		} else {
			rel.R.Company = o
		}
	}
	return nil
}

// AddClassesG adds the given related objects to the existing relationships
// of the company, optionally inserting them as new records.
// Appends related to o.R.Classes.
// Sets related.R.Companies appropriately.
// Uses the global database handle.
func (o *Company) AddClassesG(ctx context.Context, insert bool, related ...*Class) error {
	return o.AddClasses(ctx, boil.GetContextDB(), insert, related...)
}

// AddClasses adds the given related objects to the existing relationships
// of the company, optionally inserting them as new records.
// Appends related to o.R.Classes.
// Sets related.R.Companies appropriately.
func (o *Company) AddClasses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Class) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"alpha\".\"pairings\" (\"company_id\", \"class_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.Name}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &companyR{
			Classes: related,
		}
	} else {
		o.R.Classes = append(o.R.Classes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &classR{
				Companies: CompanySlice{o},
			}
		} else {
			rel.R.Companies = append(rel.R.Companies, o)
		}
	}
	return nil
}

// SetClassesG removes all previously related items of the
// company replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Companies's Classes accordingly.
// Replaces o.R.Classes with related.
// Sets related.R.Companies's Classes accordingly.
// Uses the global database handle.
func (o *Company) SetClassesG(ctx context.Context, insert bool, related ...*Class) error {
	return o.SetClasses(ctx, boil.GetContextDB(), insert, related...)
}

// SetClasses removes all previously related items of the
// company replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Companies's Classes accordingly.
// Replaces o.R.Classes with related.
// Sets related.R.Companies's Classes accordingly.
func (o *Company) SetClasses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Class) error {
	query := "delete from \"alpha\".\"pairings\" where \"company_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeClassesFromCompaniesSlice(o, related)
	if o.R != nil {
		o.R.Classes = nil
	}

	return o.AddClasses(ctx, exec, insert, related...)
}

// RemoveClassesG relationships from objects passed in.
// Removes related items from R.Classes (uses pointer comparison, removal does not keep order)
// Sets related.R.Companies.
// Uses the global database handle.
func (o *Company) RemoveClassesG(ctx context.Context, related ...*Class) error {
	return o.RemoveClasses(ctx, boil.GetContextDB(), related...)
}

// RemoveClasses relationships from objects passed in.
// Removes related items from R.Classes (uses pointer comparison, removal does not keep order)
// Sets related.R.Companies.
func (o *Company) RemoveClasses(ctx context.Context, exec boil.ContextExecutor, related ...*Class) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"alpha\".\"pairings\" where \"company_id\" = $1 and \"class_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.Name)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeClassesFromCompaniesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Classes {
			if rel != ri {
				continue
			}

			ln := len(o.R.Classes)
			if ln > 1 && i < ln-1 {
				o.R.Classes[i] = o.R.Classes[ln-1]
			}
			o.R.Classes = o.R.Classes[:ln-1]
			break
		}
	}

	return nil
}

func removeClassesFromCompaniesSlice(o *Company, related []*Class) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Companies {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Companies)
			if ln > 1 && i < ln-1 {
				rel.R.Companies[i] = rel.R.Companies[ln-1]
			}
			rel.R.Companies = rel.R.Companies[:ln-1]
			break
		}
	}
}

// AddPersonsG adds the given related objects to the existing relationships
// of the company, optionally inserting them as new records.
// Appends related to o.R.Persons.
// Sets related.R.Company appropriately.
// Uses the global database handle.
func (o *Company) AddPersonsG(ctx context.Context, insert bool, related ...*Person) error {
	return o.AddPersons(ctx, boil.GetContextDB(), insert, related...)
}

// AddPersons adds the given related objects to the existing relationships
// of the company, optionally inserting them as new records.
// Appends related to o.R.Persons.
// Sets related.R.Company appropriately.
func (o *Company) AddPersons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Person) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CompanyID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"persons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"company_id"}),
				strmangle.WhereClause("\"", "\"", 2, personPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CompanyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &companyR{
			Persons: related,
		}
	} else {
		o.R.Persons = append(o.R.Persons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &personR{
				Company: o,
			}
		} else {
			rel.R.Company = o
		}
	}
	return nil
}

// AddProductsG adds the given related objects to the existing relationships
// of the company, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Company appropriately.
// Uses the global database handle.
func (o *Company) AddProductsG(ctx context.Context, insert bool, related ...*Product) error {
	return o.AddProducts(ctx, boil.GetContextDB(), insert, related...)
}

// AddProducts adds the given related objects to the existing relationships
// of the company, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Company appropriately.
func (o *Company) AddProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Product) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CompanyID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"company_id"}),
				strmangle.WhereClause("\"", "\"", 2, productPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CompanyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &companyR{
			Products: related,
		}
	} else {
		o.R.Products = append(o.R.Products, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productR{
				Company: o,
			}
		} else {
			rel.R.Company = o
		}
	}
	return nil
}

// AddRevokerSalesorderCancellationsG adds the given related objects to the existing relationships
// of the company, optionally inserting them as new records.
// Appends related to o.R.RevokerSalesorderCancellations.
// Sets related.R.Revoker appropriately.
// Uses the global database handle.
func (o *Company) AddRevokerSalesorderCancellationsG(ctx context.Context, insert bool, related ...*SalesorderCancellation) error {
	return o.AddRevokerSalesorderCancellations(ctx, boil.GetContextDB(), insert, related...)
}

// AddRevokerSalesorderCancellations adds the given related objects to the existing relationships
// of the company, optionally inserting them as new records.
// Appends related to o.R.RevokerSalesorderCancellations.
// Sets related.R.Revoker appropriately.
func (o *Company) AddRevokerSalesorderCancellations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SalesorderCancellation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RevokerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"salesorder_cancellations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"revoker_id"}),
				strmangle.WhereClause("\"", "\"", 2, salesorderCancellationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.SalesorderID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RevokerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &companyR{
			RevokerSalesorderCancellations: related,
		}
	} else {
		o.R.RevokerSalesorderCancellations = append(o.R.RevokerSalesorderCancellations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &salesorderCancellationR{
				Revoker: o,
			}
		} else {
			rel.R.Revoker = o
		}
	}
	return nil
}

// AddBuyerSalesordersG adds the given related objects to the existing relationships
// of the company, optionally inserting them as new records.
// Appends related to o.R.BuyerSalesorders.
// Sets related.R.Buyer appropriately.
// Uses the global database handle.
func (o *Company) AddBuyerSalesordersG(ctx context.Context, insert bool, related ...*Salesorder) error {
	return o.AddBuyerSalesorders(ctx, boil.GetContextDB(), insert, related...)
}

// AddBuyerSalesorders adds the given related objects to the existing relationships
// of the company, optionally inserting them as new records.
// Appends related to o.R.BuyerSalesorders.
// Sets related.R.Buyer appropriately.
func (o *Company) AddBuyerSalesorders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Salesorder) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BuyerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"salesorders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"buyer_id"}),
				strmangle.WhereClause("\"", "\"", 2, salesorderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BuyerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &companyR{
			BuyerSalesorders: related,
		}
	} else {
		o.R.BuyerSalesorders = append(o.R.BuyerSalesorders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &salesorderR{
				Buyer: o,
			}
		} else {
			rel.R.Buyer = o
		}
	}
	return nil
}

// AddSellerSalesordersG adds the given related objects to the existing relationships
// of the company, optionally inserting them as new records.
// Appends related to o.R.SellerSalesorders.
// Sets related.R.Seller appropriately.
// Uses the global database handle.
func (o *Company) AddSellerSalesordersG(ctx context.Context, insert bool, related ...*Salesorder) error {
	return o.AddSellerSalesorders(ctx, boil.GetContextDB(), insert, related...)
}

// AddSellerSalesorders adds the given related objects to the existing relationships
// of the company, optionally inserting them as new records.
// Appends related to o.R.SellerSalesorders.
// Sets related.R.Seller appropriately.
func (o *Company) AddSellerSalesorders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Salesorder) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SellerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"salesorders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"seller_id"}),
				strmangle.WhereClause("\"", "\"", 2, salesorderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SellerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &companyR{
			SellerSalesorders: related,
		}
	} else {
		o.R.SellerSalesorders = append(o.R.SellerSalesorders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &salesorderR{
				Seller: o,
			}
		} else {
			rel.R.Seller = o
		}
	}
	return nil
}

// Companies retrieves all the records using an executor.
func Companies(mods ...qm.QueryMod) companyQuery {
	mods = append(mods, qm.From("\"alpha\".\"companies\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"companies\".*"})
	}

	return companyQuery{q}
}

// FindCompanyG retrieves a single record by ID.
func FindCompanyG(ctx context.Context, iD int, selectCols ...string) (*Company, error) {
	return FindCompany(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindCompany retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCompany(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Company, error) {
	companyObj := &Company{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"companies\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, companyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from companies")
	}

	return companyObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Company) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Company) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no companies provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(companyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	companyInsertCacheMut.RLock()
	cache, cached := companyInsertCache[key]
	companyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			companyAllColumns,
			companyColumnsWithDefault,
			companyColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, companyGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(companyType, companyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(companyType, companyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"companies\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"companies\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into companies")
	}

	if !cached {
		companyInsertCacheMut.Lock()
		companyInsertCache[key] = cache
		companyInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Company record using the global executor.
// See Update for more documentation.
func (o *Company) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Company.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Company) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	companyUpdateCacheMut.RLock()
	cache, cached := companyUpdateCache[key]
	companyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			companyAllColumns,
			companyPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, companyGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update companies, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"companies\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, companyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(companyType, companyMapping, append(wl, companyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update companies row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for companies")
	}

	if !cached {
		companyUpdateCacheMut.Lock()
		companyUpdateCache[key] = cache
		companyUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q companyQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q companyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for companies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for companies")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CompanySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CompanySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"companies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, companyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in company slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all company")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Company) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Company) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no companies provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(companyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	companyUpsertCacheMut.RLock()
	cache, cached := companyUpsertCache[key]
	companyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			companyAllColumns,
			companyColumnsWithDefault,
			companyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			companyAllColumns,
			companyPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, companyGeneratedColumns)
		update = strmangle.SetComplement(update, companyGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert companies, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(companyPrimaryKeyColumns))
			copy(conflict, companyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"companies\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(companyType, companyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(companyType, companyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert companies")
	}

	if !cached {
		companyUpsertCacheMut.Lock()
		companyUpsertCache[key] = cache
		companyUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single Company record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Company) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Company record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Company) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Company provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), companyPrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"companies\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from companies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for companies")
	}

	return rowsAff, nil
}

func (q companyQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q companyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no companyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from companies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for companies")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CompanySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CompanySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"companies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, companyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from company slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for companies")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Company) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Company provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Company) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCompany(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CompanySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty CompanySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CompanySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CompanySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"companies\".* FROM \"alpha\".\"companies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, companyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CompanySlice")
	}

	*o = slice

	return nil
}

// CompanyExistsG checks if the Company row exists.
func CompanyExistsG(ctx context.Context, iD int) (bool, error) {
	return CompanyExists(ctx, boil.GetContextDB(), iD)
}

// CompanyExists checks if the Company row exists.
func CompanyExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"companies\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if companies exists")
	}

	return exists, nil
}
