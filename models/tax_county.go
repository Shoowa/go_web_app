// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// TaxCounty is an object representing the database table.
type TaxCounty struct {
	ID         int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	CountyID   int           `boil:"county_id" json:"county_id" toml:"county_id" yaml:"county_id"`
	CategoryID null.Int      `boil:"category_id" json:"category_id,omitempty" toml:"category_id" yaml:"category_id,omitempty"`
	Since      time.Time     `boil:"since" json:"since" toml:"since" yaml:"since"`
	Rate       types.Decimal `boil:"rate" json:"rate" toml:"rate" yaml:"rate"`

	R *taxCountyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L taxCountyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TaxCountyColumns = struct {
	ID         string
	CountyID   string
	CategoryID string
	Since      string
	Rate       string
}{
	ID:         "id",
	CountyID:   "county_id",
	CategoryID: "category_id",
	Since:      "since",
	Rate:       "rate",
}

var TaxCountyTableColumns = struct {
	ID         string
	CountyID   string
	CategoryID string
	Since      string
	Rate       string
}{
	ID:         "tax_county.id",
	CountyID:   "tax_county.county_id",
	CategoryID: "tax_county.category_id",
	Since:      "tax_county.since",
	Rate:       "tax_county.rate",
}

// Generated where

var TaxCountyWhere = struct {
	ID         whereHelperint
	CountyID   whereHelperint
	CategoryID whereHelpernull_Int
	Since      whereHelpertime_Time
	Rate       whereHelpertypes_Decimal
}{
	ID:         whereHelperint{field: "\"alpha\".\"tax_county\".\"id\""},
	CountyID:   whereHelperint{field: "\"alpha\".\"tax_county\".\"county_id\""},
	CategoryID: whereHelpernull_Int{field: "\"alpha\".\"tax_county\".\"category_id\""},
	Since:      whereHelpertime_Time{field: "\"alpha\".\"tax_county\".\"since\""},
	Rate:       whereHelpertypes_Decimal{field: "\"alpha\".\"tax_county\".\"rate\""},
}

// TaxCountyRels is where relationship names are stored.
var TaxCountyRels = struct {
	Category string
	County   string
}{
	Category: "Category",
	County:   "County",
}

// taxCountyR is where relationships are stored.
type taxCountyR struct {
	Category *Category `boil:"Category" json:"Category" toml:"Category" yaml:"Category"`
	County   *County   `boil:"County" json:"County" toml:"County" yaml:"County"`
}

// NewStruct creates a new relationship struct
func (*taxCountyR) NewStruct() *taxCountyR {
	return &taxCountyR{}
}

func (r *taxCountyR) GetCategory() *Category {
	if r == nil {
		return nil
	}
	return r.Category
}

func (r *taxCountyR) GetCounty() *County {
	if r == nil {
		return nil
	}
	return r.County
}

// taxCountyL is where Load methods for each relationship are stored.
type taxCountyL struct{}

var (
	taxCountyAllColumns            = []string{"id", "county_id", "category_id", "since", "rate"}
	taxCountyColumnsWithoutDefault = []string{"county_id", "since", "rate"}
	taxCountyColumnsWithDefault    = []string{"id", "category_id"}
	taxCountyPrimaryKeyColumns     = []string{"id"}
	taxCountyGeneratedColumns      = []string{"id"}
)

type (
	// TaxCountySlice is an alias for a slice of pointers to TaxCounty.
	// This should almost always be used instead of []TaxCounty.
	TaxCountySlice []*TaxCounty

	taxCountyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	taxCountyType                 = reflect.TypeOf(&TaxCounty{})
	taxCountyMapping              = queries.MakeStructMapping(taxCountyType)
	taxCountyPrimaryKeyMapping, _ = queries.BindMapping(taxCountyType, taxCountyMapping, taxCountyPrimaryKeyColumns)
	taxCountyInsertCacheMut       sync.RWMutex
	taxCountyInsertCache          = make(map[string]insertCache)
	taxCountyUpdateCacheMut       sync.RWMutex
	taxCountyUpdateCache          = make(map[string]updateCache)
	taxCountyUpsertCacheMut       sync.RWMutex
	taxCountyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single taxCounty record from the query using the global executor.
func (q taxCountyQuery) OneG(ctx context.Context) (*TaxCounty, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single taxCounty record from the query.
func (q taxCountyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TaxCounty, error) {
	o := &TaxCounty{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tax_county")
	}

	return o, nil
}

// AllG returns all TaxCounty records from the query using the global executor.
func (q taxCountyQuery) AllG(ctx context.Context) (TaxCountySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TaxCounty records from the query.
func (q taxCountyQuery) All(ctx context.Context, exec boil.ContextExecutor) (TaxCountySlice, error) {
	var o []*TaxCounty

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TaxCounty slice")
	}

	return o, nil
}

// CountG returns the count of all TaxCounty records in the query using the global executor
func (q taxCountyQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TaxCounty records in the query.
func (q taxCountyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tax_county rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q taxCountyQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q taxCountyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tax_county exists")
	}

	return count > 0, nil
}

// Category pointed to by the foreign key.
func (o *TaxCounty) Category(mods ...qm.QueryMod) categoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	return Categories(queryMods...)
}

// County pointed to by the foreign key.
func (o *TaxCounty) County(mods ...qm.QueryMod) countyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CountyID),
	}

	queryMods = append(queryMods, mods...)

	return Counties(queryMods...)
}

// LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (taxCountyL) LoadCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTaxCounty interface{}, mods queries.Applicator) error {
	var slice []*TaxCounty
	var object *TaxCounty

	if singular {
		var ok bool
		object, ok = maybeTaxCounty.(*TaxCounty)
		if !ok {
			object = new(TaxCounty)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTaxCounty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTaxCounty))
			}
		}
	} else {
		s, ok := maybeTaxCounty.(*[]*TaxCounty)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTaxCounty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTaxCounty))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &taxCountyR{}
		}
		if !queries.IsNil(object.CategoryID) {
			args = append(args, object.CategoryID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taxCountyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CategoryID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CategoryID) {
				args = append(args, obj.CategoryID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.categories`),
		qm.WhereIn(`alpha.categories.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Category")
	}

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categories")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Category = foreign
		if foreign.R == nil {
			foreign.R = &categoryR{}
		}
		foreign.R.TaxCounties = append(foreign.R.TaxCounties, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CategoryID, foreign.ID) {
				local.R.Category = foreign
				if foreign.R == nil {
					foreign.R = &categoryR{}
				}
				foreign.R.TaxCounties = append(foreign.R.TaxCounties, local)
				break
			}
		}
	}

	return nil
}

// LoadCounty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (taxCountyL) LoadCounty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTaxCounty interface{}, mods queries.Applicator) error {
	var slice []*TaxCounty
	var object *TaxCounty

	if singular {
		var ok bool
		object, ok = maybeTaxCounty.(*TaxCounty)
		if !ok {
			object = new(TaxCounty)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTaxCounty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTaxCounty))
			}
		}
	} else {
		s, ok := maybeTaxCounty.(*[]*TaxCounty)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTaxCounty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTaxCounty))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &taxCountyR{}
		}
		args = append(args, object.CountyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taxCountyR{}
			}

			for _, a := range args {
				if a == obj.CountyID {
					continue Outer
				}
			}

			args = append(args, obj.CountyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.county`),
		qm.WhereIn(`alpha.county.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load County")
	}

	var resultSlice []*County
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice County")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for county")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for county")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.County = foreign
		if foreign.R == nil {
			foreign.R = &countyR{}
		}
		foreign.R.TaxCounties = append(foreign.R.TaxCounties, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CountyID == foreign.ID {
				local.R.County = foreign
				if foreign.R == nil {
					foreign.R = &countyR{}
				}
				foreign.R.TaxCounties = append(foreign.R.TaxCounties, local)
				break
			}
		}
	}

	return nil
}

// SetCategoryG of the taxCounty to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.TaxCounties.
// Uses the global database handle.
func (o *TaxCounty) SetCategoryG(ctx context.Context, insert bool, related *Category) error {
	return o.SetCategory(ctx, boil.GetContextDB(), insert, related)
}

// SetCategory of the taxCounty to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.TaxCounties.
func (o *TaxCounty) SetCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Category) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"tax_county\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
		strmangle.WhereClause("\"", "\"", 2, taxCountyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CategoryID, related.ID)
	if o.R == nil {
		o.R = &taxCountyR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &categoryR{
			TaxCounties: TaxCountySlice{o},
		}
	} else {
		related.R.TaxCounties = append(related.R.TaxCounties, o)
	}

	return nil
}

// RemoveCategoryG relationship.
// Sets o.R.Category to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *TaxCounty) RemoveCategoryG(ctx context.Context, related *Category) error {
	return o.RemoveCategory(ctx, boil.GetContextDB(), related)
}

// RemoveCategory relationship.
// Sets o.R.Category to nil.
// Removes o from all passed in related items' relationships struct.
func (o *TaxCounty) RemoveCategory(ctx context.Context, exec boil.ContextExecutor, related *Category) error {
	var err error

	queries.SetScanner(&o.CategoryID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("category_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Category = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TaxCounties {
		if queries.Equal(o.CategoryID, ri.CategoryID) {
			continue
		}

		ln := len(related.R.TaxCounties)
		if ln > 1 && i < ln-1 {
			related.R.TaxCounties[i] = related.R.TaxCounties[ln-1]
		}
		related.R.TaxCounties = related.R.TaxCounties[:ln-1]
		break
	}
	return nil
}

// SetCountyG of the taxCounty to the related item.
// Sets o.R.County to related.
// Adds o to related.R.TaxCounties.
// Uses the global database handle.
func (o *TaxCounty) SetCountyG(ctx context.Context, insert bool, related *County) error {
	return o.SetCounty(ctx, boil.GetContextDB(), insert, related)
}

// SetCounty of the taxCounty to the related item.
// Sets o.R.County to related.
// Adds o to related.R.TaxCounties.
func (o *TaxCounty) SetCounty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *County) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"tax_county\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"county_id"}),
		strmangle.WhereClause("\"", "\"", 2, taxCountyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CountyID = related.ID
	if o.R == nil {
		o.R = &taxCountyR{
			County: related,
		}
	} else {
		o.R.County = related
	}

	if related.R == nil {
		related.R = &countyR{
			TaxCounties: TaxCountySlice{o},
		}
	} else {
		related.R.TaxCounties = append(related.R.TaxCounties, o)
	}

	return nil
}

// TaxCounties retrieves all the records using an executor.
func TaxCounties(mods ...qm.QueryMod) taxCountyQuery {
	mods = append(mods, qm.From("\"alpha\".\"tax_county\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"tax_county\".*"})
	}

	return taxCountyQuery{q}
}

// FindTaxCountyG retrieves a single record by ID.
func FindTaxCountyG(ctx context.Context, iD int, selectCols ...string) (*TaxCounty, error) {
	return FindTaxCounty(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTaxCounty retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTaxCounty(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TaxCounty, error) {
	taxCountyObj := &TaxCounty{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"tax_county\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, taxCountyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tax_county")
	}

	return taxCountyObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TaxCounty) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TaxCounty) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tax_county provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(taxCountyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	taxCountyInsertCacheMut.RLock()
	cache, cached := taxCountyInsertCache[key]
	taxCountyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			taxCountyAllColumns,
			taxCountyColumnsWithDefault,
			taxCountyColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, taxCountyGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(taxCountyType, taxCountyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(taxCountyType, taxCountyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"tax_county\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"tax_county\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tax_county")
	}

	if !cached {
		taxCountyInsertCacheMut.Lock()
		taxCountyInsertCache[key] = cache
		taxCountyInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single TaxCounty record using the global executor.
// See Update for more documentation.
func (o *TaxCounty) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the TaxCounty.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TaxCounty) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	taxCountyUpdateCacheMut.RLock()
	cache, cached := taxCountyUpdateCache[key]
	taxCountyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			taxCountyAllColumns,
			taxCountyPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, taxCountyGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tax_county, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"tax_county\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, taxCountyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(taxCountyType, taxCountyMapping, append(wl, taxCountyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tax_county row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tax_county")
	}

	if !cached {
		taxCountyUpdateCacheMut.Lock()
		taxCountyUpdateCache[key] = cache
		taxCountyUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q taxCountyQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q taxCountyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tax_county")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tax_county")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TaxCountySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TaxCountySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taxCountyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"tax_county\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, taxCountyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in taxCounty slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all taxCounty")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TaxCounty) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TaxCounty) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tax_county provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(taxCountyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	taxCountyUpsertCacheMut.RLock()
	cache, cached := taxCountyUpsertCache[key]
	taxCountyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			taxCountyAllColumns,
			taxCountyColumnsWithDefault,
			taxCountyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			taxCountyAllColumns,
			taxCountyPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, taxCountyGeneratedColumns)
		update = strmangle.SetComplement(update, taxCountyGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert tax_county, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(taxCountyPrimaryKeyColumns))
			copy(conflict, taxCountyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"tax_county\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(taxCountyType, taxCountyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(taxCountyType, taxCountyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert tax_county")
	}

	if !cached {
		taxCountyUpsertCacheMut.Lock()
		taxCountyUpsertCache[key] = cache
		taxCountyUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single TaxCounty record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TaxCounty) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single TaxCounty record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TaxCounty) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TaxCounty provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), taxCountyPrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"tax_county\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tax_county")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tax_county")
	}

	return rowsAff, nil
}

func (q taxCountyQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q taxCountyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no taxCountyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tax_county")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tax_county")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TaxCountySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TaxCountySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taxCountyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"tax_county\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, taxCountyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from taxCounty slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tax_county")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TaxCounty) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no TaxCounty provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TaxCounty) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTaxCounty(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TaxCountySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty TaxCountySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TaxCountySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TaxCountySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taxCountyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"tax_county\".* FROM \"alpha\".\"tax_county\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, taxCountyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TaxCountySlice")
	}

	*o = slice

	return nil
}

// TaxCountyExistsG checks if the TaxCounty row exists.
func TaxCountyExistsG(ctx context.Context, iD int) (bool, error) {
	return TaxCountyExists(ctx, boil.GetContextDB(), iD)
}

// TaxCountyExists checks if the TaxCounty row exists.
func TaxCountyExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"tax_county\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tax_county exists")
	}

	return exists, nil
}
