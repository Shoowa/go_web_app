// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DeliveryReason is an object representing the database table.
type DeliveryReason struct {
	ID   int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`

	R *deliveryReasonR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deliveryReasonL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeliveryReasonColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

var DeliveryReasonTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "delivery_reasons.id",
	Name: "delivery_reasons.name",
}

// Generated where

var DeliveryReasonWhere = struct {
	ID   whereHelperint
	Name whereHelpernull_String
}{
	ID:   whereHelperint{field: "\"alpha\".\"delivery_reasons\".\"id\""},
	Name: whereHelpernull_String{field: "\"alpha\".\"delivery_reasons\".\"name\""},
}

// DeliveryReasonRels is where relationship names are stored.
var DeliveryReasonRels = struct {
	ReasonDeliveryComplaints string
}{
	ReasonDeliveryComplaints: "ReasonDeliveryComplaints",
}

// deliveryReasonR is where relationships are stored.
type deliveryReasonR struct {
	ReasonDeliveryComplaints DeliveryComplaintSlice `boil:"ReasonDeliveryComplaints" json:"ReasonDeliveryComplaints" toml:"ReasonDeliveryComplaints" yaml:"ReasonDeliveryComplaints"`
}

// NewStruct creates a new relationship struct
func (*deliveryReasonR) NewStruct() *deliveryReasonR {
	return &deliveryReasonR{}
}

func (r *deliveryReasonR) GetReasonDeliveryComplaints() DeliveryComplaintSlice {
	if r == nil {
		return nil
	}
	return r.ReasonDeliveryComplaints
}

// deliveryReasonL is where Load methods for each relationship are stored.
type deliveryReasonL struct{}

var (
	deliveryReasonAllColumns            = []string{"id", "name"}
	deliveryReasonColumnsWithoutDefault = []string{}
	deliveryReasonColumnsWithDefault    = []string{"id", "name"}
	deliveryReasonPrimaryKeyColumns     = []string{"id"}
	deliveryReasonGeneratedColumns      = []string{"id"}
)

type (
	// DeliveryReasonSlice is an alias for a slice of pointers to DeliveryReason.
	// This should almost always be used instead of []DeliveryReason.
	DeliveryReasonSlice []*DeliveryReason

	deliveryReasonQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deliveryReasonType                 = reflect.TypeOf(&DeliveryReason{})
	deliveryReasonMapping              = queries.MakeStructMapping(deliveryReasonType)
	deliveryReasonPrimaryKeyMapping, _ = queries.BindMapping(deliveryReasonType, deliveryReasonMapping, deliveryReasonPrimaryKeyColumns)
	deliveryReasonInsertCacheMut       sync.RWMutex
	deliveryReasonInsertCache          = make(map[string]insertCache)
	deliveryReasonUpdateCacheMut       sync.RWMutex
	deliveryReasonUpdateCache          = make(map[string]updateCache)
	deliveryReasonUpsertCacheMut       sync.RWMutex
	deliveryReasonUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single deliveryReason record from the query using the global executor.
func (q deliveryReasonQuery) OneG(ctx context.Context) (*DeliveryReason, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single deliveryReason record from the query.
func (q deliveryReasonQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeliveryReason, error) {
	o := &DeliveryReason{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for delivery_reasons")
	}

	return o, nil
}

// AllG returns all DeliveryReason records from the query using the global executor.
func (q deliveryReasonQuery) AllG(ctx context.Context) (DeliveryReasonSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all DeliveryReason records from the query.
func (q deliveryReasonQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeliveryReasonSlice, error) {
	var o []*DeliveryReason

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DeliveryReason slice")
	}

	return o, nil
}

// CountG returns the count of all DeliveryReason records in the query using the global executor
func (q deliveryReasonQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all DeliveryReason records in the query.
func (q deliveryReasonQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count delivery_reasons rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q deliveryReasonQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q deliveryReasonQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if delivery_reasons exists")
	}

	return count > 0, nil
}

// ReasonDeliveryComplaints retrieves all the delivery_complaint's DeliveryComplaints with an executor via reason_id column.
func (o *DeliveryReason) ReasonDeliveryComplaints(mods ...qm.QueryMod) deliveryComplaintQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"delivery_complaints\".\"reason_id\"=?", o.ID),
	)

	return DeliveryComplaints(queryMods...)
}

// LoadReasonDeliveryComplaints allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (deliveryReasonL) LoadReasonDeliveryComplaints(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeliveryReason interface{}, mods queries.Applicator) error {
	var slice []*DeliveryReason
	var object *DeliveryReason

	if singular {
		var ok bool
		object, ok = maybeDeliveryReason.(*DeliveryReason)
		if !ok {
			object = new(DeliveryReason)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeliveryReason)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeliveryReason))
			}
		}
	} else {
		s, ok := maybeDeliveryReason.(*[]*DeliveryReason)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeliveryReason)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeliveryReason))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deliveryReasonR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryReasonR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.delivery_complaints`),
		qm.WhereIn(`alpha.delivery_complaints.reason_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load delivery_complaints")
	}

	var resultSlice []*DeliveryComplaint
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice delivery_complaints")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on delivery_complaints")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for delivery_complaints")
	}

	if singular {
		object.R.ReasonDeliveryComplaints = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deliveryComplaintR{}
			}
			foreign.R.Reason = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ReasonID) {
				local.R.ReasonDeliveryComplaints = append(local.R.ReasonDeliveryComplaints, foreign)
				if foreign.R == nil {
					foreign.R = &deliveryComplaintR{}
				}
				foreign.R.Reason = local
				break
			}
		}
	}

	return nil
}

// AddReasonDeliveryComplaintsG adds the given related objects to the existing relationships
// of the delivery_reason, optionally inserting them as new records.
// Appends related to o.R.ReasonDeliveryComplaints.
// Sets related.R.Reason appropriately.
// Uses the global database handle.
func (o *DeliveryReason) AddReasonDeliveryComplaintsG(ctx context.Context, insert bool, related ...*DeliveryComplaint) error {
	return o.AddReasonDeliveryComplaints(ctx, boil.GetContextDB(), insert, related...)
}

// AddReasonDeliveryComplaints adds the given related objects to the existing relationships
// of the delivery_reason, optionally inserting them as new records.
// Appends related to o.R.ReasonDeliveryComplaints.
// Sets related.R.Reason appropriately.
func (o *DeliveryReason) AddReasonDeliveryComplaints(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DeliveryComplaint) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ReasonID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"delivery_complaints\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"reason_id"}),
				strmangle.WhereClause("\"", "\"", 2, deliveryComplaintPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ReasonID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &deliveryReasonR{
			ReasonDeliveryComplaints: related,
		}
	} else {
		o.R.ReasonDeliveryComplaints = append(o.R.ReasonDeliveryComplaints, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deliveryComplaintR{
				Reason: o,
			}
		} else {
			rel.R.Reason = o
		}
	}
	return nil
}

// SetReasonDeliveryComplaintsG removes all previously related items of the
// delivery_reason replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Reason's ReasonDeliveryComplaints accordingly.
// Replaces o.R.ReasonDeliveryComplaints with related.
// Sets related.R.Reason's ReasonDeliveryComplaints accordingly.
// Uses the global database handle.
func (o *DeliveryReason) SetReasonDeliveryComplaintsG(ctx context.Context, insert bool, related ...*DeliveryComplaint) error {
	return o.SetReasonDeliveryComplaints(ctx, boil.GetContextDB(), insert, related...)
}

// SetReasonDeliveryComplaints removes all previously related items of the
// delivery_reason replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Reason's ReasonDeliveryComplaints accordingly.
// Replaces o.R.ReasonDeliveryComplaints with related.
// Sets related.R.Reason's ReasonDeliveryComplaints accordingly.
func (o *DeliveryReason) SetReasonDeliveryComplaints(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DeliveryComplaint) error {
	query := "update \"alpha\".\"delivery_complaints\" set \"reason_id\" = null where \"reason_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ReasonDeliveryComplaints {
			queries.SetScanner(&rel.ReasonID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Reason = nil
		}
		o.R.ReasonDeliveryComplaints = nil
	}

	return o.AddReasonDeliveryComplaints(ctx, exec, insert, related...)
}

// RemoveReasonDeliveryComplaintsG relationships from objects passed in.
// Removes related items from R.ReasonDeliveryComplaints (uses pointer comparison, removal does not keep order)
// Sets related.R.Reason.
// Uses the global database handle.
func (o *DeliveryReason) RemoveReasonDeliveryComplaintsG(ctx context.Context, related ...*DeliveryComplaint) error {
	return o.RemoveReasonDeliveryComplaints(ctx, boil.GetContextDB(), related...)
}

// RemoveReasonDeliveryComplaints relationships from objects passed in.
// Removes related items from R.ReasonDeliveryComplaints (uses pointer comparison, removal does not keep order)
// Sets related.R.Reason.
func (o *DeliveryReason) RemoveReasonDeliveryComplaints(ctx context.Context, exec boil.ContextExecutor, related ...*DeliveryComplaint) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ReasonID, nil)
		if rel.R != nil {
			rel.R.Reason = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("reason_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ReasonDeliveryComplaints {
			if rel != ri {
				continue
			}

			ln := len(o.R.ReasonDeliveryComplaints)
			if ln > 1 && i < ln-1 {
				o.R.ReasonDeliveryComplaints[i] = o.R.ReasonDeliveryComplaints[ln-1]
			}
			o.R.ReasonDeliveryComplaints = o.R.ReasonDeliveryComplaints[:ln-1]
			break
		}
	}

	return nil
}

// DeliveryReasons retrieves all the records using an executor.
func DeliveryReasons(mods ...qm.QueryMod) deliveryReasonQuery {
	mods = append(mods, qm.From("\"alpha\".\"delivery_reasons\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"delivery_reasons\".*"})
	}

	return deliveryReasonQuery{q}
}

// FindDeliveryReasonG retrieves a single record by ID.
func FindDeliveryReasonG(ctx context.Context, iD int, selectCols ...string) (*DeliveryReason, error) {
	return FindDeliveryReason(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindDeliveryReason retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeliveryReason(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DeliveryReason, error) {
	deliveryReasonObj := &DeliveryReason{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"delivery_reasons\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, deliveryReasonObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from delivery_reasons")
	}

	return deliveryReasonObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *DeliveryReason) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeliveryReason) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no delivery_reasons provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(deliveryReasonColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deliveryReasonInsertCacheMut.RLock()
	cache, cached := deliveryReasonInsertCache[key]
	deliveryReasonInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deliveryReasonAllColumns,
			deliveryReasonColumnsWithDefault,
			deliveryReasonColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, deliveryReasonGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(deliveryReasonType, deliveryReasonMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deliveryReasonType, deliveryReasonMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"delivery_reasons\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"delivery_reasons\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into delivery_reasons")
	}

	if !cached {
		deliveryReasonInsertCacheMut.Lock()
		deliveryReasonInsertCache[key] = cache
		deliveryReasonInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single DeliveryReason record using the global executor.
// See Update for more documentation.
func (o *DeliveryReason) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the DeliveryReason.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeliveryReason) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	deliveryReasonUpdateCacheMut.RLock()
	cache, cached := deliveryReasonUpdateCache[key]
	deliveryReasonUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deliveryReasonAllColumns,
			deliveryReasonPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, deliveryReasonGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update delivery_reasons, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"delivery_reasons\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, deliveryReasonPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deliveryReasonType, deliveryReasonMapping, append(wl, deliveryReasonPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update delivery_reasons row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for delivery_reasons")
	}

	if !cached {
		deliveryReasonUpdateCacheMut.Lock()
		deliveryReasonUpdateCache[key] = cache
		deliveryReasonUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q deliveryReasonQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q deliveryReasonQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for delivery_reasons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for delivery_reasons")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DeliveryReasonSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeliveryReasonSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryReasonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"delivery_reasons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, deliveryReasonPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in deliveryReason slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all deliveryReason")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *DeliveryReason) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeliveryReason) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no delivery_reasons provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(deliveryReasonColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deliveryReasonUpsertCacheMut.RLock()
	cache, cached := deliveryReasonUpsertCache[key]
	deliveryReasonUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			deliveryReasonAllColumns,
			deliveryReasonColumnsWithDefault,
			deliveryReasonColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deliveryReasonAllColumns,
			deliveryReasonPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, deliveryReasonGeneratedColumns)
		update = strmangle.SetComplement(update, deliveryReasonGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert delivery_reasons, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(deliveryReasonPrimaryKeyColumns))
			copy(conflict, deliveryReasonPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"delivery_reasons\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(deliveryReasonType, deliveryReasonMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deliveryReasonType, deliveryReasonMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert delivery_reasons")
	}

	if !cached {
		deliveryReasonUpsertCacheMut.Lock()
		deliveryReasonUpsertCache[key] = cache
		deliveryReasonUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single DeliveryReason record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *DeliveryReason) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single DeliveryReason record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeliveryReason) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DeliveryReason provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), deliveryReasonPrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"delivery_reasons\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from delivery_reasons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for delivery_reasons")
	}

	return rowsAff, nil
}

func (q deliveryReasonQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q deliveryReasonQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no deliveryReasonQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from delivery_reasons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for delivery_reasons")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DeliveryReasonSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeliveryReasonSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryReasonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"delivery_reasons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deliveryReasonPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from deliveryReason slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for delivery_reasons")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *DeliveryReason) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no DeliveryReason provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeliveryReason) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeliveryReason(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeliveryReasonSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty DeliveryReasonSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeliveryReasonSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeliveryReasonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryReasonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"delivery_reasons\".* FROM \"alpha\".\"delivery_reasons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deliveryReasonPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DeliveryReasonSlice")
	}

	*o = slice

	return nil
}

// DeliveryReasonExistsG checks if the DeliveryReason row exists.
func DeliveryReasonExistsG(ctx context.Context, iD int) (bool, error) {
	return DeliveryReasonExists(ctx, boil.GetContextDB(), iD)
}

// DeliveryReasonExists checks if the DeliveryReason row exists.
func DeliveryReasonExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"delivery_reasons\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if delivery_reasons exists")
	}

	return exists, nil
}
