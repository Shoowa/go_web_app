// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VerifiedByEmail is an object representing the database table.
type VerifiedByEmail struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	SubjectID int       `boil:"subject_id" json:"subject_id" toml:"subject_id" yaml:"subject_id"`
	Sent      time.Time `boil:"sent" json:"sent" toml:"sent" yaml:"sent"`
	Response  null.Time `boil:"response" json:"response,omitempty" toml:"response" yaml:"response,omitempty"`

	R *verifiedByEmailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L verifiedByEmailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VerifiedByEmailColumns = struct {
	ID        string
	SubjectID string
	Sent      string
	Response  string
}{
	ID:        "id",
	SubjectID: "subject_id",
	Sent:      "sent",
	Response:  "response",
}

var VerifiedByEmailTableColumns = struct {
	ID        string
	SubjectID string
	Sent      string
	Response  string
}{
	ID:        "verified_by_email.id",
	SubjectID: "verified_by_email.subject_id",
	Sent:      "verified_by_email.sent",
	Response:  "verified_by_email.response",
}

// Generated where

var VerifiedByEmailWhere = struct {
	ID        whereHelperint
	SubjectID whereHelperint
	Sent      whereHelpertime_Time
	Response  whereHelpernull_Time
}{
	ID:        whereHelperint{field: "\"alpha\".\"verified_by_email\".\"id\""},
	SubjectID: whereHelperint{field: "\"alpha\".\"verified_by_email\".\"subject_id\""},
	Sent:      whereHelpertime_Time{field: "\"alpha\".\"verified_by_email\".\"sent\""},
	Response:  whereHelpernull_Time{field: "\"alpha\".\"verified_by_email\".\"response\""},
}

// VerifiedByEmailRels is where relationship names are stored.
var VerifiedByEmailRels = struct {
	Subject string
}{
	Subject: "Subject",
}

// verifiedByEmailR is where relationships are stored.
type verifiedByEmailR struct {
	Subject *Person `boil:"Subject" json:"Subject" toml:"Subject" yaml:"Subject"`
}

// NewStruct creates a new relationship struct
func (*verifiedByEmailR) NewStruct() *verifiedByEmailR {
	return &verifiedByEmailR{}
}

func (r *verifiedByEmailR) GetSubject() *Person {
	if r == nil {
		return nil
	}
	return r.Subject
}

// verifiedByEmailL is where Load methods for each relationship are stored.
type verifiedByEmailL struct{}

var (
	verifiedByEmailAllColumns            = []string{"id", "subject_id", "sent", "response"}
	verifiedByEmailColumnsWithoutDefault = []string{"subject_id"}
	verifiedByEmailColumnsWithDefault    = []string{"id", "sent", "response"}
	verifiedByEmailPrimaryKeyColumns     = []string{"id"}
	verifiedByEmailGeneratedColumns      = []string{"id"}
)

type (
	// VerifiedByEmailSlice is an alias for a slice of pointers to VerifiedByEmail.
	// This should almost always be used instead of []VerifiedByEmail.
	VerifiedByEmailSlice []*VerifiedByEmail

	verifiedByEmailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	verifiedByEmailType                 = reflect.TypeOf(&VerifiedByEmail{})
	verifiedByEmailMapping              = queries.MakeStructMapping(verifiedByEmailType)
	verifiedByEmailPrimaryKeyMapping, _ = queries.BindMapping(verifiedByEmailType, verifiedByEmailMapping, verifiedByEmailPrimaryKeyColumns)
	verifiedByEmailInsertCacheMut       sync.RWMutex
	verifiedByEmailInsertCache          = make(map[string]insertCache)
	verifiedByEmailUpdateCacheMut       sync.RWMutex
	verifiedByEmailUpdateCache          = make(map[string]updateCache)
	verifiedByEmailUpsertCacheMut       sync.RWMutex
	verifiedByEmailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single verifiedByEmail record from the query using the global executor.
func (q verifiedByEmailQuery) OneG(ctx context.Context) (*VerifiedByEmail, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single verifiedByEmail record from the query.
func (q verifiedByEmailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VerifiedByEmail, error) {
	o := &VerifiedByEmail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for verified_by_email")
	}

	return o, nil
}

// AllG returns all VerifiedByEmail records from the query using the global executor.
func (q verifiedByEmailQuery) AllG(ctx context.Context) (VerifiedByEmailSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all VerifiedByEmail records from the query.
func (q verifiedByEmailQuery) All(ctx context.Context, exec boil.ContextExecutor) (VerifiedByEmailSlice, error) {
	var o []*VerifiedByEmail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VerifiedByEmail slice")
	}

	return o, nil
}

// CountG returns the count of all VerifiedByEmail records in the query using the global executor
func (q verifiedByEmailQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all VerifiedByEmail records in the query.
func (q verifiedByEmailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count verified_by_email rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q verifiedByEmailQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q verifiedByEmailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if verified_by_email exists")
	}

	return count > 0, nil
}

// Subject pointed to by the foreign key.
func (o *VerifiedByEmail) Subject(mods ...qm.QueryMod) personQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SubjectID),
	}

	queryMods = append(queryMods, mods...)

	return Persons(queryMods...)
}

// LoadSubject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (verifiedByEmailL) LoadSubject(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVerifiedByEmail interface{}, mods queries.Applicator) error {
	var slice []*VerifiedByEmail
	var object *VerifiedByEmail

	if singular {
		var ok bool
		object, ok = maybeVerifiedByEmail.(*VerifiedByEmail)
		if !ok {
			object = new(VerifiedByEmail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVerifiedByEmail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVerifiedByEmail))
			}
		}
	} else {
		s, ok := maybeVerifiedByEmail.(*[]*VerifiedByEmail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVerifiedByEmail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVerifiedByEmail))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &verifiedByEmailR{}
		}
		args = append(args, object.SubjectID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &verifiedByEmailR{}
			}

			for _, a := range args {
				if a == obj.SubjectID {
					continue Outer
				}
			}

			args = append(args, obj.SubjectID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.persons`),
		qm.WhereIn(`alpha.persons.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Person")
	}

	var resultSlice []*Person
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Person")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for persons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for persons")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Subject = foreign
		if foreign.R == nil {
			foreign.R = &personR{}
		}
		foreign.R.SubjectVerifiedByEmails = append(foreign.R.SubjectVerifiedByEmails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SubjectID == foreign.ID {
				local.R.Subject = foreign
				if foreign.R == nil {
					foreign.R = &personR{}
				}
				foreign.R.SubjectVerifiedByEmails = append(foreign.R.SubjectVerifiedByEmails, local)
				break
			}
		}
	}

	return nil
}

// SetSubjectG of the verifiedByEmail to the related item.
// Sets o.R.Subject to related.
// Adds o to related.R.SubjectVerifiedByEmails.
// Uses the global database handle.
func (o *VerifiedByEmail) SetSubjectG(ctx context.Context, insert bool, related *Person) error {
	return o.SetSubject(ctx, boil.GetContextDB(), insert, related)
}

// SetSubject of the verifiedByEmail to the related item.
// Sets o.R.Subject to related.
// Adds o to related.R.SubjectVerifiedByEmails.
func (o *VerifiedByEmail) SetSubject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Person) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"verified_by_email\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"subject_id"}),
		strmangle.WhereClause("\"", "\"", 2, verifiedByEmailPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SubjectID = related.ID
	if o.R == nil {
		o.R = &verifiedByEmailR{
			Subject: related,
		}
	} else {
		o.R.Subject = related
	}

	if related.R == nil {
		related.R = &personR{
			SubjectVerifiedByEmails: VerifiedByEmailSlice{o},
		}
	} else {
		related.R.SubjectVerifiedByEmails = append(related.R.SubjectVerifiedByEmails, o)
	}

	return nil
}

// VerifiedByEmails retrieves all the records using an executor.
func VerifiedByEmails(mods ...qm.QueryMod) verifiedByEmailQuery {
	mods = append(mods, qm.From("\"alpha\".\"verified_by_email\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"verified_by_email\".*"})
	}

	return verifiedByEmailQuery{q}
}

// FindVerifiedByEmailG retrieves a single record by ID.
func FindVerifiedByEmailG(ctx context.Context, iD int, selectCols ...string) (*VerifiedByEmail, error) {
	return FindVerifiedByEmail(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindVerifiedByEmail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVerifiedByEmail(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*VerifiedByEmail, error) {
	verifiedByEmailObj := &VerifiedByEmail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"verified_by_email\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, verifiedByEmailObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from verified_by_email")
	}

	return verifiedByEmailObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *VerifiedByEmail) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VerifiedByEmail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no verified_by_email provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(verifiedByEmailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	verifiedByEmailInsertCacheMut.RLock()
	cache, cached := verifiedByEmailInsertCache[key]
	verifiedByEmailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			verifiedByEmailAllColumns,
			verifiedByEmailColumnsWithDefault,
			verifiedByEmailColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, verifiedByEmailGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(verifiedByEmailType, verifiedByEmailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(verifiedByEmailType, verifiedByEmailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"verified_by_email\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"verified_by_email\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into verified_by_email")
	}

	if !cached {
		verifiedByEmailInsertCacheMut.Lock()
		verifiedByEmailInsertCache[key] = cache
		verifiedByEmailInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single VerifiedByEmail record using the global executor.
// See Update for more documentation.
func (o *VerifiedByEmail) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the VerifiedByEmail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VerifiedByEmail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	verifiedByEmailUpdateCacheMut.RLock()
	cache, cached := verifiedByEmailUpdateCache[key]
	verifiedByEmailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			verifiedByEmailAllColumns,
			verifiedByEmailPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, verifiedByEmailGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update verified_by_email, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"verified_by_email\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, verifiedByEmailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(verifiedByEmailType, verifiedByEmailMapping, append(wl, verifiedByEmailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update verified_by_email row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for verified_by_email")
	}

	if !cached {
		verifiedByEmailUpdateCacheMut.Lock()
		verifiedByEmailUpdateCache[key] = cache
		verifiedByEmailUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q verifiedByEmailQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q verifiedByEmailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for verified_by_email")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for verified_by_email")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o VerifiedByEmailSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VerifiedByEmailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), verifiedByEmailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"verified_by_email\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, verifiedByEmailPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in verifiedByEmail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all verifiedByEmail")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *VerifiedByEmail) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VerifiedByEmail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no verified_by_email provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(verifiedByEmailColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	verifiedByEmailUpsertCacheMut.RLock()
	cache, cached := verifiedByEmailUpsertCache[key]
	verifiedByEmailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			verifiedByEmailAllColumns,
			verifiedByEmailColumnsWithDefault,
			verifiedByEmailColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			verifiedByEmailAllColumns,
			verifiedByEmailPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, verifiedByEmailGeneratedColumns)
		update = strmangle.SetComplement(update, verifiedByEmailGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert verified_by_email, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(verifiedByEmailPrimaryKeyColumns))
			copy(conflict, verifiedByEmailPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"verified_by_email\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(verifiedByEmailType, verifiedByEmailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(verifiedByEmailType, verifiedByEmailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert verified_by_email")
	}

	if !cached {
		verifiedByEmailUpsertCacheMut.Lock()
		verifiedByEmailUpsertCache[key] = cache
		verifiedByEmailUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single VerifiedByEmail record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *VerifiedByEmail) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single VerifiedByEmail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VerifiedByEmail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VerifiedByEmail provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), verifiedByEmailPrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"verified_by_email\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from verified_by_email")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for verified_by_email")
	}

	return rowsAff, nil
}

func (q verifiedByEmailQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q verifiedByEmailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no verifiedByEmailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from verified_by_email")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for verified_by_email")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o VerifiedByEmailSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VerifiedByEmailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), verifiedByEmailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"verified_by_email\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, verifiedByEmailPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from verifiedByEmail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for verified_by_email")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *VerifiedByEmail) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no VerifiedByEmail provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VerifiedByEmail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVerifiedByEmail(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VerifiedByEmailSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty VerifiedByEmailSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VerifiedByEmailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VerifiedByEmailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), verifiedByEmailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"verified_by_email\".* FROM \"alpha\".\"verified_by_email\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, verifiedByEmailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VerifiedByEmailSlice")
	}

	*o = slice

	return nil
}

// VerifiedByEmailExistsG checks if the VerifiedByEmail row exists.
func VerifiedByEmailExistsG(ctx context.Context, iD int) (bool, error) {
	return VerifiedByEmailExists(ctx, boil.GetContextDB(), iD)
}

// VerifiedByEmailExists checks if the VerifiedByEmail row exists.
func VerifiedByEmailExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"verified_by_email\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if verified_by_email exists")
	}

	return exists, nil
}
