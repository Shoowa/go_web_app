// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Otp is an object representing the database table.
type Otp struct {
	Email      string `boil:"email" json:"email" toml:"email" yaml:"email"`
	Totpsecret string `boil:"totpsecret" json:"totpsecret" toml:"totpsecret" yaml:"totpsecret"`

	R *otpR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L otpL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OtpColumns = struct {
	Email      string
	Totpsecret string
}{
	Email:      "email",
	Totpsecret: "totpsecret",
}

var OtpTableColumns = struct {
	Email      string
	Totpsecret string
}{
	Email:      "otp.email",
	Totpsecret: "otp.totpsecret",
}

// Generated where

var OtpWhere = struct {
	Email      whereHelperstring
	Totpsecret whereHelperstring
}{
	Email:      whereHelperstring{field: "\"alpha\".\"otp\".\"email\""},
	Totpsecret: whereHelperstring{field: "\"alpha\".\"otp\".\"totpsecret\""},
}

// OtpRels is where relationship names are stored.
var OtpRels = struct {
}{}

// otpR is where relationships are stored.
type otpR struct {
}

// NewStruct creates a new relationship struct
func (*otpR) NewStruct() *otpR {
	return &otpR{}
}

// otpL is where Load methods for each relationship are stored.
type otpL struct{}

var (
	otpAllColumns            = []string{"email", "totpsecret"}
	otpColumnsWithoutDefault = []string{"email", "totpsecret"}
	otpColumnsWithDefault    = []string{}
	otpPrimaryKeyColumns     = []string{"email"}
	otpGeneratedColumns      = []string{}
)

type (
	// OtpSlice is an alias for a slice of pointers to Otp.
	// This should almost always be used instead of []Otp.
	OtpSlice []*Otp

	otpQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	otpType                 = reflect.TypeOf(&Otp{})
	otpMapping              = queries.MakeStructMapping(otpType)
	otpPrimaryKeyMapping, _ = queries.BindMapping(otpType, otpMapping, otpPrimaryKeyColumns)
	otpInsertCacheMut       sync.RWMutex
	otpInsertCache          = make(map[string]insertCache)
	otpUpdateCacheMut       sync.RWMutex
	otpUpdateCache          = make(map[string]updateCache)
	otpUpsertCacheMut       sync.RWMutex
	otpUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single otp record from the query using the global executor.
func (q otpQuery) OneG(ctx context.Context) (*Otp, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single otp record from the query.
func (q otpQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Otp, error) {
	o := &Otp{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for otp")
	}

	return o, nil
}

// AllG returns all Otp records from the query using the global executor.
func (q otpQuery) AllG(ctx context.Context) (OtpSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Otp records from the query.
func (q otpQuery) All(ctx context.Context, exec boil.ContextExecutor) (OtpSlice, error) {
	var o []*Otp

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Otp slice")
	}

	return o, nil
}

// CountG returns the count of all Otp records in the query using the global executor
func (q otpQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Otp records in the query.
func (q otpQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count otp rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q otpQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q otpQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if otp exists")
	}

	return count > 0, nil
}

// Otps retrieves all the records using an executor.
func Otps(mods ...qm.QueryMod) otpQuery {
	mods = append(mods, qm.From("\"alpha\".\"otp\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"otp\".*"})
	}

	return otpQuery{q}
}

// FindOtpG retrieves a single record by ID.
func FindOtpG(ctx context.Context, email string, selectCols ...string) (*Otp, error) {
	return FindOtp(ctx, boil.GetContextDB(), email, selectCols...)
}

// FindOtp retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOtp(ctx context.Context, exec boil.ContextExecutor, email string, selectCols ...string) (*Otp, error) {
	otpObj := &Otp{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"otp\" where \"email\"=$1", sel,
	)

	q := queries.Raw(query, email)

	err := q.Bind(ctx, exec, otpObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from otp")
	}

	return otpObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Otp) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Otp) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no otp provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(otpColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	otpInsertCacheMut.RLock()
	cache, cached := otpInsertCache[key]
	otpInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			otpAllColumns,
			otpColumnsWithDefault,
			otpColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(otpType, otpMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(otpType, otpMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"otp\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"otp\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into otp")
	}

	if !cached {
		otpInsertCacheMut.Lock()
		otpInsertCache[key] = cache
		otpInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Otp record using the global executor.
// See Update for more documentation.
func (o *Otp) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Otp.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Otp) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	otpUpdateCacheMut.RLock()
	cache, cached := otpUpdateCache[key]
	otpUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			otpAllColumns,
			otpPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update otp, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"otp\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, otpPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(otpType, otpMapping, append(wl, otpPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update otp row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for otp")
	}

	if !cached {
		otpUpdateCacheMut.Lock()
		otpUpdateCache[key] = cache
		otpUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q otpQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q otpQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for otp")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for otp")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OtpSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OtpSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), otpPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"otp\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, otpPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in otp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all otp")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Otp) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Otp) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no otp provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(otpColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	otpUpsertCacheMut.RLock()
	cache, cached := otpUpsertCache[key]
	otpUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			otpAllColumns,
			otpColumnsWithDefault,
			otpColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			otpAllColumns,
			otpPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert otp, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(otpPrimaryKeyColumns))
			copy(conflict, otpPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"otp\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(otpType, otpMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(otpType, otpMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert otp")
	}

	if !cached {
		otpUpsertCacheMut.Lock()
		otpUpsertCache[key] = cache
		otpUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single Otp record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Otp) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Otp record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Otp) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Otp provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), otpPrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"otp\" WHERE \"email\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from otp")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for otp")
	}

	return rowsAff, nil
}

func (q otpQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q otpQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no otpQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from otp")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for otp")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o OtpSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OtpSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), otpPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"otp\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, otpPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from otp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for otp")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Otp) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Otp provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Otp) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOtp(ctx, exec, o.Email)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OtpSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty OtpSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OtpSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OtpSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), otpPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"otp\".* FROM \"alpha\".\"otp\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, otpPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OtpSlice")
	}

	*o = slice

	return nil
}

// OtpExistsG checks if the Otp row exists.
func OtpExistsG(ctx context.Context, email string) (bool, error) {
	return OtpExists(ctx, boil.GetContextDB(), email)
}

// OtpExists checks if the Otp row exists.
func OtpExists(ctx context.Context, exec boil.ContextExecutor, email string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"otp\" where \"email\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, email)
	}
	row := exec.QueryRowContext(ctx, sql, email)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if otp exists")
	}

	return exists, nil
}
