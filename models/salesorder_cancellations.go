// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SalesorderCancellation is an object representing the database table.
type SalesorderCancellation struct {
	SalesorderID int       `boil:"salesorder_id" json:"salesorder_id" toml:"salesorder_id" yaml:"salesorder_id"`
	Created      time.Time `boil:"created" json:"created" toml:"created" yaml:"created"`
	RevokerID    int       `boil:"revoker_id" json:"revoker_id" toml:"revoker_id" yaml:"revoker_id"`

	R *salesorderCancellationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L salesorderCancellationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SalesorderCancellationColumns = struct {
	SalesorderID string
	Created      string
	RevokerID    string
}{
	SalesorderID: "salesorder_id",
	Created:      "created",
	RevokerID:    "revoker_id",
}

var SalesorderCancellationTableColumns = struct {
	SalesorderID string
	Created      string
	RevokerID    string
}{
	SalesorderID: "salesorder_cancellations.salesorder_id",
	Created:      "salesorder_cancellations.created",
	RevokerID:    "salesorder_cancellations.revoker_id",
}

// Generated where

var SalesorderCancellationWhere = struct {
	SalesorderID whereHelperint
	Created      whereHelpertime_Time
	RevokerID    whereHelperint
}{
	SalesorderID: whereHelperint{field: "\"alpha\".\"salesorder_cancellations\".\"salesorder_id\""},
	Created:      whereHelpertime_Time{field: "\"alpha\".\"salesorder_cancellations\".\"created\""},
	RevokerID:    whereHelperint{field: "\"alpha\".\"salesorder_cancellations\".\"revoker_id\""},
}

// SalesorderCancellationRels is where relationship names are stored.
var SalesorderCancellationRels = struct {
	Revoker    string
	Salesorder string
}{
	Revoker:    "Revoker",
	Salesorder: "Salesorder",
}

// salesorderCancellationR is where relationships are stored.
type salesorderCancellationR struct {
	Revoker    *Company    `boil:"Revoker" json:"Revoker" toml:"Revoker" yaml:"Revoker"`
	Salesorder *Salesorder `boil:"Salesorder" json:"Salesorder" toml:"Salesorder" yaml:"Salesorder"`
}

// NewStruct creates a new relationship struct
func (*salesorderCancellationR) NewStruct() *salesorderCancellationR {
	return &salesorderCancellationR{}
}

func (r *salesorderCancellationR) GetRevoker() *Company {
	if r == nil {
		return nil
	}
	return r.Revoker
}

func (r *salesorderCancellationR) GetSalesorder() *Salesorder {
	if r == nil {
		return nil
	}
	return r.Salesorder
}

// salesorderCancellationL is where Load methods for each relationship are stored.
type salesorderCancellationL struct{}

var (
	salesorderCancellationAllColumns            = []string{"salesorder_id", "created", "revoker_id"}
	salesorderCancellationColumnsWithoutDefault = []string{"salesorder_id", "revoker_id"}
	salesorderCancellationColumnsWithDefault    = []string{"created"}
	salesorderCancellationPrimaryKeyColumns     = []string{"salesorder_id"}
	salesorderCancellationGeneratedColumns      = []string{}
)

type (
	// SalesorderCancellationSlice is an alias for a slice of pointers to SalesorderCancellation.
	// This should almost always be used instead of []SalesorderCancellation.
	SalesorderCancellationSlice []*SalesorderCancellation

	salesorderCancellationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	salesorderCancellationType                 = reflect.TypeOf(&SalesorderCancellation{})
	salesorderCancellationMapping              = queries.MakeStructMapping(salesorderCancellationType)
	salesorderCancellationPrimaryKeyMapping, _ = queries.BindMapping(salesorderCancellationType, salesorderCancellationMapping, salesorderCancellationPrimaryKeyColumns)
	salesorderCancellationInsertCacheMut       sync.RWMutex
	salesorderCancellationInsertCache          = make(map[string]insertCache)
	salesorderCancellationUpdateCacheMut       sync.RWMutex
	salesorderCancellationUpdateCache          = make(map[string]updateCache)
	salesorderCancellationUpsertCacheMut       sync.RWMutex
	salesorderCancellationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single salesorderCancellation record from the query using the global executor.
func (q salesorderCancellationQuery) OneG(ctx context.Context) (*SalesorderCancellation, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single salesorderCancellation record from the query.
func (q salesorderCancellationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SalesorderCancellation, error) {
	o := &SalesorderCancellation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for salesorder_cancellations")
	}

	return o, nil
}

// AllG returns all SalesorderCancellation records from the query using the global executor.
func (q salesorderCancellationQuery) AllG(ctx context.Context) (SalesorderCancellationSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all SalesorderCancellation records from the query.
func (q salesorderCancellationQuery) All(ctx context.Context, exec boil.ContextExecutor) (SalesorderCancellationSlice, error) {
	var o []*SalesorderCancellation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SalesorderCancellation slice")
	}

	return o, nil
}

// CountG returns the count of all SalesorderCancellation records in the query using the global executor
func (q salesorderCancellationQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all SalesorderCancellation records in the query.
func (q salesorderCancellationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count salesorder_cancellations rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q salesorderCancellationQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q salesorderCancellationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if salesorder_cancellations exists")
	}

	return count > 0, nil
}

// Revoker pointed to by the foreign key.
func (o *SalesorderCancellation) Revoker(mods ...qm.QueryMod) companyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RevokerID),
	}

	queryMods = append(queryMods, mods...)

	return Companies(queryMods...)
}

// Salesorder pointed to by the foreign key.
func (o *SalesorderCancellation) Salesorder(mods ...qm.QueryMod) salesorderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SalesorderID),
	}

	queryMods = append(queryMods, mods...)

	return Salesorders(queryMods...)
}

// LoadRevoker allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (salesorderCancellationL) LoadRevoker(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSalesorderCancellation interface{}, mods queries.Applicator) error {
	var slice []*SalesorderCancellation
	var object *SalesorderCancellation

	if singular {
		var ok bool
		object, ok = maybeSalesorderCancellation.(*SalesorderCancellation)
		if !ok {
			object = new(SalesorderCancellation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSalesorderCancellation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSalesorderCancellation))
			}
		}
	} else {
		s, ok := maybeSalesorderCancellation.(*[]*SalesorderCancellation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSalesorderCancellation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSalesorderCancellation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &salesorderCancellationR{}
		}
		args = append(args, object.RevokerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &salesorderCancellationR{}
			}

			for _, a := range args {
				if a == obj.RevokerID {
					continue Outer
				}
			}

			args = append(args, obj.RevokerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.companies`),
		qm.WhereIn(`alpha.companies.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Company")
	}

	var resultSlice []*Company
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Company")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for companies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for companies")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Revoker = foreign
		if foreign.R == nil {
			foreign.R = &companyR{}
		}
		foreign.R.RevokerSalesorderCancellations = append(foreign.R.RevokerSalesorderCancellations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RevokerID == foreign.ID {
				local.R.Revoker = foreign
				if foreign.R == nil {
					foreign.R = &companyR{}
				}
				foreign.R.RevokerSalesorderCancellations = append(foreign.R.RevokerSalesorderCancellations, local)
				break
			}
		}
	}

	return nil
}

// LoadSalesorder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (salesorderCancellationL) LoadSalesorder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSalesorderCancellation interface{}, mods queries.Applicator) error {
	var slice []*SalesorderCancellation
	var object *SalesorderCancellation

	if singular {
		var ok bool
		object, ok = maybeSalesorderCancellation.(*SalesorderCancellation)
		if !ok {
			object = new(SalesorderCancellation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSalesorderCancellation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSalesorderCancellation))
			}
		}
	} else {
		s, ok := maybeSalesorderCancellation.(*[]*SalesorderCancellation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSalesorderCancellation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSalesorderCancellation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &salesorderCancellationR{}
		}
		args = append(args, object.SalesorderID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &salesorderCancellationR{}
			}

			for _, a := range args {
				if a == obj.SalesorderID {
					continue Outer
				}
			}

			args = append(args, obj.SalesorderID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.salesorders`),
		qm.WhereIn(`alpha.salesorders.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Salesorder")
	}

	var resultSlice []*Salesorder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Salesorder")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for salesorders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for salesorders")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Salesorder = foreign
		if foreign.R == nil {
			foreign.R = &salesorderR{}
		}
		foreign.R.SalesorderCancellation = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SalesorderID == foreign.ID {
				local.R.Salesorder = foreign
				if foreign.R == nil {
					foreign.R = &salesorderR{}
				}
				foreign.R.SalesorderCancellation = local
				break
			}
		}
	}

	return nil
}

// SetRevokerG of the salesorderCancellation to the related item.
// Sets o.R.Revoker to related.
// Adds o to related.R.RevokerSalesorderCancellations.
// Uses the global database handle.
func (o *SalesorderCancellation) SetRevokerG(ctx context.Context, insert bool, related *Company) error {
	return o.SetRevoker(ctx, boil.GetContextDB(), insert, related)
}

// SetRevoker of the salesorderCancellation to the related item.
// Sets o.R.Revoker to related.
// Adds o to related.R.RevokerSalesorderCancellations.
func (o *SalesorderCancellation) SetRevoker(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Company) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"salesorder_cancellations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"revoker_id"}),
		strmangle.WhereClause("\"", "\"", 2, salesorderCancellationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.SalesorderID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RevokerID = related.ID
	if o.R == nil {
		o.R = &salesorderCancellationR{
			Revoker: related,
		}
	} else {
		o.R.Revoker = related
	}

	if related.R == nil {
		related.R = &companyR{
			RevokerSalesorderCancellations: SalesorderCancellationSlice{o},
		}
	} else {
		related.R.RevokerSalesorderCancellations = append(related.R.RevokerSalesorderCancellations, o)
	}

	return nil
}

// SetSalesorderG of the salesorderCancellation to the related item.
// Sets o.R.Salesorder to related.
// Adds o to related.R.SalesorderCancellation.
// Uses the global database handle.
func (o *SalesorderCancellation) SetSalesorderG(ctx context.Context, insert bool, related *Salesorder) error {
	return o.SetSalesorder(ctx, boil.GetContextDB(), insert, related)
}

// SetSalesorder of the salesorderCancellation to the related item.
// Sets o.R.Salesorder to related.
// Adds o to related.R.SalesorderCancellation.
func (o *SalesorderCancellation) SetSalesorder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Salesorder) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"salesorder_cancellations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"salesorder_id"}),
		strmangle.WhereClause("\"", "\"", 2, salesorderCancellationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.SalesorderID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SalesorderID = related.ID
	if o.R == nil {
		o.R = &salesorderCancellationR{
			Salesorder: related,
		}
	} else {
		o.R.Salesorder = related
	}

	if related.R == nil {
		related.R = &salesorderR{
			SalesorderCancellation: o,
		}
	} else {
		related.R.SalesorderCancellation = o
	}

	return nil
}

// SalesorderCancellations retrieves all the records using an executor.
func SalesorderCancellations(mods ...qm.QueryMod) salesorderCancellationQuery {
	mods = append(mods, qm.From("\"alpha\".\"salesorder_cancellations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"salesorder_cancellations\".*"})
	}

	return salesorderCancellationQuery{q}
}

// FindSalesorderCancellationG retrieves a single record by ID.
func FindSalesorderCancellationG(ctx context.Context, salesorderID int, selectCols ...string) (*SalesorderCancellation, error) {
	return FindSalesorderCancellation(ctx, boil.GetContextDB(), salesorderID, selectCols...)
}

// FindSalesorderCancellation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSalesorderCancellation(ctx context.Context, exec boil.ContextExecutor, salesorderID int, selectCols ...string) (*SalesorderCancellation, error) {
	salesorderCancellationObj := &SalesorderCancellation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"salesorder_cancellations\" where \"salesorder_id\"=$1", sel,
	)

	q := queries.Raw(query, salesorderID)

	err := q.Bind(ctx, exec, salesorderCancellationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from salesorder_cancellations")
	}

	return salesorderCancellationObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *SalesorderCancellation) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SalesorderCancellation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no salesorder_cancellations provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(salesorderCancellationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	salesorderCancellationInsertCacheMut.RLock()
	cache, cached := salesorderCancellationInsertCache[key]
	salesorderCancellationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			salesorderCancellationAllColumns,
			salesorderCancellationColumnsWithDefault,
			salesorderCancellationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(salesorderCancellationType, salesorderCancellationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(salesorderCancellationType, salesorderCancellationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"salesorder_cancellations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"salesorder_cancellations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into salesorder_cancellations")
	}

	if !cached {
		salesorderCancellationInsertCacheMut.Lock()
		salesorderCancellationInsertCache[key] = cache
		salesorderCancellationInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single SalesorderCancellation record using the global executor.
// See Update for more documentation.
func (o *SalesorderCancellation) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the SalesorderCancellation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SalesorderCancellation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	salesorderCancellationUpdateCacheMut.RLock()
	cache, cached := salesorderCancellationUpdateCache[key]
	salesorderCancellationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			salesorderCancellationAllColumns,
			salesorderCancellationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update salesorder_cancellations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"salesorder_cancellations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, salesorderCancellationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(salesorderCancellationType, salesorderCancellationMapping, append(wl, salesorderCancellationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update salesorder_cancellations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for salesorder_cancellations")
	}

	if !cached {
		salesorderCancellationUpdateCacheMut.Lock()
		salesorderCancellationUpdateCache[key] = cache
		salesorderCancellationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q salesorderCancellationQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q salesorderCancellationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for salesorder_cancellations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for salesorder_cancellations")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SalesorderCancellationSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SalesorderCancellationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salesorderCancellationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"salesorder_cancellations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, salesorderCancellationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in salesorderCancellation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all salesorderCancellation")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *SalesorderCancellation) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SalesorderCancellation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no salesorder_cancellations provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(salesorderCancellationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	salesorderCancellationUpsertCacheMut.RLock()
	cache, cached := salesorderCancellationUpsertCache[key]
	salesorderCancellationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			salesorderCancellationAllColumns,
			salesorderCancellationColumnsWithDefault,
			salesorderCancellationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			salesorderCancellationAllColumns,
			salesorderCancellationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert salesorder_cancellations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(salesorderCancellationPrimaryKeyColumns))
			copy(conflict, salesorderCancellationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"salesorder_cancellations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(salesorderCancellationType, salesorderCancellationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(salesorderCancellationType, salesorderCancellationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert salesorder_cancellations")
	}

	if !cached {
		salesorderCancellationUpsertCacheMut.Lock()
		salesorderCancellationUpsertCache[key] = cache
		salesorderCancellationUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single SalesorderCancellation record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *SalesorderCancellation) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single SalesorderCancellation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SalesorderCancellation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SalesorderCancellation provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), salesorderCancellationPrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"salesorder_cancellations\" WHERE \"salesorder_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from salesorder_cancellations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for salesorder_cancellations")
	}

	return rowsAff, nil
}

func (q salesorderCancellationQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q salesorderCancellationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no salesorderCancellationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from salesorder_cancellations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for salesorder_cancellations")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o SalesorderCancellationSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SalesorderCancellationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salesorderCancellationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"salesorder_cancellations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, salesorderCancellationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from salesorderCancellation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for salesorder_cancellations")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *SalesorderCancellation) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no SalesorderCancellation provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SalesorderCancellation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSalesorderCancellation(ctx, exec, o.SalesorderID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SalesorderCancellationSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty SalesorderCancellationSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SalesorderCancellationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SalesorderCancellationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salesorderCancellationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"salesorder_cancellations\".* FROM \"alpha\".\"salesorder_cancellations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, salesorderCancellationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SalesorderCancellationSlice")
	}

	*o = slice

	return nil
}

// SalesorderCancellationExistsG checks if the SalesorderCancellation row exists.
func SalesorderCancellationExistsG(ctx context.Context, salesorderID int) (bool, error) {
	return SalesorderCancellationExists(ctx, boil.GetContextDB(), salesorderID)
}

// SalesorderCancellationExists checks if the SalesorderCancellation row exists.
func SalesorderCancellationExists(ctx context.Context, exec boil.ContextExecutor, salesorderID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"salesorder_cancellations\" where \"salesorder_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, salesorderID)
	}
	row := exec.QueryRowContext(ctx, sql, salesorderID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if salesorder_cancellations exists")
	}

	return exists, nil
}
