// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Payment is an object representing the database table.
type Payment struct {
	ID       int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	OfficeID int       `boil:"office_id" json:"office_id" toml:"office_id" yaml:"office_id"`
	Active   bool      `boil:"active" json:"active" toml:"active" yaml:"active"`
	Acct     string    `boil:"acct" json:"acct" toml:"acct" yaml:"acct"`
	Routing  string    `boil:"routing" json:"routing" toml:"routing" yaml:"routing"`
	Created  time.Time `boil:"created" json:"created" toml:"created" yaml:"created"`

	R *paymentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L paymentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PaymentColumns = struct {
	ID       string
	OfficeID string
	Active   string
	Acct     string
	Routing  string
	Created  string
}{
	ID:       "id",
	OfficeID: "office_id",
	Active:   "active",
	Acct:     "acct",
	Routing:  "routing",
	Created:  "created",
}

var PaymentTableColumns = struct {
	ID       string
	OfficeID string
	Active   string
	Acct     string
	Routing  string
	Created  string
}{
	ID:       "payment.id",
	OfficeID: "payment.office_id",
	Active:   "payment.active",
	Acct:     "payment.acct",
	Routing:  "payment.routing",
	Created:  "payment.created",
}

// Generated where

var PaymentWhere = struct {
	ID       whereHelperint
	OfficeID whereHelperint
	Active   whereHelperbool
	Acct     whereHelperstring
	Routing  whereHelperstring
	Created  whereHelpertime_Time
}{
	ID:       whereHelperint{field: "\"alpha\".\"payment\".\"id\""},
	OfficeID: whereHelperint{field: "\"alpha\".\"payment\".\"office_id\""},
	Active:   whereHelperbool{field: "\"alpha\".\"payment\".\"active\""},
	Acct:     whereHelperstring{field: "\"alpha\".\"payment\".\"acct\""},
	Routing:  whereHelperstring{field: "\"alpha\".\"payment\".\"routing\""},
	Created:  whereHelpertime_Time{field: "\"alpha\".\"payment\".\"created\""},
}

// PaymentRels is where relationship names are stored.
var PaymentRels = struct {
	Office             string
	AccountReceipts    string
	AccountSalesorders string
}{
	Office:             "Office",
	AccountReceipts:    "AccountReceipts",
	AccountSalesorders: "AccountSalesorders",
}

// paymentR is where relationships are stored.
type paymentR struct {
	Office             *Office         `boil:"Office" json:"Office" toml:"Office" yaml:"Office"`
	AccountReceipts    ReceiptSlice    `boil:"AccountReceipts" json:"AccountReceipts" toml:"AccountReceipts" yaml:"AccountReceipts"`
	AccountSalesorders SalesorderSlice `boil:"AccountSalesorders" json:"AccountSalesorders" toml:"AccountSalesorders" yaml:"AccountSalesorders"`
}

// NewStruct creates a new relationship struct
func (*paymentR) NewStruct() *paymentR {
	return &paymentR{}
}

func (r *paymentR) GetOffice() *Office {
	if r == nil {
		return nil
	}
	return r.Office
}

func (r *paymentR) GetAccountReceipts() ReceiptSlice {
	if r == nil {
		return nil
	}
	return r.AccountReceipts
}

func (r *paymentR) GetAccountSalesorders() SalesorderSlice {
	if r == nil {
		return nil
	}
	return r.AccountSalesorders
}

// paymentL is where Load methods for each relationship are stored.
type paymentL struct{}

var (
	paymentAllColumns            = []string{"id", "office_id", "active", "acct", "routing", "created"}
	paymentColumnsWithoutDefault = []string{"office_id", "acct", "routing"}
	paymentColumnsWithDefault    = []string{"id", "active", "created"}
	paymentPrimaryKeyColumns     = []string{"id"}
	paymentGeneratedColumns      = []string{"id"}
)

type (
	// PaymentSlice is an alias for a slice of pointers to Payment.
	// This should almost always be used instead of []Payment.
	PaymentSlice []*Payment

	paymentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	paymentType                 = reflect.TypeOf(&Payment{})
	paymentMapping              = queries.MakeStructMapping(paymentType)
	paymentPrimaryKeyMapping, _ = queries.BindMapping(paymentType, paymentMapping, paymentPrimaryKeyColumns)
	paymentInsertCacheMut       sync.RWMutex
	paymentInsertCache          = make(map[string]insertCache)
	paymentUpdateCacheMut       sync.RWMutex
	paymentUpdateCache          = make(map[string]updateCache)
	paymentUpsertCacheMut       sync.RWMutex
	paymentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single payment record from the query using the global executor.
func (q paymentQuery) OneG(ctx context.Context) (*Payment, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single payment record from the query.
func (q paymentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Payment, error) {
	o := &Payment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for payment")
	}

	return o, nil
}

// AllG returns all Payment records from the query using the global executor.
func (q paymentQuery) AllG(ctx context.Context) (PaymentSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Payment records from the query.
func (q paymentQuery) All(ctx context.Context, exec boil.ContextExecutor) (PaymentSlice, error) {
	var o []*Payment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Payment slice")
	}

	return o, nil
}

// CountG returns the count of all Payment records in the query using the global executor
func (q paymentQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Payment records in the query.
func (q paymentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count payment rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q paymentQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q paymentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if payment exists")
	}

	return count > 0, nil
}

// Office pointed to by the foreign key.
func (o *Payment) Office(mods ...qm.QueryMod) officeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OfficeID),
	}

	queryMods = append(queryMods, mods...)

	return Offices(queryMods...)
}

// AccountReceipts retrieves all the receipt's Receipts with an executor via account_id column.
func (o *Payment) AccountReceipts(mods ...qm.QueryMod) receiptQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"receipts\".\"account_id\"=?", o.ID),
	)

	return Receipts(queryMods...)
}

// AccountSalesorders retrieves all the salesorder's Salesorders with an executor via account_id column.
func (o *Payment) AccountSalesorders(mods ...qm.QueryMod) salesorderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"salesorders\".\"account_id\"=?", o.ID),
	)

	return Salesorders(queryMods...)
}

// LoadOffice allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentL) LoadOffice(ctx context.Context, e boil.ContextExecutor, singular bool, maybePayment interface{}, mods queries.Applicator) error {
	var slice []*Payment
	var object *Payment

	if singular {
		var ok bool
		object, ok = maybePayment.(*Payment)
		if !ok {
			object = new(Payment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePayment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePayment))
			}
		}
	} else {
		s, ok := maybePayment.(*[]*Payment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePayment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePayment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentR{}
		}
		args = append(args, object.OfficeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentR{}
			}

			for _, a := range args {
				if a == obj.OfficeID {
					continue Outer
				}
			}

			args = append(args, obj.OfficeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.offices`),
		qm.WhereIn(`alpha.offices.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Office")
	}

	var resultSlice []*Office
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Office")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for offices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for offices")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Office = foreign
		if foreign.R == nil {
			foreign.R = &officeR{}
		}
		foreign.R.Payments = append(foreign.R.Payments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OfficeID == foreign.ID {
				local.R.Office = foreign
				if foreign.R == nil {
					foreign.R = &officeR{}
				}
				foreign.R.Payments = append(foreign.R.Payments, local)
				break
			}
		}
	}

	return nil
}

// LoadAccountReceipts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (paymentL) LoadAccountReceipts(ctx context.Context, e boil.ContextExecutor, singular bool, maybePayment interface{}, mods queries.Applicator) error {
	var slice []*Payment
	var object *Payment

	if singular {
		var ok bool
		object, ok = maybePayment.(*Payment)
		if !ok {
			object = new(Payment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePayment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePayment))
			}
		}
	} else {
		s, ok := maybePayment.(*[]*Payment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePayment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePayment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.receipts`),
		qm.WhereIn(`alpha.receipts.account_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load receipts")
	}

	var resultSlice []*Receipt
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice receipts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on receipts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for receipts")
	}

	if singular {
		object.R.AccountReceipts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &receiptR{}
			}
			foreign.R.Account = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AccountID) {
				local.R.AccountReceipts = append(local.R.AccountReceipts, foreign)
				if foreign.R == nil {
					foreign.R = &receiptR{}
				}
				foreign.R.Account = local
				break
			}
		}
	}

	return nil
}

// LoadAccountSalesorders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (paymentL) LoadAccountSalesorders(ctx context.Context, e boil.ContextExecutor, singular bool, maybePayment interface{}, mods queries.Applicator) error {
	var slice []*Payment
	var object *Payment

	if singular {
		var ok bool
		object, ok = maybePayment.(*Payment)
		if !ok {
			object = new(Payment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePayment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePayment))
			}
		}
	} else {
		s, ok := maybePayment.(*[]*Payment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePayment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePayment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.salesorders`),
		qm.WhereIn(`alpha.salesorders.account_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load salesorders")
	}

	var resultSlice []*Salesorder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice salesorders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on salesorders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for salesorders")
	}

	if singular {
		object.R.AccountSalesorders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &salesorderR{}
			}
			foreign.R.Account = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AccountID) {
				local.R.AccountSalesorders = append(local.R.AccountSalesorders, foreign)
				if foreign.R == nil {
					foreign.R = &salesorderR{}
				}
				foreign.R.Account = local
				break
			}
		}
	}

	return nil
}

// SetOfficeG of the payment to the related item.
// Sets o.R.Office to related.
// Adds o to related.R.Payments.
// Uses the global database handle.
func (o *Payment) SetOfficeG(ctx context.Context, insert bool, related *Office) error {
	return o.SetOffice(ctx, boil.GetContextDB(), insert, related)
}

// SetOffice of the payment to the related item.
// Sets o.R.Office to related.
// Adds o to related.R.Payments.
func (o *Payment) SetOffice(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Office) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"payment\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"office_id"}),
		strmangle.WhereClause("\"", "\"", 2, paymentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OfficeID = related.ID
	if o.R == nil {
		o.R = &paymentR{
			Office: related,
		}
	} else {
		o.R.Office = related
	}

	if related.R == nil {
		related.R = &officeR{
			Payments: PaymentSlice{o},
		}
	} else {
		related.R.Payments = append(related.R.Payments, o)
	}

	return nil
}

// AddAccountReceiptsG adds the given related objects to the existing relationships
// of the payment, optionally inserting them as new records.
// Appends related to o.R.AccountReceipts.
// Sets related.R.Account appropriately.
// Uses the global database handle.
func (o *Payment) AddAccountReceiptsG(ctx context.Context, insert bool, related ...*Receipt) error {
	return o.AddAccountReceipts(ctx, boil.GetContextDB(), insert, related...)
}

// AddAccountReceipts adds the given related objects to the existing relationships
// of the payment, optionally inserting them as new records.
// Appends related to o.R.AccountReceipts.
// Sets related.R.Account appropriately.
func (o *Payment) AddAccountReceipts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Receipt) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AccountID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"receipts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
				strmangle.WhereClause("\"", "\"", 2, receiptPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AccountID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &paymentR{
			AccountReceipts: related,
		}
	} else {
		o.R.AccountReceipts = append(o.R.AccountReceipts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &receiptR{
				Account: o,
			}
		} else {
			rel.R.Account = o
		}
	}
	return nil
}

// SetAccountReceiptsG removes all previously related items of the
// payment replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Account's AccountReceipts accordingly.
// Replaces o.R.AccountReceipts with related.
// Sets related.R.Account's AccountReceipts accordingly.
// Uses the global database handle.
func (o *Payment) SetAccountReceiptsG(ctx context.Context, insert bool, related ...*Receipt) error {
	return o.SetAccountReceipts(ctx, boil.GetContextDB(), insert, related...)
}

// SetAccountReceipts removes all previously related items of the
// payment replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Account's AccountReceipts accordingly.
// Replaces o.R.AccountReceipts with related.
// Sets related.R.Account's AccountReceipts accordingly.
func (o *Payment) SetAccountReceipts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Receipt) error {
	query := "update \"alpha\".\"receipts\" set \"account_id\" = null where \"account_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AccountReceipts {
			queries.SetScanner(&rel.AccountID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Account = nil
		}
		o.R.AccountReceipts = nil
	}

	return o.AddAccountReceipts(ctx, exec, insert, related...)
}

// RemoveAccountReceiptsG relationships from objects passed in.
// Removes related items from R.AccountReceipts (uses pointer comparison, removal does not keep order)
// Sets related.R.Account.
// Uses the global database handle.
func (o *Payment) RemoveAccountReceiptsG(ctx context.Context, related ...*Receipt) error {
	return o.RemoveAccountReceipts(ctx, boil.GetContextDB(), related...)
}

// RemoveAccountReceipts relationships from objects passed in.
// Removes related items from R.AccountReceipts (uses pointer comparison, removal does not keep order)
// Sets related.R.Account.
func (o *Payment) RemoveAccountReceipts(ctx context.Context, exec boil.ContextExecutor, related ...*Receipt) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AccountID, nil)
		if rel.R != nil {
			rel.R.Account = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("account_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AccountReceipts {
			if rel != ri {
				continue
			}

			ln := len(o.R.AccountReceipts)
			if ln > 1 && i < ln-1 {
				o.R.AccountReceipts[i] = o.R.AccountReceipts[ln-1]
			}
			o.R.AccountReceipts = o.R.AccountReceipts[:ln-1]
			break
		}
	}

	return nil
}

// AddAccountSalesordersG adds the given related objects to the existing relationships
// of the payment, optionally inserting them as new records.
// Appends related to o.R.AccountSalesorders.
// Sets related.R.Account appropriately.
// Uses the global database handle.
func (o *Payment) AddAccountSalesordersG(ctx context.Context, insert bool, related ...*Salesorder) error {
	return o.AddAccountSalesorders(ctx, boil.GetContextDB(), insert, related...)
}

// AddAccountSalesorders adds the given related objects to the existing relationships
// of the payment, optionally inserting them as new records.
// Appends related to o.R.AccountSalesorders.
// Sets related.R.Account appropriately.
func (o *Payment) AddAccountSalesorders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Salesorder) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AccountID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"salesorders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
				strmangle.WhereClause("\"", "\"", 2, salesorderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AccountID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &paymentR{
			AccountSalesorders: related,
		}
	} else {
		o.R.AccountSalesorders = append(o.R.AccountSalesorders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &salesorderR{
				Account: o,
			}
		} else {
			rel.R.Account = o
		}
	}
	return nil
}

// SetAccountSalesordersG removes all previously related items of the
// payment replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Account's AccountSalesorders accordingly.
// Replaces o.R.AccountSalesorders with related.
// Sets related.R.Account's AccountSalesorders accordingly.
// Uses the global database handle.
func (o *Payment) SetAccountSalesordersG(ctx context.Context, insert bool, related ...*Salesorder) error {
	return o.SetAccountSalesorders(ctx, boil.GetContextDB(), insert, related...)
}

// SetAccountSalesorders removes all previously related items of the
// payment replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Account's AccountSalesorders accordingly.
// Replaces o.R.AccountSalesorders with related.
// Sets related.R.Account's AccountSalesorders accordingly.
func (o *Payment) SetAccountSalesorders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Salesorder) error {
	query := "update \"alpha\".\"salesorders\" set \"account_id\" = null where \"account_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AccountSalesorders {
			queries.SetScanner(&rel.AccountID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Account = nil
		}
		o.R.AccountSalesorders = nil
	}

	return o.AddAccountSalesorders(ctx, exec, insert, related...)
}

// RemoveAccountSalesordersG relationships from objects passed in.
// Removes related items from R.AccountSalesorders (uses pointer comparison, removal does not keep order)
// Sets related.R.Account.
// Uses the global database handle.
func (o *Payment) RemoveAccountSalesordersG(ctx context.Context, related ...*Salesorder) error {
	return o.RemoveAccountSalesorders(ctx, boil.GetContextDB(), related...)
}

// RemoveAccountSalesorders relationships from objects passed in.
// Removes related items from R.AccountSalesorders (uses pointer comparison, removal does not keep order)
// Sets related.R.Account.
func (o *Payment) RemoveAccountSalesorders(ctx context.Context, exec boil.ContextExecutor, related ...*Salesorder) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AccountID, nil)
		if rel.R != nil {
			rel.R.Account = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("account_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AccountSalesorders {
			if rel != ri {
				continue
			}

			ln := len(o.R.AccountSalesorders)
			if ln > 1 && i < ln-1 {
				o.R.AccountSalesorders[i] = o.R.AccountSalesorders[ln-1]
			}
			o.R.AccountSalesorders = o.R.AccountSalesorders[:ln-1]
			break
		}
	}

	return nil
}

// Payments retrieves all the records using an executor.
func Payments(mods ...qm.QueryMod) paymentQuery {
	mods = append(mods, qm.From("\"alpha\".\"payment\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"payment\".*"})
	}

	return paymentQuery{q}
}

// FindPaymentG retrieves a single record by ID.
func FindPaymentG(ctx context.Context, iD int, selectCols ...string) (*Payment, error) {
	return FindPayment(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindPayment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPayment(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Payment, error) {
	paymentObj := &Payment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"payment\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, paymentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from payment")
	}

	return paymentObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Payment) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Payment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no payment provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(paymentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	paymentInsertCacheMut.RLock()
	cache, cached := paymentInsertCache[key]
	paymentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			paymentAllColumns,
			paymentColumnsWithDefault,
			paymentColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, paymentGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(paymentType, paymentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(paymentType, paymentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"payment\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"payment\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into payment")
	}

	if !cached {
		paymentInsertCacheMut.Lock()
		paymentInsertCache[key] = cache
		paymentInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Payment record using the global executor.
// See Update for more documentation.
func (o *Payment) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Payment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Payment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	paymentUpdateCacheMut.RLock()
	cache, cached := paymentUpdateCache[key]
	paymentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			paymentAllColumns,
			paymentPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, paymentGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update payment, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"payment\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, paymentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(paymentType, paymentMapping, append(wl, paymentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update payment row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for payment")
	}

	if !cached {
		paymentUpdateCacheMut.Lock()
		paymentUpdateCache[key] = cache
		paymentUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q paymentQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q paymentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for payment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for payment")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PaymentSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PaymentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"payment\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, paymentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in payment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all payment")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Payment) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Payment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no payment provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	paymentUpsertCacheMut.RLock()
	cache, cached := paymentUpsertCache[key]
	paymentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			paymentAllColumns,
			paymentColumnsWithDefault,
			paymentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			paymentAllColumns,
			paymentPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, paymentGeneratedColumns)
		update = strmangle.SetComplement(update, paymentGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert payment, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(paymentPrimaryKeyColumns))
			copy(conflict, paymentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"payment\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(paymentType, paymentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(paymentType, paymentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert payment")
	}

	if !cached {
		paymentUpsertCacheMut.Lock()
		paymentUpsertCache[key] = cache
		paymentUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single Payment record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Payment) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Payment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Payment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Payment provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), paymentPrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"payment\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from payment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for payment")
	}

	return rowsAff, nil
}

func (q paymentQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q paymentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no paymentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from payment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for payment")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o PaymentSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PaymentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"payment\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, paymentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from payment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for payment")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Payment) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Payment provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Payment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPayment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PaymentSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty PaymentSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PaymentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PaymentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"payment\".* FROM \"alpha\".\"payment\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, paymentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PaymentSlice")
	}

	*o = slice

	return nil
}

// PaymentExistsG checks if the Payment row exists.
func PaymentExistsG(ctx context.Context, iD int) (bool, error) {
	return PaymentExists(ctx, boil.GetContextDB(), iD)
}

// PaymentExists checks if the Payment row exists.
func PaymentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"payment\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if payment exists")
	}

	return exists, nil
}
