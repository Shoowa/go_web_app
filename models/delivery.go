// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Delivery is an object representing the database table.
type Delivery struct {
	ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	SalesorderID null.Int  `boil:"salesorder_id" json:"salesorder_id,omitempty" toml:"salesorder_id" yaml:"salesorder_id,omitempty"`
	Created      time.Time `boil:"created" json:"created" toml:"created" yaml:"created"`
	Satisfied    bool      `boil:"satisfied" json:"satisfied" toml:"satisfied" yaml:"satisfied"`
	AgentID      null.Int  `boil:"agent_id" json:"agent_id,omitempty" toml:"agent_id" yaml:"agent_id,omitempty"`

	R *deliveryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deliveryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeliveryColumns = struct {
	ID           string
	SalesorderID string
	Created      string
	Satisfied    string
	AgentID      string
}{
	ID:           "id",
	SalesorderID: "salesorder_id",
	Created:      "created",
	Satisfied:    "satisfied",
	AgentID:      "agent_id",
}

var DeliveryTableColumns = struct {
	ID           string
	SalesorderID string
	Created      string
	Satisfied    string
	AgentID      string
}{
	ID:           "delivery.id",
	SalesorderID: "delivery.salesorder_id",
	Created:      "delivery.created",
	Satisfied:    "delivery.satisfied",
	AgentID:      "delivery.agent_id",
}

// Generated where

var DeliveryWhere = struct {
	ID           whereHelperint
	SalesorderID whereHelpernull_Int
	Created      whereHelpertime_Time
	Satisfied    whereHelperbool
	AgentID      whereHelpernull_Int
}{
	ID:           whereHelperint{field: "\"alpha\".\"delivery\".\"id\""},
	SalesorderID: whereHelpernull_Int{field: "\"alpha\".\"delivery\".\"salesorder_id\""},
	Created:      whereHelpertime_Time{field: "\"alpha\".\"delivery\".\"created\""},
	Satisfied:    whereHelperbool{field: "\"alpha\".\"delivery\".\"satisfied\""},
	AgentID:      whereHelpernull_Int{field: "\"alpha\".\"delivery\".\"agent_id\""},
}

// DeliveryRels is where relationship names are stored.
var DeliveryRels = struct {
	Agent      string
	Salesorder string
}{
	Agent:      "Agent",
	Salesorder: "Salesorder",
}

// deliveryR is where relationships are stored.
type deliveryR struct {
	Agent      *Person     `boil:"Agent" json:"Agent" toml:"Agent" yaml:"Agent"`
	Salesorder *Salesorder `boil:"Salesorder" json:"Salesorder" toml:"Salesorder" yaml:"Salesorder"`
}

// NewStruct creates a new relationship struct
func (*deliveryR) NewStruct() *deliveryR {
	return &deliveryR{}
}

func (r *deliveryR) GetAgent() *Person {
	if r == nil {
		return nil
	}
	return r.Agent
}

func (r *deliveryR) GetSalesorder() *Salesorder {
	if r == nil {
		return nil
	}
	return r.Salesorder
}

// deliveryL is where Load methods for each relationship are stored.
type deliveryL struct{}

var (
	deliveryAllColumns            = []string{"id", "salesorder_id", "created", "satisfied", "agent_id"}
	deliveryColumnsWithoutDefault = []string{"satisfied"}
	deliveryColumnsWithDefault    = []string{"id", "salesorder_id", "created", "agent_id"}
	deliveryPrimaryKeyColumns     = []string{"id"}
	deliveryGeneratedColumns      = []string{"id"}
)

type (
	// DeliverySlice is an alias for a slice of pointers to Delivery.
	// This should almost always be used instead of []Delivery.
	DeliverySlice []*Delivery

	deliveryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deliveryType                 = reflect.TypeOf(&Delivery{})
	deliveryMapping              = queries.MakeStructMapping(deliveryType)
	deliveryPrimaryKeyMapping, _ = queries.BindMapping(deliveryType, deliveryMapping, deliveryPrimaryKeyColumns)
	deliveryInsertCacheMut       sync.RWMutex
	deliveryInsertCache          = make(map[string]insertCache)
	deliveryUpdateCacheMut       sync.RWMutex
	deliveryUpdateCache          = make(map[string]updateCache)
	deliveryUpsertCacheMut       sync.RWMutex
	deliveryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single delivery record from the query using the global executor.
func (q deliveryQuery) OneG(ctx context.Context) (*Delivery, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single delivery record from the query.
func (q deliveryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Delivery, error) {
	o := &Delivery{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for delivery")
	}

	return o, nil
}

// AllG returns all Delivery records from the query using the global executor.
func (q deliveryQuery) AllG(ctx context.Context) (DeliverySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Delivery records from the query.
func (q deliveryQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeliverySlice, error) {
	var o []*Delivery

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Delivery slice")
	}

	return o, nil
}

// CountG returns the count of all Delivery records in the query using the global executor
func (q deliveryQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Delivery records in the query.
func (q deliveryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count delivery rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q deliveryQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q deliveryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if delivery exists")
	}

	return count > 0, nil
}

// Agent pointed to by the foreign key.
func (o *Delivery) Agent(mods ...qm.QueryMod) personQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AgentID),
	}

	queryMods = append(queryMods, mods...)

	return Persons(queryMods...)
}

// Salesorder pointed to by the foreign key.
func (o *Delivery) Salesorder(mods ...qm.QueryMod) salesorderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SalesorderID),
	}

	queryMods = append(queryMods, mods...)

	return Salesorders(queryMods...)
}

// LoadAgent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deliveryL) LoadAgent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDelivery interface{}, mods queries.Applicator) error {
	var slice []*Delivery
	var object *Delivery

	if singular {
		var ok bool
		object, ok = maybeDelivery.(*Delivery)
		if !ok {
			object = new(Delivery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDelivery))
			}
		}
	} else {
		s, ok := maybeDelivery.(*[]*Delivery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDelivery))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deliveryR{}
		}
		if !queries.IsNil(object.AgentID) {
			args = append(args, object.AgentID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AgentID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AgentID) {
				args = append(args, obj.AgentID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.persons`),
		qm.WhereIn(`alpha.persons.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Person")
	}

	var resultSlice []*Person
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Person")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for persons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for persons")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Agent = foreign
		if foreign.R == nil {
			foreign.R = &personR{}
		}
		foreign.R.AgentDeliveries = append(foreign.R.AgentDeliveries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AgentID, foreign.ID) {
				local.R.Agent = foreign
				if foreign.R == nil {
					foreign.R = &personR{}
				}
				foreign.R.AgentDeliveries = append(foreign.R.AgentDeliveries, local)
				break
			}
		}
	}

	return nil
}

// LoadSalesorder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deliveryL) LoadSalesorder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDelivery interface{}, mods queries.Applicator) error {
	var slice []*Delivery
	var object *Delivery

	if singular {
		var ok bool
		object, ok = maybeDelivery.(*Delivery)
		if !ok {
			object = new(Delivery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDelivery))
			}
		}
	} else {
		s, ok := maybeDelivery.(*[]*Delivery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDelivery))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deliveryR{}
		}
		if !queries.IsNil(object.SalesorderID) {
			args = append(args, object.SalesorderID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SalesorderID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SalesorderID) {
				args = append(args, obj.SalesorderID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.salesorders`),
		qm.WhereIn(`alpha.salesorders.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Salesorder")
	}

	var resultSlice []*Salesorder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Salesorder")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for salesorders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for salesorders")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Salesorder = foreign
		if foreign.R == nil {
			foreign.R = &salesorderR{}
		}
		foreign.R.Deliveries = append(foreign.R.Deliveries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SalesorderID, foreign.ID) {
				local.R.Salesorder = foreign
				if foreign.R == nil {
					foreign.R = &salesorderR{}
				}
				foreign.R.Deliveries = append(foreign.R.Deliveries, local)
				break
			}
		}
	}

	return nil
}

// SetAgentG of the delivery to the related item.
// Sets o.R.Agent to related.
// Adds o to related.R.AgentDeliveries.
// Uses the global database handle.
func (o *Delivery) SetAgentG(ctx context.Context, insert bool, related *Person) error {
	return o.SetAgent(ctx, boil.GetContextDB(), insert, related)
}

// SetAgent of the delivery to the related item.
// Sets o.R.Agent to related.
// Adds o to related.R.AgentDeliveries.
func (o *Delivery) SetAgent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Person) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"delivery\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"agent_id"}),
		strmangle.WhereClause("\"", "\"", 2, deliveryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AgentID, related.ID)
	if o.R == nil {
		o.R = &deliveryR{
			Agent: related,
		}
	} else {
		o.R.Agent = related
	}

	if related.R == nil {
		related.R = &personR{
			AgentDeliveries: DeliverySlice{o},
		}
	} else {
		related.R.AgentDeliveries = append(related.R.AgentDeliveries, o)
	}

	return nil
}

// RemoveAgentG relationship.
// Sets o.R.Agent to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Delivery) RemoveAgentG(ctx context.Context, related *Person) error {
	return o.RemoveAgent(ctx, boil.GetContextDB(), related)
}

// RemoveAgent relationship.
// Sets o.R.Agent to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Delivery) RemoveAgent(ctx context.Context, exec boil.ContextExecutor, related *Person) error {
	var err error

	queries.SetScanner(&o.AgentID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("agent_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Agent = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AgentDeliveries {
		if queries.Equal(o.AgentID, ri.AgentID) {
			continue
		}

		ln := len(related.R.AgentDeliveries)
		if ln > 1 && i < ln-1 {
			related.R.AgentDeliveries[i] = related.R.AgentDeliveries[ln-1]
		}
		related.R.AgentDeliveries = related.R.AgentDeliveries[:ln-1]
		break
	}
	return nil
}

// SetSalesorderG of the delivery to the related item.
// Sets o.R.Salesorder to related.
// Adds o to related.R.Deliveries.
// Uses the global database handle.
func (o *Delivery) SetSalesorderG(ctx context.Context, insert bool, related *Salesorder) error {
	return o.SetSalesorder(ctx, boil.GetContextDB(), insert, related)
}

// SetSalesorder of the delivery to the related item.
// Sets o.R.Salesorder to related.
// Adds o to related.R.Deliveries.
func (o *Delivery) SetSalesorder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Salesorder) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"delivery\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"salesorder_id"}),
		strmangle.WhereClause("\"", "\"", 2, deliveryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SalesorderID, related.ID)
	if o.R == nil {
		o.R = &deliveryR{
			Salesorder: related,
		}
	} else {
		o.R.Salesorder = related
	}

	if related.R == nil {
		related.R = &salesorderR{
			Deliveries: DeliverySlice{o},
		}
	} else {
		related.R.Deliveries = append(related.R.Deliveries, o)
	}

	return nil
}

// RemoveSalesorderG relationship.
// Sets o.R.Salesorder to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Delivery) RemoveSalesorderG(ctx context.Context, related *Salesorder) error {
	return o.RemoveSalesorder(ctx, boil.GetContextDB(), related)
}

// RemoveSalesorder relationship.
// Sets o.R.Salesorder to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Delivery) RemoveSalesorder(ctx context.Context, exec boil.ContextExecutor, related *Salesorder) error {
	var err error

	queries.SetScanner(&o.SalesorderID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("salesorder_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Salesorder = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Deliveries {
		if queries.Equal(o.SalesorderID, ri.SalesorderID) {
			continue
		}

		ln := len(related.R.Deliveries)
		if ln > 1 && i < ln-1 {
			related.R.Deliveries[i] = related.R.Deliveries[ln-1]
		}
		related.R.Deliveries = related.R.Deliveries[:ln-1]
		break
	}
	return nil
}

// Deliveries retrieves all the records using an executor.
func Deliveries(mods ...qm.QueryMod) deliveryQuery {
	mods = append(mods, qm.From("\"alpha\".\"delivery\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"delivery\".*"})
	}

	return deliveryQuery{q}
}

// FindDeliveryG retrieves a single record by ID.
func FindDeliveryG(ctx context.Context, iD int, selectCols ...string) (*Delivery, error) {
	return FindDelivery(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindDelivery retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDelivery(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Delivery, error) {
	deliveryObj := &Delivery{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"delivery\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, deliveryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from delivery")
	}

	return deliveryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Delivery) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Delivery) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no delivery provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(deliveryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deliveryInsertCacheMut.RLock()
	cache, cached := deliveryInsertCache[key]
	deliveryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deliveryAllColumns,
			deliveryColumnsWithDefault,
			deliveryColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, deliveryGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(deliveryType, deliveryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deliveryType, deliveryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"delivery\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"delivery\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into delivery")
	}

	if !cached {
		deliveryInsertCacheMut.Lock()
		deliveryInsertCache[key] = cache
		deliveryInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Delivery record using the global executor.
// See Update for more documentation.
func (o *Delivery) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Delivery.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Delivery) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	deliveryUpdateCacheMut.RLock()
	cache, cached := deliveryUpdateCache[key]
	deliveryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deliveryAllColumns,
			deliveryPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, deliveryGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update delivery, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"delivery\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, deliveryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deliveryType, deliveryMapping, append(wl, deliveryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update delivery row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for delivery")
	}

	if !cached {
		deliveryUpdateCacheMut.Lock()
		deliveryUpdateCache[key] = cache
		deliveryUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q deliveryQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q deliveryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for delivery")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for delivery")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DeliverySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeliverySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"delivery\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, deliveryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in delivery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all delivery")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Delivery) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Delivery) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no delivery provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(deliveryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deliveryUpsertCacheMut.RLock()
	cache, cached := deliveryUpsertCache[key]
	deliveryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			deliveryAllColumns,
			deliveryColumnsWithDefault,
			deliveryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deliveryAllColumns,
			deliveryPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, deliveryGeneratedColumns)
		update = strmangle.SetComplement(update, deliveryGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert delivery, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(deliveryPrimaryKeyColumns))
			copy(conflict, deliveryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"delivery\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(deliveryType, deliveryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deliveryType, deliveryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert delivery")
	}

	if !cached {
		deliveryUpsertCacheMut.Lock()
		deliveryUpsertCache[key] = cache
		deliveryUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single Delivery record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Delivery) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Delivery record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Delivery) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Delivery provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), deliveryPrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"delivery\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from delivery")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for delivery")
	}

	return rowsAff, nil
}

func (q deliveryQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q deliveryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no deliveryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from delivery")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for delivery")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DeliverySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeliverySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"delivery\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deliveryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from delivery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for delivery")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Delivery) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Delivery provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Delivery) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDelivery(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeliverySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty DeliverySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeliverySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeliverySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"delivery\".* FROM \"alpha\".\"delivery\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deliveryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DeliverySlice")
	}

	*o = slice

	return nil
}

// DeliveryExistsG checks if the Delivery row exists.
func DeliveryExistsG(ctx context.Context, iD int) (bool, error) {
	return DeliveryExists(ctx, boil.GetContextDB(), iD)
}

// DeliveryExists checks if the Delivery row exists.
func DeliveryExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"delivery\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if delivery exists")
	}

	return exists, nil
}
