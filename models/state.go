// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// State is an object representing the database table.
type State struct {
	ID   string `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *stateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L stateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StateColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

var StateTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "state.id",
	Name: "state.name",
}

// Generated where

var StateWhere = struct {
	ID   whereHelperstring
	Name whereHelperstring
}{
	ID:   whereHelperstring{field: "\"alpha\".\"state\".\"id\""},
	Name: whereHelperstring{field: "\"alpha\".\"state\".\"name\""},
}

// StateRels is where relationship names are stored.
var StateRels = struct {
	CertOfAuthorities        string
	Companies                string
	Counties                 string
	Depots                   string
	Munis                    string
	Offices                  string
	BuyerStateTaxExemptions  string
	SellerStateTaxExemptions string
	TaxStates                string
}{
	CertOfAuthorities:        "CertOfAuthorities",
	Companies:                "Companies",
	Counties:                 "Counties",
	Depots:                   "Depots",
	Munis:                    "Munis",
	Offices:                  "Offices",
	BuyerStateTaxExemptions:  "BuyerStateTaxExemptions",
	SellerStateTaxExemptions: "SellerStateTaxExemptions",
	TaxStates:                "TaxStates",
}

// stateR is where relationships are stored.
type stateR struct {
	CertOfAuthorities        CertOfAuthoritySlice `boil:"CertOfAuthorities" json:"CertOfAuthorities" toml:"CertOfAuthorities" yaml:"CertOfAuthorities"`
	Companies                CompanySlice         `boil:"Companies" json:"Companies" toml:"Companies" yaml:"Companies"`
	Counties                 CountySlice          `boil:"Counties" json:"Counties" toml:"Counties" yaml:"Counties"`
	Depots                   DepotSlice           `boil:"Depots" json:"Depots" toml:"Depots" yaml:"Depots"`
	Munis                    MuniSlice            `boil:"Munis" json:"Munis" toml:"Munis" yaml:"Munis"`
	Offices                  OfficeSlice          `boil:"Offices" json:"Offices" toml:"Offices" yaml:"Offices"`
	BuyerStateTaxExemptions  TaxExemptionSlice    `boil:"BuyerStateTaxExemptions" json:"BuyerStateTaxExemptions" toml:"BuyerStateTaxExemptions" yaml:"BuyerStateTaxExemptions"`
	SellerStateTaxExemptions TaxExemptionSlice    `boil:"SellerStateTaxExemptions" json:"SellerStateTaxExemptions" toml:"SellerStateTaxExemptions" yaml:"SellerStateTaxExemptions"`
	TaxStates                TaxStateSlice        `boil:"TaxStates" json:"TaxStates" toml:"TaxStates" yaml:"TaxStates"`
}

// NewStruct creates a new relationship struct
func (*stateR) NewStruct() *stateR {
	return &stateR{}
}

func (r *stateR) GetCertOfAuthorities() CertOfAuthoritySlice {
	if r == nil {
		return nil
	}
	return r.CertOfAuthorities
}

func (r *stateR) GetCompanies() CompanySlice {
	if r == nil {
		return nil
	}
	return r.Companies
}

func (r *stateR) GetCounties() CountySlice {
	if r == nil {
		return nil
	}
	return r.Counties
}

func (r *stateR) GetDepots() DepotSlice {
	if r == nil {
		return nil
	}
	return r.Depots
}

func (r *stateR) GetMunis() MuniSlice {
	if r == nil {
		return nil
	}
	return r.Munis
}

func (r *stateR) GetOffices() OfficeSlice {
	if r == nil {
		return nil
	}
	return r.Offices
}

func (r *stateR) GetBuyerStateTaxExemptions() TaxExemptionSlice {
	if r == nil {
		return nil
	}
	return r.BuyerStateTaxExemptions
}

func (r *stateR) GetSellerStateTaxExemptions() TaxExemptionSlice {
	if r == nil {
		return nil
	}
	return r.SellerStateTaxExemptions
}

func (r *stateR) GetTaxStates() TaxStateSlice {
	if r == nil {
		return nil
	}
	return r.TaxStates
}

// stateL is where Load methods for each relationship are stored.
type stateL struct{}

var (
	stateAllColumns            = []string{"id", "name"}
	stateColumnsWithoutDefault = []string{"id", "name"}
	stateColumnsWithDefault    = []string{}
	statePrimaryKeyColumns     = []string{"id"}
	stateGeneratedColumns      = []string{}
)

type (
	// StateSlice is an alias for a slice of pointers to State.
	// This should almost always be used instead of []State.
	StateSlice []*State

	stateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	stateType                 = reflect.TypeOf(&State{})
	stateMapping              = queries.MakeStructMapping(stateType)
	statePrimaryKeyMapping, _ = queries.BindMapping(stateType, stateMapping, statePrimaryKeyColumns)
	stateInsertCacheMut       sync.RWMutex
	stateInsertCache          = make(map[string]insertCache)
	stateUpdateCacheMut       sync.RWMutex
	stateUpdateCache          = make(map[string]updateCache)
	stateUpsertCacheMut       sync.RWMutex
	stateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single state record from the query using the global executor.
func (q stateQuery) OneG(ctx context.Context) (*State, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single state record from the query.
func (q stateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*State, error) {
	o := &State{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for state")
	}

	return o, nil
}

// AllG returns all State records from the query using the global executor.
func (q stateQuery) AllG(ctx context.Context) (StateSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all State records from the query.
func (q stateQuery) All(ctx context.Context, exec boil.ContextExecutor) (StateSlice, error) {
	var o []*State

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to State slice")
	}

	return o, nil
}

// CountG returns the count of all State records in the query using the global executor
func (q stateQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all State records in the query.
func (q stateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count state rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q stateQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q stateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if state exists")
	}

	return count > 0, nil
}

// CertOfAuthorities retrieves all the cert_of_authority's CertOfAuthorities with an executor.
func (o *State) CertOfAuthorities(mods ...qm.QueryMod) certOfAuthorityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"cert_of_authority\".\"state_id\"=?", o.ID),
	)

	return CertOfAuthorities(queryMods...)
}

// Companies retrieves all the company's Companies with an executor.
func (o *State) Companies(mods ...qm.QueryMod) companyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"companies\".\"state_id\"=?", o.ID),
	)

	return Companies(queryMods...)
}

// Counties retrieves all the county's Counties with an executor.
func (o *State) Counties(mods ...qm.QueryMod) countyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"county\".\"state_id\"=?", o.ID),
	)

	return Counties(queryMods...)
}

// Depots retrieves all the depot's Depots with an executor.
func (o *State) Depots(mods ...qm.QueryMod) depotQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"depots\".\"state_id\"=?", o.ID),
	)

	return Depots(queryMods...)
}

// Munis retrieves all the muni's Munis with an executor.
func (o *State) Munis(mods ...qm.QueryMod) muniQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"muni\".\"state_id\"=?", o.ID),
	)

	return Munis(queryMods...)
}

// Offices retrieves all the office's Offices with an executor.
func (o *State) Offices(mods ...qm.QueryMod) officeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"offices\".\"state_id\"=?", o.ID),
	)

	return Offices(queryMods...)
}

// BuyerStateTaxExemptions retrieves all the tax_exemption's TaxExemptions with an executor via buyer_state_id column.
func (o *State) BuyerStateTaxExemptions(mods ...qm.QueryMod) taxExemptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"tax_exemptions\".\"buyer_state_id\"=?", o.ID),
	)

	return TaxExemptions(queryMods...)
}

// SellerStateTaxExemptions retrieves all the tax_exemption's TaxExemptions with an executor via seller_state_id column.
func (o *State) SellerStateTaxExemptions(mods ...qm.QueryMod) taxExemptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"tax_exemptions\".\"seller_state_id\"=?", o.ID),
	)

	return TaxExemptions(queryMods...)
}

// TaxStates retrieves all the tax_state's TaxStates with an executor.
func (o *State) TaxStates(mods ...qm.QueryMod) taxStateQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"tax_state\".\"state_id\"=?", o.ID),
	)

	return TaxStates(queryMods...)
}

// LoadCertOfAuthorities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (stateL) LoadCertOfAuthorities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeState interface{}, mods queries.Applicator) error {
	var slice []*State
	var object *State

	if singular {
		var ok bool
		object, ok = maybeState.(*State)
		if !ok {
			object = new(State)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeState)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeState))
			}
		}
	} else {
		s, ok := maybeState.(*[]*State)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeState)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeState))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stateR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stateR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.cert_of_authority`),
		qm.WhereIn(`alpha.cert_of_authority.state_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cert_of_authority")
	}

	var resultSlice []*CertOfAuthority
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cert_of_authority")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cert_of_authority")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cert_of_authority")
	}

	if singular {
		object.R.CertOfAuthorities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &certOfAuthorityR{}
			}
			foreign.R.State = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.StateID {
				local.R.CertOfAuthorities = append(local.R.CertOfAuthorities, foreign)
				if foreign.R == nil {
					foreign.R = &certOfAuthorityR{}
				}
				foreign.R.State = local
				break
			}
		}
	}

	return nil
}

// LoadCompanies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (stateL) LoadCompanies(ctx context.Context, e boil.ContextExecutor, singular bool, maybeState interface{}, mods queries.Applicator) error {
	var slice []*State
	var object *State

	if singular {
		var ok bool
		object, ok = maybeState.(*State)
		if !ok {
			object = new(State)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeState)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeState))
			}
		}
	} else {
		s, ok := maybeState.(*[]*State)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeState)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeState))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stateR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stateR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.companies`),
		qm.WhereIn(`alpha.companies.state_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load companies")
	}

	var resultSlice []*Company
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice companies")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on companies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for companies")
	}

	if singular {
		object.R.Companies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &companyR{}
			}
			foreign.R.State = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.StateID {
				local.R.Companies = append(local.R.Companies, foreign)
				if foreign.R == nil {
					foreign.R = &companyR{}
				}
				foreign.R.State = local
				break
			}
		}
	}

	return nil
}

// LoadCounties allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (stateL) LoadCounties(ctx context.Context, e boil.ContextExecutor, singular bool, maybeState interface{}, mods queries.Applicator) error {
	var slice []*State
	var object *State

	if singular {
		var ok bool
		object, ok = maybeState.(*State)
		if !ok {
			object = new(State)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeState)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeState))
			}
		}
	} else {
		s, ok := maybeState.(*[]*State)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeState)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeState))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stateR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stateR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.county`),
		qm.WhereIn(`alpha.county.state_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load county")
	}

	var resultSlice []*County
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice county")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on county")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for county")
	}

	if singular {
		object.R.Counties = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &countyR{}
			}
			foreign.R.State = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.StateID {
				local.R.Counties = append(local.R.Counties, foreign)
				if foreign.R == nil {
					foreign.R = &countyR{}
				}
				foreign.R.State = local
				break
			}
		}
	}

	return nil
}

// LoadDepots allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (stateL) LoadDepots(ctx context.Context, e boil.ContextExecutor, singular bool, maybeState interface{}, mods queries.Applicator) error {
	var slice []*State
	var object *State

	if singular {
		var ok bool
		object, ok = maybeState.(*State)
		if !ok {
			object = new(State)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeState)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeState))
			}
		}
	} else {
		s, ok := maybeState.(*[]*State)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeState)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeState))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stateR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stateR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.depots`),
		qm.WhereIn(`alpha.depots.state_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load depots")
	}

	var resultSlice []*Depot
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice depots")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on depots")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for depots")
	}

	if singular {
		object.R.Depots = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &depotR{}
			}
			foreign.R.State = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.StateID {
				local.R.Depots = append(local.R.Depots, foreign)
				if foreign.R == nil {
					foreign.R = &depotR{}
				}
				foreign.R.State = local
				break
			}
		}
	}

	return nil
}

// LoadMunis allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (stateL) LoadMunis(ctx context.Context, e boil.ContextExecutor, singular bool, maybeState interface{}, mods queries.Applicator) error {
	var slice []*State
	var object *State

	if singular {
		var ok bool
		object, ok = maybeState.(*State)
		if !ok {
			object = new(State)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeState)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeState))
			}
		}
	} else {
		s, ok := maybeState.(*[]*State)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeState)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeState))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stateR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stateR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.muni`),
		qm.WhereIn(`alpha.muni.state_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load muni")
	}

	var resultSlice []*Muni
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice muni")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on muni")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for muni")
	}

	if singular {
		object.R.Munis = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &muniR{}
			}
			foreign.R.State = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.StateID {
				local.R.Munis = append(local.R.Munis, foreign)
				if foreign.R == nil {
					foreign.R = &muniR{}
				}
				foreign.R.State = local
				break
			}
		}
	}

	return nil
}

// LoadOffices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (stateL) LoadOffices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeState interface{}, mods queries.Applicator) error {
	var slice []*State
	var object *State

	if singular {
		var ok bool
		object, ok = maybeState.(*State)
		if !ok {
			object = new(State)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeState)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeState))
			}
		}
	} else {
		s, ok := maybeState.(*[]*State)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeState)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeState))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stateR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stateR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.offices`),
		qm.WhereIn(`alpha.offices.state_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load offices")
	}

	var resultSlice []*Office
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice offices")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on offices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for offices")
	}

	if singular {
		object.R.Offices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &officeR{}
			}
			foreign.R.State = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.StateID {
				local.R.Offices = append(local.R.Offices, foreign)
				if foreign.R == nil {
					foreign.R = &officeR{}
				}
				foreign.R.State = local
				break
			}
		}
	}

	return nil
}

// LoadBuyerStateTaxExemptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (stateL) LoadBuyerStateTaxExemptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeState interface{}, mods queries.Applicator) error {
	var slice []*State
	var object *State

	if singular {
		var ok bool
		object, ok = maybeState.(*State)
		if !ok {
			object = new(State)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeState)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeState))
			}
		}
	} else {
		s, ok := maybeState.(*[]*State)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeState)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeState))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stateR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stateR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.tax_exemptions`),
		qm.WhereIn(`alpha.tax_exemptions.buyer_state_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tax_exemptions")
	}

	var resultSlice []*TaxExemption
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tax_exemptions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tax_exemptions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tax_exemptions")
	}

	if singular {
		object.R.BuyerStateTaxExemptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &taxExemptionR{}
			}
			foreign.R.BuyerState = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BuyerStateID) {
				local.R.BuyerStateTaxExemptions = append(local.R.BuyerStateTaxExemptions, foreign)
				if foreign.R == nil {
					foreign.R = &taxExemptionR{}
				}
				foreign.R.BuyerState = local
				break
			}
		}
	}

	return nil
}

// LoadSellerStateTaxExemptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (stateL) LoadSellerStateTaxExemptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeState interface{}, mods queries.Applicator) error {
	var slice []*State
	var object *State

	if singular {
		var ok bool
		object, ok = maybeState.(*State)
		if !ok {
			object = new(State)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeState)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeState))
			}
		}
	} else {
		s, ok := maybeState.(*[]*State)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeState)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeState))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stateR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stateR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.tax_exemptions`),
		qm.WhereIn(`alpha.tax_exemptions.seller_state_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tax_exemptions")
	}

	var resultSlice []*TaxExemption
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tax_exemptions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tax_exemptions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tax_exemptions")
	}

	if singular {
		object.R.SellerStateTaxExemptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &taxExemptionR{}
			}
			foreign.R.SellerState = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SellerStateID) {
				local.R.SellerStateTaxExemptions = append(local.R.SellerStateTaxExemptions, foreign)
				if foreign.R == nil {
					foreign.R = &taxExemptionR{}
				}
				foreign.R.SellerState = local
				break
			}
		}
	}

	return nil
}

// LoadTaxStates allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (stateL) LoadTaxStates(ctx context.Context, e boil.ContextExecutor, singular bool, maybeState interface{}, mods queries.Applicator) error {
	var slice []*State
	var object *State

	if singular {
		var ok bool
		object, ok = maybeState.(*State)
		if !ok {
			object = new(State)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeState)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeState))
			}
		}
	} else {
		s, ok := maybeState.(*[]*State)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeState)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeState))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stateR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stateR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.tax_state`),
		qm.WhereIn(`alpha.tax_state.state_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tax_state")
	}

	var resultSlice []*TaxState
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tax_state")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tax_state")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tax_state")
	}

	if singular {
		object.R.TaxStates = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &taxStateR{}
			}
			foreign.R.State = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.StateID {
				local.R.TaxStates = append(local.R.TaxStates, foreign)
				if foreign.R == nil {
					foreign.R = &taxStateR{}
				}
				foreign.R.State = local
				break
			}
		}
	}

	return nil
}

// AddCertOfAuthoritiesG adds the given related objects to the existing relationships
// of the state, optionally inserting them as new records.
// Appends related to o.R.CertOfAuthorities.
// Sets related.R.State appropriately.
// Uses the global database handle.
func (o *State) AddCertOfAuthoritiesG(ctx context.Context, insert bool, related ...*CertOfAuthority) error {
	return o.AddCertOfAuthorities(ctx, boil.GetContextDB(), insert, related...)
}

// AddCertOfAuthorities adds the given related objects to the existing relationships
// of the state, optionally inserting them as new records.
// Appends related to o.R.CertOfAuthorities.
// Sets related.R.State appropriately.
func (o *State) AddCertOfAuthorities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CertOfAuthority) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StateID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"cert_of_authority\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"state_id"}),
				strmangle.WhereClause("\"", "\"", 2, certOfAuthorityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StateID = o.ID
		}
	}

	if o.R == nil {
		o.R = &stateR{
			CertOfAuthorities: related,
		}
	} else {
		o.R.CertOfAuthorities = append(o.R.CertOfAuthorities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &certOfAuthorityR{
				State: o,
			}
		} else {
			rel.R.State = o
		}
	}
	return nil
}

// AddCompaniesG adds the given related objects to the existing relationships
// of the state, optionally inserting them as new records.
// Appends related to o.R.Companies.
// Sets related.R.State appropriately.
// Uses the global database handle.
func (o *State) AddCompaniesG(ctx context.Context, insert bool, related ...*Company) error {
	return o.AddCompanies(ctx, boil.GetContextDB(), insert, related...)
}

// AddCompanies adds the given related objects to the existing relationships
// of the state, optionally inserting them as new records.
// Appends related to o.R.Companies.
// Sets related.R.State appropriately.
func (o *State) AddCompanies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Company) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StateID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"companies\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"state_id"}),
				strmangle.WhereClause("\"", "\"", 2, companyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StateID = o.ID
		}
	}

	if o.R == nil {
		o.R = &stateR{
			Companies: related,
		}
	} else {
		o.R.Companies = append(o.R.Companies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &companyR{
				State: o,
			}
		} else {
			rel.R.State = o
		}
	}
	return nil
}

// AddCountiesG adds the given related objects to the existing relationships
// of the state, optionally inserting them as new records.
// Appends related to o.R.Counties.
// Sets related.R.State appropriately.
// Uses the global database handle.
func (o *State) AddCountiesG(ctx context.Context, insert bool, related ...*County) error {
	return o.AddCounties(ctx, boil.GetContextDB(), insert, related...)
}

// AddCounties adds the given related objects to the existing relationships
// of the state, optionally inserting them as new records.
// Appends related to o.R.Counties.
// Sets related.R.State appropriately.
func (o *State) AddCounties(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*County) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StateID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"county\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"state_id"}),
				strmangle.WhereClause("\"", "\"", 2, countyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StateID = o.ID
		}
	}

	if o.R == nil {
		o.R = &stateR{
			Counties: related,
		}
	} else {
		o.R.Counties = append(o.R.Counties, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &countyR{
				State: o,
			}
		} else {
			rel.R.State = o
		}
	}
	return nil
}

// AddDepotsG adds the given related objects to the existing relationships
// of the state, optionally inserting them as new records.
// Appends related to o.R.Depots.
// Sets related.R.State appropriately.
// Uses the global database handle.
func (o *State) AddDepotsG(ctx context.Context, insert bool, related ...*Depot) error {
	return o.AddDepots(ctx, boil.GetContextDB(), insert, related...)
}

// AddDepots adds the given related objects to the existing relationships
// of the state, optionally inserting them as new records.
// Appends related to o.R.Depots.
// Sets related.R.State appropriately.
func (o *State) AddDepots(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Depot) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StateID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"depots\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"state_id"}),
				strmangle.WhereClause("\"", "\"", 2, depotPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StateID = o.ID
		}
	}

	if o.R == nil {
		o.R = &stateR{
			Depots: related,
		}
	} else {
		o.R.Depots = append(o.R.Depots, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &depotR{
				State: o,
			}
		} else {
			rel.R.State = o
		}
	}
	return nil
}

// AddMunisG adds the given related objects to the existing relationships
// of the state, optionally inserting them as new records.
// Appends related to o.R.Munis.
// Sets related.R.State appropriately.
// Uses the global database handle.
func (o *State) AddMunisG(ctx context.Context, insert bool, related ...*Muni) error {
	return o.AddMunis(ctx, boil.GetContextDB(), insert, related...)
}

// AddMunis adds the given related objects to the existing relationships
// of the state, optionally inserting them as new records.
// Appends related to o.R.Munis.
// Sets related.R.State appropriately.
func (o *State) AddMunis(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Muni) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StateID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"muni\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"state_id"}),
				strmangle.WhereClause("\"", "\"", 2, muniPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StateID = o.ID
		}
	}

	if o.R == nil {
		o.R = &stateR{
			Munis: related,
		}
	} else {
		o.R.Munis = append(o.R.Munis, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &muniR{
				State: o,
			}
		} else {
			rel.R.State = o
		}
	}
	return nil
}

// AddOfficesG adds the given related objects to the existing relationships
// of the state, optionally inserting them as new records.
// Appends related to o.R.Offices.
// Sets related.R.State appropriately.
// Uses the global database handle.
func (o *State) AddOfficesG(ctx context.Context, insert bool, related ...*Office) error {
	return o.AddOffices(ctx, boil.GetContextDB(), insert, related...)
}

// AddOffices adds the given related objects to the existing relationships
// of the state, optionally inserting them as new records.
// Appends related to o.R.Offices.
// Sets related.R.State appropriately.
func (o *State) AddOffices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Office) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StateID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"offices\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"state_id"}),
				strmangle.WhereClause("\"", "\"", 2, officePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StateID = o.ID
		}
	}

	if o.R == nil {
		o.R = &stateR{
			Offices: related,
		}
	} else {
		o.R.Offices = append(o.R.Offices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &officeR{
				State: o,
			}
		} else {
			rel.R.State = o
		}
	}
	return nil
}

// AddBuyerStateTaxExemptionsG adds the given related objects to the existing relationships
// of the state, optionally inserting them as new records.
// Appends related to o.R.BuyerStateTaxExemptions.
// Sets related.R.BuyerState appropriately.
// Uses the global database handle.
func (o *State) AddBuyerStateTaxExemptionsG(ctx context.Context, insert bool, related ...*TaxExemption) error {
	return o.AddBuyerStateTaxExemptions(ctx, boil.GetContextDB(), insert, related...)
}

// AddBuyerStateTaxExemptions adds the given related objects to the existing relationships
// of the state, optionally inserting them as new records.
// Appends related to o.R.BuyerStateTaxExemptions.
// Sets related.R.BuyerState appropriately.
func (o *State) AddBuyerStateTaxExemptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaxExemption) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BuyerStateID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"tax_exemptions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"buyer_state_id"}),
				strmangle.WhereClause("\"", "\"", 2, taxExemptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BuyerStateID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &stateR{
			BuyerStateTaxExemptions: related,
		}
	} else {
		o.R.BuyerStateTaxExemptions = append(o.R.BuyerStateTaxExemptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &taxExemptionR{
				BuyerState: o,
			}
		} else {
			rel.R.BuyerState = o
		}
	}
	return nil
}

// SetBuyerStateTaxExemptionsG removes all previously related items of the
// state replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BuyerState's BuyerStateTaxExemptions accordingly.
// Replaces o.R.BuyerStateTaxExemptions with related.
// Sets related.R.BuyerState's BuyerStateTaxExemptions accordingly.
// Uses the global database handle.
func (o *State) SetBuyerStateTaxExemptionsG(ctx context.Context, insert bool, related ...*TaxExemption) error {
	return o.SetBuyerStateTaxExemptions(ctx, boil.GetContextDB(), insert, related...)
}

// SetBuyerStateTaxExemptions removes all previously related items of the
// state replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BuyerState's BuyerStateTaxExemptions accordingly.
// Replaces o.R.BuyerStateTaxExemptions with related.
// Sets related.R.BuyerState's BuyerStateTaxExemptions accordingly.
func (o *State) SetBuyerStateTaxExemptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaxExemption) error {
	query := "update \"alpha\".\"tax_exemptions\" set \"buyer_state_id\" = null where \"buyer_state_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BuyerStateTaxExemptions {
			queries.SetScanner(&rel.BuyerStateID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.BuyerState = nil
		}
		o.R.BuyerStateTaxExemptions = nil
	}

	return o.AddBuyerStateTaxExemptions(ctx, exec, insert, related...)
}

// RemoveBuyerStateTaxExemptionsG relationships from objects passed in.
// Removes related items from R.BuyerStateTaxExemptions (uses pointer comparison, removal does not keep order)
// Sets related.R.BuyerState.
// Uses the global database handle.
func (o *State) RemoveBuyerStateTaxExemptionsG(ctx context.Context, related ...*TaxExemption) error {
	return o.RemoveBuyerStateTaxExemptions(ctx, boil.GetContextDB(), related...)
}

// RemoveBuyerStateTaxExemptions relationships from objects passed in.
// Removes related items from R.BuyerStateTaxExemptions (uses pointer comparison, removal does not keep order)
// Sets related.R.BuyerState.
func (o *State) RemoveBuyerStateTaxExemptions(ctx context.Context, exec boil.ContextExecutor, related ...*TaxExemption) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BuyerStateID, nil)
		if rel.R != nil {
			rel.R.BuyerState = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("buyer_state_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BuyerStateTaxExemptions {
			if rel != ri {
				continue
			}

			ln := len(o.R.BuyerStateTaxExemptions)
			if ln > 1 && i < ln-1 {
				o.R.BuyerStateTaxExemptions[i] = o.R.BuyerStateTaxExemptions[ln-1]
			}
			o.R.BuyerStateTaxExemptions = o.R.BuyerStateTaxExemptions[:ln-1]
			break
		}
	}

	return nil
}

// AddSellerStateTaxExemptionsG adds the given related objects to the existing relationships
// of the state, optionally inserting them as new records.
// Appends related to o.R.SellerStateTaxExemptions.
// Sets related.R.SellerState appropriately.
// Uses the global database handle.
func (o *State) AddSellerStateTaxExemptionsG(ctx context.Context, insert bool, related ...*TaxExemption) error {
	return o.AddSellerStateTaxExemptions(ctx, boil.GetContextDB(), insert, related...)
}

// AddSellerStateTaxExemptions adds the given related objects to the existing relationships
// of the state, optionally inserting them as new records.
// Appends related to o.R.SellerStateTaxExemptions.
// Sets related.R.SellerState appropriately.
func (o *State) AddSellerStateTaxExemptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaxExemption) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SellerStateID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"tax_exemptions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"seller_state_id"}),
				strmangle.WhereClause("\"", "\"", 2, taxExemptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SellerStateID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &stateR{
			SellerStateTaxExemptions: related,
		}
	} else {
		o.R.SellerStateTaxExemptions = append(o.R.SellerStateTaxExemptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &taxExemptionR{
				SellerState: o,
			}
		} else {
			rel.R.SellerState = o
		}
	}
	return nil
}

// SetSellerStateTaxExemptionsG removes all previously related items of the
// state replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SellerState's SellerStateTaxExemptions accordingly.
// Replaces o.R.SellerStateTaxExemptions with related.
// Sets related.R.SellerState's SellerStateTaxExemptions accordingly.
// Uses the global database handle.
func (o *State) SetSellerStateTaxExemptionsG(ctx context.Context, insert bool, related ...*TaxExemption) error {
	return o.SetSellerStateTaxExemptions(ctx, boil.GetContextDB(), insert, related...)
}

// SetSellerStateTaxExemptions removes all previously related items of the
// state replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SellerState's SellerStateTaxExemptions accordingly.
// Replaces o.R.SellerStateTaxExemptions with related.
// Sets related.R.SellerState's SellerStateTaxExemptions accordingly.
func (o *State) SetSellerStateTaxExemptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaxExemption) error {
	query := "update \"alpha\".\"tax_exemptions\" set \"seller_state_id\" = null where \"seller_state_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SellerStateTaxExemptions {
			queries.SetScanner(&rel.SellerStateID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SellerState = nil
		}
		o.R.SellerStateTaxExemptions = nil
	}

	return o.AddSellerStateTaxExemptions(ctx, exec, insert, related...)
}

// RemoveSellerStateTaxExemptionsG relationships from objects passed in.
// Removes related items from R.SellerStateTaxExemptions (uses pointer comparison, removal does not keep order)
// Sets related.R.SellerState.
// Uses the global database handle.
func (o *State) RemoveSellerStateTaxExemptionsG(ctx context.Context, related ...*TaxExemption) error {
	return o.RemoveSellerStateTaxExemptions(ctx, boil.GetContextDB(), related...)
}

// RemoveSellerStateTaxExemptions relationships from objects passed in.
// Removes related items from R.SellerStateTaxExemptions (uses pointer comparison, removal does not keep order)
// Sets related.R.SellerState.
func (o *State) RemoveSellerStateTaxExemptions(ctx context.Context, exec boil.ContextExecutor, related ...*TaxExemption) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SellerStateID, nil)
		if rel.R != nil {
			rel.R.SellerState = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("seller_state_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SellerStateTaxExemptions {
			if rel != ri {
				continue
			}

			ln := len(o.R.SellerStateTaxExemptions)
			if ln > 1 && i < ln-1 {
				o.R.SellerStateTaxExemptions[i] = o.R.SellerStateTaxExemptions[ln-1]
			}
			o.R.SellerStateTaxExemptions = o.R.SellerStateTaxExemptions[:ln-1]
			break
		}
	}

	return nil
}

// AddTaxStatesG adds the given related objects to the existing relationships
// of the state, optionally inserting them as new records.
// Appends related to o.R.TaxStates.
// Sets related.R.State appropriately.
// Uses the global database handle.
func (o *State) AddTaxStatesG(ctx context.Context, insert bool, related ...*TaxState) error {
	return o.AddTaxStates(ctx, boil.GetContextDB(), insert, related...)
}

// AddTaxStates adds the given related objects to the existing relationships
// of the state, optionally inserting them as new records.
// Appends related to o.R.TaxStates.
// Sets related.R.State appropriately.
func (o *State) AddTaxStates(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaxState) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StateID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"tax_state\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"state_id"}),
				strmangle.WhereClause("\"", "\"", 2, taxStatePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StateID = o.ID
		}
	}

	if o.R == nil {
		o.R = &stateR{
			TaxStates: related,
		}
	} else {
		o.R.TaxStates = append(o.R.TaxStates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &taxStateR{
				State: o,
			}
		} else {
			rel.R.State = o
		}
	}
	return nil
}

// States retrieves all the records using an executor.
func States(mods ...qm.QueryMod) stateQuery {
	mods = append(mods, qm.From("\"alpha\".\"state\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"state\".*"})
	}

	return stateQuery{q}
}

// FindStateG retrieves a single record by ID.
func FindStateG(ctx context.Context, iD string, selectCols ...string) (*State, error) {
	return FindState(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindState retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindState(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*State, error) {
	stateObj := &State{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"state\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, stateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from state")
	}

	return stateObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *State) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *State) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no state provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(stateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	stateInsertCacheMut.RLock()
	cache, cached := stateInsertCache[key]
	stateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			stateAllColumns,
			stateColumnsWithDefault,
			stateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(stateType, stateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(stateType, stateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"state\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"state\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into state")
	}

	if !cached {
		stateInsertCacheMut.Lock()
		stateInsertCache[key] = cache
		stateInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single State record using the global executor.
// See Update for more documentation.
func (o *State) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the State.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *State) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	stateUpdateCacheMut.RLock()
	cache, cached := stateUpdateCache[key]
	stateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			stateAllColumns,
			statePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update state, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"state\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, statePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(stateType, stateMapping, append(wl, statePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update state row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for state")
	}

	if !cached {
		stateUpdateCacheMut.Lock()
		stateUpdateCache[key] = cache
		stateUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q stateQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q stateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for state")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for state")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o StateSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"state\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, statePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in state slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all state")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *State) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *State) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no state provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(stateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	stateUpsertCacheMut.RLock()
	cache, cached := stateUpsertCache[key]
	stateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			stateAllColumns,
			stateColumnsWithDefault,
			stateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			stateAllColumns,
			statePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert state, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(statePrimaryKeyColumns))
			copy(conflict, statePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"state\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(stateType, stateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(stateType, stateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert state")
	}

	if !cached {
		stateUpsertCacheMut.Lock()
		stateUpsertCache[key] = cache
		stateUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single State record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *State) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single State record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *State) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no State provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), statePrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"state\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from state")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for state")
	}

	return rowsAff, nil
}

func (q stateQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q stateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no stateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from state")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for state")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o StateSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"state\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, statePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from state slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for state")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *State) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no State provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *State) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindState(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StateSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty StateSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"state\".* FROM \"alpha\".\"state\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, statePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StateSlice")
	}

	*o = slice

	return nil
}

// StateExistsG checks if the State row exists.
func StateExistsG(ctx context.Context, iD string) (bool, error) {
	return StateExists(ctx, boil.GetContextDB(), iD)
}

// StateExists checks if the State row exists.
func StateExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"state\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if state exists")
	}

	return exists, nil
}
