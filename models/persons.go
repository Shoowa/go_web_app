// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Person is an object representing the database table.
type Person struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CompanyID int       `boil:"company_id" json:"company_id" toml:"company_id" yaml:"company_id"`
	Email     string    `boil:"email" json:"email" toml:"email" yaml:"email"`
	Title     string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Forename  string    `boil:"forename" json:"forename" toml:"forename" yaml:"forename"`
	Surname   string    `boil:"surname" json:"surname" toml:"surname" yaml:"surname"`
	Agent     bool      `boil:"agent" json:"agent" toml:"agent" yaml:"agent"`
	Active    bool      `boil:"active" json:"active" toml:"active" yaml:"active"`
	Created   time.Time `boil:"created" json:"created" toml:"created" yaml:"created"`

	R *personR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L personL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PersonColumns = struct {
	ID        string
	CompanyID string
	Email     string
	Title     string
	Forename  string
	Surname   string
	Agent     string
	Active    string
	Created   string
}{
	ID:        "id",
	CompanyID: "company_id",
	Email:     "email",
	Title:     "title",
	Forename:  "forename",
	Surname:   "surname",
	Agent:     "agent",
	Active:    "active",
	Created:   "created",
}

var PersonTableColumns = struct {
	ID        string
	CompanyID string
	Email     string
	Title     string
	Forename  string
	Surname   string
	Agent     string
	Active    string
	Created   string
}{
	ID:        "persons.id",
	CompanyID: "persons.company_id",
	Email:     "persons.email",
	Title:     "persons.title",
	Forename:  "persons.forename",
	Surname:   "persons.surname",
	Agent:     "persons.agent",
	Active:    "persons.active",
	Created:   "persons.created",
}

// Generated where

var PersonWhere = struct {
	ID        whereHelperint
	CompanyID whereHelperint
	Email     whereHelperstring
	Title     whereHelperstring
	Forename  whereHelperstring
	Surname   whereHelperstring
	Agent     whereHelperbool
	Active    whereHelperbool
	Created   whereHelpertime_Time
}{
	ID:        whereHelperint{field: "\"alpha\".\"persons\".\"id\""},
	CompanyID: whereHelperint{field: "\"alpha\".\"persons\".\"company_id\""},
	Email:     whereHelperstring{field: "\"alpha\".\"persons\".\"email\""},
	Title:     whereHelperstring{field: "\"alpha\".\"persons\".\"title\""},
	Forename:  whereHelperstring{field: "\"alpha\".\"persons\".\"forename\""},
	Surname:   whereHelperstring{field: "\"alpha\".\"persons\".\"surname\""},
	Agent:     whereHelperbool{field: "\"alpha\".\"persons\".\"agent\""},
	Active:    whereHelperbool{field: "\"alpha\".\"persons\".\"active\""},
	Created:   whereHelpertime_Time{field: "\"alpha\".\"persons\".\"created\""},
}

// PersonRels is where relationship names are stored.
var PersonRels = struct {
	Company                       string
	AgentCommissions              string
	AgentDeliveries               string
	AgentReceipts                 string
	AgentRefunds                  string
	AgentSalesorders              string
	ColleagueVerifiedByColleagues string
	SubjectVerifiedByColleagues   string
	SubjectVerifiedByEmails       string
}{
	Company:                       "Company",
	AgentCommissions:              "AgentCommissions",
	AgentDeliveries:               "AgentDeliveries",
	AgentReceipts:                 "AgentReceipts",
	AgentRefunds:                  "AgentRefunds",
	AgentSalesorders:              "AgentSalesorders",
	ColleagueVerifiedByColleagues: "ColleagueVerifiedByColleagues",
	SubjectVerifiedByColleagues:   "SubjectVerifiedByColleagues",
	SubjectVerifiedByEmails:       "SubjectVerifiedByEmails",
}

// personR is where relationships are stored.
type personR struct {
	Company                       *Company                 `boil:"Company" json:"Company" toml:"Company" yaml:"Company"`
	AgentCommissions              CommissionSlice          `boil:"AgentCommissions" json:"AgentCommissions" toml:"AgentCommissions" yaml:"AgentCommissions"`
	AgentDeliveries               DeliverySlice            `boil:"AgentDeliveries" json:"AgentDeliveries" toml:"AgentDeliveries" yaml:"AgentDeliveries"`
	AgentReceipts                 ReceiptSlice             `boil:"AgentReceipts" json:"AgentReceipts" toml:"AgentReceipts" yaml:"AgentReceipts"`
	AgentRefunds                  RefundSlice              `boil:"AgentRefunds" json:"AgentRefunds" toml:"AgentRefunds" yaml:"AgentRefunds"`
	AgentSalesorders              SalesorderSlice          `boil:"AgentSalesorders" json:"AgentSalesorders" toml:"AgentSalesorders" yaml:"AgentSalesorders"`
	ColleagueVerifiedByColleagues VerifiedByColleagueSlice `boil:"ColleagueVerifiedByColleagues" json:"ColleagueVerifiedByColleagues" toml:"ColleagueVerifiedByColleagues" yaml:"ColleagueVerifiedByColleagues"`
	SubjectVerifiedByColleagues   VerifiedByColleagueSlice `boil:"SubjectVerifiedByColleagues" json:"SubjectVerifiedByColleagues" toml:"SubjectVerifiedByColleagues" yaml:"SubjectVerifiedByColleagues"`
	SubjectVerifiedByEmails       VerifiedByEmailSlice     `boil:"SubjectVerifiedByEmails" json:"SubjectVerifiedByEmails" toml:"SubjectVerifiedByEmails" yaml:"SubjectVerifiedByEmails"`
}

// NewStruct creates a new relationship struct
func (*personR) NewStruct() *personR {
	return &personR{}
}

func (r *personR) GetCompany() *Company {
	if r == nil {
		return nil
	}
	return r.Company
}

func (r *personR) GetAgentCommissions() CommissionSlice {
	if r == nil {
		return nil
	}
	return r.AgentCommissions
}

func (r *personR) GetAgentDeliveries() DeliverySlice {
	if r == nil {
		return nil
	}
	return r.AgentDeliveries
}

func (r *personR) GetAgentReceipts() ReceiptSlice {
	if r == nil {
		return nil
	}
	return r.AgentReceipts
}

func (r *personR) GetAgentRefunds() RefundSlice {
	if r == nil {
		return nil
	}
	return r.AgentRefunds
}

func (r *personR) GetAgentSalesorders() SalesorderSlice {
	if r == nil {
		return nil
	}
	return r.AgentSalesorders
}

func (r *personR) GetColleagueVerifiedByColleagues() VerifiedByColleagueSlice {
	if r == nil {
		return nil
	}
	return r.ColleagueVerifiedByColleagues
}

func (r *personR) GetSubjectVerifiedByColleagues() VerifiedByColleagueSlice {
	if r == nil {
		return nil
	}
	return r.SubjectVerifiedByColleagues
}

func (r *personR) GetSubjectVerifiedByEmails() VerifiedByEmailSlice {
	if r == nil {
		return nil
	}
	return r.SubjectVerifiedByEmails
}

// personL is where Load methods for each relationship are stored.
type personL struct{}

var (
	personAllColumns            = []string{"id", "company_id", "email", "title", "forename", "surname", "agent", "active", "created"}
	personColumnsWithoutDefault = []string{"company_id", "email", "title", "forename", "surname", "agent", "active"}
	personColumnsWithDefault    = []string{"id", "created"}
	personPrimaryKeyColumns     = []string{"id"}
	personGeneratedColumns      = []string{"id"}
)

type (
	// PersonSlice is an alias for a slice of pointers to Person.
	// This should almost always be used instead of []Person.
	PersonSlice []*Person

	personQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	personType                 = reflect.TypeOf(&Person{})
	personMapping              = queries.MakeStructMapping(personType)
	personPrimaryKeyMapping, _ = queries.BindMapping(personType, personMapping, personPrimaryKeyColumns)
	personInsertCacheMut       sync.RWMutex
	personInsertCache          = make(map[string]insertCache)
	personUpdateCacheMut       sync.RWMutex
	personUpdateCache          = make(map[string]updateCache)
	personUpsertCacheMut       sync.RWMutex
	personUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single person record from the query using the global executor.
func (q personQuery) OneG(ctx context.Context) (*Person, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single person record from the query.
func (q personQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Person, error) {
	o := &Person{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for persons")
	}

	return o, nil
}

// AllG returns all Person records from the query using the global executor.
func (q personQuery) AllG(ctx context.Context) (PersonSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Person records from the query.
func (q personQuery) All(ctx context.Context, exec boil.ContextExecutor) (PersonSlice, error) {
	var o []*Person

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Person slice")
	}

	return o, nil
}

// CountG returns the count of all Person records in the query using the global executor
func (q personQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Person records in the query.
func (q personQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count persons rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q personQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q personQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if persons exists")
	}

	return count > 0, nil
}

// Company pointed to by the foreign key.
func (o *Person) Company(mods ...qm.QueryMod) companyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CompanyID),
	}

	queryMods = append(queryMods, mods...)

	return Companies(queryMods...)
}

// AgentCommissions retrieves all the commission's Commissions with an executor via agent_id column.
func (o *Person) AgentCommissions(mods ...qm.QueryMod) commissionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"commissions\".\"agent_id\"=?", o.ID),
	)

	return Commissions(queryMods...)
}

// AgentDeliveries retrieves all the delivery's Deliveries with an executor via agent_id column.
func (o *Person) AgentDeliveries(mods ...qm.QueryMod) deliveryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"delivery\".\"agent_id\"=?", o.ID),
	)

	return Deliveries(queryMods...)
}

// AgentReceipts retrieves all the receipt's Receipts with an executor via agent_id column.
func (o *Person) AgentReceipts(mods ...qm.QueryMod) receiptQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"receipts\".\"agent_id\"=?", o.ID),
	)

	return Receipts(queryMods...)
}

// AgentRefunds retrieves all the refund's Refunds with an executor via agent_id column.
func (o *Person) AgentRefunds(mods ...qm.QueryMod) refundQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"refunds\".\"agent_id\"=?", o.ID),
	)

	return Refunds(queryMods...)
}

// AgentSalesorders retrieves all the salesorder's Salesorders with an executor via agent_id column.
func (o *Person) AgentSalesorders(mods ...qm.QueryMod) salesorderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"salesorders\".\"agent_id\"=?", o.ID),
	)

	return Salesorders(queryMods...)
}

// ColleagueVerifiedByColleagues retrieves all the verified_by_colleague's VerifiedByColleagues with an executor via colleague_id column.
func (o *Person) ColleagueVerifiedByColleagues(mods ...qm.QueryMod) verifiedByColleagueQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"verified_by_colleague\".\"colleague_id\"=?", o.ID),
	)

	return VerifiedByColleagues(queryMods...)
}

// SubjectVerifiedByColleagues retrieves all the verified_by_colleague's VerifiedByColleagues with an executor via subject_id column.
func (o *Person) SubjectVerifiedByColleagues(mods ...qm.QueryMod) verifiedByColleagueQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"verified_by_colleague\".\"subject_id\"=?", o.ID),
	)

	return VerifiedByColleagues(queryMods...)
}

// SubjectVerifiedByEmails retrieves all the verified_by_email's VerifiedByEmails with an executor via subject_id column.
func (o *Person) SubjectVerifiedByEmails(mods ...qm.QueryMod) verifiedByEmailQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"verified_by_email\".\"subject_id\"=?", o.ID),
	)

	return VerifiedByEmails(queryMods...)
}

// LoadCompany allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (personL) LoadCompany(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		var ok bool
		object, ok = maybePerson.(*Person)
		if !ok {
			object = new(Person)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePerson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePerson))
			}
		}
	} else {
		s, ok := maybePerson.(*[]*Person)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePerson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePerson))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		args = append(args, object.CompanyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if a == obj.CompanyID {
					continue Outer
				}
			}

			args = append(args, obj.CompanyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.companies`),
		qm.WhereIn(`alpha.companies.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Company")
	}

	var resultSlice []*Company
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Company")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for companies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for companies")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Company = foreign
		if foreign.R == nil {
			foreign.R = &companyR{}
		}
		foreign.R.Persons = append(foreign.R.Persons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CompanyID == foreign.ID {
				local.R.Company = foreign
				if foreign.R == nil {
					foreign.R = &companyR{}
				}
				foreign.R.Persons = append(foreign.R.Persons, local)
				break
			}
		}
	}

	return nil
}

// LoadAgentCommissions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (personL) LoadAgentCommissions(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		var ok bool
		object, ok = maybePerson.(*Person)
		if !ok {
			object = new(Person)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePerson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePerson))
			}
		}
	} else {
		s, ok := maybePerson.(*[]*Person)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePerson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePerson))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.commissions`),
		qm.WhereIn(`alpha.commissions.agent_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load commissions")
	}

	var resultSlice []*Commission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice commissions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on commissions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for commissions")
	}

	if singular {
		object.R.AgentCommissions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &commissionR{}
			}
			foreign.R.Agent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AgentID) {
				local.R.AgentCommissions = append(local.R.AgentCommissions, foreign)
				if foreign.R == nil {
					foreign.R = &commissionR{}
				}
				foreign.R.Agent = local
				break
			}
		}
	}

	return nil
}

// LoadAgentDeliveries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (personL) LoadAgentDeliveries(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		var ok bool
		object, ok = maybePerson.(*Person)
		if !ok {
			object = new(Person)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePerson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePerson))
			}
		}
	} else {
		s, ok := maybePerson.(*[]*Person)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePerson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePerson))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.delivery`),
		qm.WhereIn(`alpha.delivery.agent_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load delivery")
	}

	var resultSlice []*Delivery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice delivery")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on delivery")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for delivery")
	}

	if singular {
		object.R.AgentDeliveries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deliveryR{}
			}
			foreign.R.Agent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AgentID) {
				local.R.AgentDeliveries = append(local.R.AgentDeliveries, foreign)
				if foreign.R == nil {
					foreign.R = &deliveryR{}
				}
				foreign.R.Agent = local
				break
			}
		}
	}

	return nil
}

// LoadAgentReceipts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (personL) LoadAgentReceipts(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		var ok bool
		object, ok = maybePerson.(*Person)
		if !ok {
			object = new(Person)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePerson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePerson))
			}
		}
	} else {
		s, ok := maybePerson.(*[]*Person)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePerson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePerson))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.receipts`),
		qm.WhereIn(`alpha.receipts.agent_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load receipts")
	}

	var resultSlice []*Receipt
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice receipts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on receipts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for receipts")
	}

	if singular {
		object.R.AgentReceipts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &receiptR{}
			}
			foreign.R.Agent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AgentID) {
				local.R.AgentReceipts = append(local.R.AgentReceipts, foreign)
				if foreign.R == nil {
					foreign.R = &receiptR{}
				}
				foreign.R.Agent = local
				break
			}
		}
	}

	return nil
}

// LoadAgentRefunds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (personL) LoadAgentRefunds(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		var ok bool
		object, ok = maybePerson.(*Person)
		if !ok {
			object = new(Person)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePerson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePerson))
			}
		}
	} else {
		s, ok := maybePerson.(*[]*Person)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePerson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePerson))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.refunds`),
		qm.WhereIn(`alpha.refunds.agent_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load refunds")
	}

	var resultSlice []*Refund
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice refunds")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on refunds")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for refunds")
	}

	if singular {
		object.R.AgentRefunds = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &refundR{}
			}
			foreign.R.Agent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AgentID {
				local.R.AgentRefunds = append(local.R.AgentRefunds, foreign)
				if foreign.R == nil {
					foreign.R = &refundR{}
				}
				foreign.R.Agent = local
				break
			}
		}
	}

	return nil
}

// LoadAgentSalesorders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (personL) LoadAgentSalesorders(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		var ok bool
		object, ok = maybePerson.(*Person)
		if !ok {
			object = new(Person)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePerson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePerson))
			}
		}
	} else {
		s, ok := maybePerson.(*[]*Person)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePerson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePerson))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.salesorders`),
		qm.WhereIn(`alpha.salesorders.agent_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load salesorders")
	}

	var resultSlice []*Salesorder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice salesorders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on salesorders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for salesorders")
	}

	if singular {
		object.R.AgentSalesorders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &salesorderR{}
			}
			foreign.R.Agent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AgentID) {
				local.R.AgentSalesorders = append(local.R.AgentSalesorders, foreign)
				if foreign.R == nil {
					foreign.R = &salesorderR{}
				}
				foreign.R.Agent = local
				break
			}
		}
	}

	return nil
}

// LoadColleagueVerifiedByColleagues allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (personL) LoadColleagueVerifiedByColleagues(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		var ok bool
		object, ok = maybePerson.(*Person)
		if !ok {
			object = new(Person)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePerson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePerson))
			}
		}
	} else {
		s, ok := maybePerson.(*[]*Person)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePerson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePerson))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.verified_by_colleague`),
		qm.WhereIn(`alpha.verified_by_colleague.colleague_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load verified_by_colleague")
	}

	var resultSlice []*VerifiedByColleague
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice verified_by_colleague")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on verified_by_colleague")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for verified_by_colleague")
	}

	if singular {
		object.R.ColleagueVerifiedByColleagues = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &verifiedByColleagueR{}
			}
			foreign.R.Colleague = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ColleagueID) {
				local.R.ColleagueVerifiedByColleagues = append(local.R.ColleagueVerifiedByColleagues, foreign)
				if foreign.R == nil {
					foreign.R = &verifiedByColleagueR{}
				}
				foreign.R.Colleague = local
				break
			}
		}
	}

	return nil
}

// LoadSubjectVerifiedByColleagues allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (personL) LoadSubjectVerifiedByColleagues(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		var ok bool
		object, ok = maybePerson.(*Person)
		if !ok {
			object = new(Person)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePerson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePerson))
			}
		}
	} else {
		s, ok := maybePerson.(*[]*Person)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePerson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePerson))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.verified_by_colleague`),
		qm.WhereIn(`alpha.verified_by_colleague.subject_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load verified_by_colleague")
	}

	var resultSlice []*VerifiedByColleague
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice verified_by_colleague")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on verified_by_colleague")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for verified_by_colleague")
	}

	if singular {
		object.R.SubjectVerifiedByColleagues = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &verifiedByColleagueR{}
			}
			foreign.R.Subject = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SubjectID {
				local.R.SubjectVerifiedByColleagues = append(local.R.SubjectVerifiedByColleagues, foreign)
				if foreign.R == nil {
					foreign.R = &verifiedByColleagueR{}
				}
				foreign.R.Subject = local
				break
			}
		}
	}

	return nil
}

// LoadSubjectVerifiedByEmails allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (personL) LoadSubjectVerifiedByEmails(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		var ok bool
		object, ok = maybePerson.(*Person)
		if !ok {
			object = new(Person)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePerson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePerson))
			}
		}
	} else {
		s, ok := maybePerson.(*[]*Person)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePerson)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePerson))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.verified_by_email`),
		qm.WhereIn(`alpha.verified_by_email.subject_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load verified_by_email")
	}

	var resultSlice []*VerifiedByEmail
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice verified_by_email")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on verified_by_email")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for verified_by_email")
	}

	if singular {
		object.R.SubjectVerifiedByEmails = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &verifiedByEmailR{}
			}
			foreign.R.Subject = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SubjectID {
				local.R.SubjectVerifiedByEmails = append(local.R.SubjectVerifiedByEmails, foreign)
				if foreign.R == nil {
					foreign.R = &verifiedByEmailR{}
				}
				foreign.R.Subject = local
				break
			}
		}
	}

	return nil
}

// SetCompanyG of the person to the related item.
// Sets o.R.Company to related.
// Adds o to related.R.Persons.
// Uses the global database handle.
func (o *Person) SetCompanyG(ctx context.Context, insert bool, related *Company) error {
	return o.SetCompany(ctx, boil.GetContextDB(), insert, related)
}

// SetCompany of the person to the related item.
// Sets o.R.Company to related.
// Adds o to related.R.Persons.
func (o *Person) SetCompany(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Company) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"persons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"company_id"}),
		strmangle.WhereClause("\"", "\"", 2, personPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CompanyID = related.ID
	if o.R == nil {
		o.R = &personR{
			Company: related,
		}
	} else {
		o.R.Company = related
	}

	if related.R == nil {
		related.R = &companyR{
			Persons: PersonSlice{o},
		}
	} else {
		related.R.Persons = append(related.R.Persons, o)
	}

	return nil
}

// AddAgentCommissionsG adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.AgentCommissions.
// Sets related.R.Agent appropriately.
// Uses the global database handle.
func (o *Person) AddAgentCommissionsG(ctx context.Context, insert bool, related ...*Commission) error {
	return o.AddAgentCommissions(ctx, boil.GetContextDB(), insert, related...)
}

// AddAgentCommissions adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.AgentCommissions.
// Sets related.R.Agent appropriately.
func (o *Person) AddAgentCommissions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Commission) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AgentID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"commissions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"agent_id"}),
				strmangle.WhereClause("\"", "\"", 2, commissionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AgentID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &personR{
			AgentCommissions: related,
		}
	} else {
		o.R.AgentCommissions = append(o.R.AgentCommissions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &commissionR{
				Agent: o,
			}
		} else {
			rel.R.Agent = o
		}
	}
	return nil
}

// SetAgentCommissionsG removes all previously related items of the
// person replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Agent's AgentCommissions accordingly.
// Replaces o.R.AgentCommissions with related.
// Sets related.R.Agent's AgentCommissions accordingly.
// Uses the global database handle.
func (o *Person) SetAgentCommissionsG(ctx context.Context, insert bool, related ...*Commission) error {
	return o.SetAgentCommissions(ctx, boil.GetContextDB(), insert, related...)
}

// SetAgentCommissions removes all previously related items of the
// person replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Agent's AgentCommissions accordingly.
// Replaces o.R.AgentCommissions with related.
// Sets related.R.Agent's AgentCommissions accordingly.
func (o *Person) SetAgentCommissions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Commission) error {
	query := "update \"alpha\".\"commissions\" set \"agent_id\" = null where \"agent_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AgentCommissions {
			queries.SetScanner(&rel.AgentID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Agent = nil
		}
		o.R.AgentCommissions = nil
	}

	return o.AddAgentCommissions(ctx, exec, insert, related...)
}

// RemoveAgentCommissionsG relationships from objects passed in.
// Removes related items from R.AgentCommissions (uses pointer comparison, removal does not keep order)
// Sets related.R.Agent.
// Uses the global database handle.
func (o *Person) RemoveAgentCommissionsG(ctx context.Context, related ...*Commission) error {
	return o.RemoveAgentCommissions(ctx, boil.GetContextDB(), related...)
}

// RemoveAgentCommissions relationships from objects passed in.
// Removes related items from R.AgentCommissions (uses pointer comparison, removal does not keep order)
// Sets related.R.Agent.
func (o *Person) RemoveAgentCommissions(ctx context.Context, exec boil.ContextExecutor, related ...*Commission) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AgentID, nil)
		if rel.R != nil {
			rel.R.Agent = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("agent_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AgentCommissions {
			if rel != ri {
				continue
			}

			ln := len(o.R.AgentCommissions)
			if ln > 1 && i < ln-1 {
				o.R.AgentCommissions[i] = o.R.AgentCommissions[ln-1]
			}
			o.R.AgentCommissions = o.R.AgentCommissions[:ln-1]
			break
		}
	}

	return nil
}

// AddAgentDeliveriesG adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.AgentDeliveries.
// Sets related.R.Agent appropriately.
// Uses the global database handle.
func (o *Person) AddAgentDeliveriesG(ctx context.Context, insert bool, related ...*Delivery) error {
	return o.AddAgentDeliveries(ctx, boil.GetContextDB(), insert, related...)
}

// AddAgentDeliveries adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.AgentDeliveries.
// Sets related.R.Agent appropriately.
func (o *Person) AddAgentDeliveries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Delivery) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AgentID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"delivery\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"agent_id"}),
				strmangle.WhereClause("\"", "\"", 2, deliveryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AgentID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &personR{
			AgentDeliveries: related,
		}
	} else {
		o.R.AgentDeliveries = append(o.R.AgentDeliveries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deliveryR{
				Agent: o,
			}
		} else {
			rel.R.Agent = o
		}
	}
	return nil
}

// SetAgentDeliveriesG removes all previously related items of the
// person replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Agent's AgentDeliveries accordingly.
// Replaces o.R.AgentDeliveries with related.
// Sets related.R.Agent's AgentDeliveries accordingly.
// Uses the global database handle.
func (o *Person) SetAgentDeliveriesG(ctx context.Context, insert bool, related ...*Delivery) error {
	return o.SetAgentDeliveries(ctx, boil.GetContextDB(), insert, related...)
}

// SetAgentDeliveries removes all previously related items of the
// person replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Agent's AgentDeliveries accordingly.
// Replaces o.R.AgentDeliveries with related.
// Sets related.R.Agent's AgentDeliveries accordingly.
func (o *Person) SetAgentDeliveries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Delivery) error {
	query := "update \"alpha\".\"delivery\" set \"agent_id\" = null where \"agent_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AgentDeliveries {
			queries.SetScanner(&rel.AgentID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Agent = nil
		}
		o.R.AgentDeliveries = nil
	}

	return o.AddAgentDeliveries(ctx, exec, insert, related...)
}

// RemoveAgentDeliveriesG relationships from objects passed in.
// Removes related items from R.AgentDeliveries (uses pointer comparison, removal does not keep order)
// Sets related.R.Agent.
// Uses the global database handle.
func (o *Person) RemoveAgentDeliveriesG(ctx context.Context, related ...*Delivery) error {
	return o.RemoveAgentDeliveries(ctx, boil.GetContextDB(), related...)
}

// RemoveAgentDeliveries relationships from objects passed in.
// Removes related items from R.AgentDeliveries (uses pointer comparison, removal does not keep order)
// Sets related.R.Agent.
func (o *Person) RemoveAgentDeliveries(ctx context.Context, exec boil.ContextExecutor, related ...*Delivery) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AgentID, nil)
		if rel.R != nil {
			rel.R.Agent = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("agent_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AgentDeliveries {
			if rel != ri {
				continue
			}

			ln := len(o.R.AgentDeliveries)
			if ln > 1 && i < ln-1 {
				o.R.AgentDeliveries[i] = o.R.AgentDeliveries[ln-1]
			}
			o.R.AgentDeliveries = o.R.AgentDeliveries[:ln-1]
			break
		}
	}

	return nil
}

// AddAgentReceiptsG adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.AgentReceipts.
// Sets related.R.Agent appropriately.
// Uses the global database handle.
func (o *Person) AddAgentReceiptsG(ctx context.Context, insert bool, related ...*Receipt) error {
	return o.AddAgentReceipts(ctx, boil.GetContextDB(), insert, related...)
}

// AddAgentReceipts adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.AgentReceipts.
// Sets related.R.Agent appropriately.
func (o *Person) AddAgentReceipts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Receipt) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AgentID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"receipts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"agent_id"}),
				strmangle.WhereClause("\"", "\"", 2, receiptPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AgentID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &personR{
			AgentReceipts: related,
		}
	} else {
		o.R.AgentReceipts = append(o.R.AgentReceipts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &receiptR{
				Agent: o,
			}
		} else {
			rel.R.Agent = o
		}
	}
	return nil
}

// SetAgentReceiptsG removes all previously related items of the
// person replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Agent's AgentReceipts accordingly.
// Replaces o.R.AgentReceipts with related.
// Sets related.R.Agent's AgentReceipts accordingly.
// Uses the global database handle.
func (o *Person) SetAgentReceiptsG(ctx context.Context, insert bool, related ...*Receipt) error {
	return o.SetAgentReceipts(ctx, boil.GetContextDB(), insert, related...)
}

// SetAgentReceipts removes all previously related items of the
// person replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Agent's AgentReceipts accordingly.
// Replaces o.R.AgentReceipts with related.
// Sets related.R.Agent's AgentReceipts accordingly.
func (o *Person) SetAgentReceipts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Receipt) error {
	query := "update \"alpha\".\"receipts\" set \"agent_id\" = null where \"agent_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AgentReceipts {
			queries.SetScanner(&rel.AgentID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Agent = nil
		}
		o.R.AgentReceipts = nil
	}

	return o.AddAgentReceipts(ctx, exec, insert, related...)
}

// RemoveAgentReceiptsG relationships from objects passed in.
// Removes related items from R.AgentReceipts (uses pointer comparison, removal does not keep order)
// Sets related.R.Agent.
// Uses the global database handle.
func (o *Person) RemoveAgentReceiptsG(ctx context.Context, related ...*Receipt) error {
	return o.RemoveAgentReceipts(ctx, boil.GetContextDB(), related...)
}

// RemoveAgentReceipts relationships from objects passed in.
// Removes related items from R.AgentReceipts (uses pointer comparison, removal does not keep order)
// Sets related.R.Agent.
func (o *Person) RemoveAgentReceipts(ctx context.Context, exec boil.ContextExecutor, related ...*Receipt) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AgentID, nil)
		if rel.R != nil {
			rel.R.Agent = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("agent_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AgentReceipts {
			if rel != ri {
				continue
			}

			ln := len(o.R.AgentReceipts)
			if ln > 1 && i < ln-1 {
				o.R.AgentReceipts[i] = o.R.AgentReceipts[ln-1]
			}
			o.R.AgentReceipts = o.R.AgentReceipts[:ln-1]
			break
		}
	}

	return nil
}

// AddAgentRefundsG adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.AgentRefunds.
// Sets related.R.Agent appropriately.
// Uses the global database handle.
func (o *Person) AddAgentRefundsG(ctx context.Context, insert bool, related ...*Refund) error {
	return o.AddAgentRefunds(ctx, boil.GetContextDB(), insert, related...)
}

// AddAgentRefunds adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.AgentRefunds.
// Sets related.R.Agent appropriately.
func (o *Person) AddAgentRefunds(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Refund) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AgentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"refunds\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"agent_id"}),
				strmangle.WhereClause("\"", "\"", 2, refundPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AgentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &personR{
			AgentRefunds: related,
		}
	} else {
		o.R.AgentRefunds = append(o.R.AgentRefunds, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &refundR{
				Agent: o,
			}
		} else {
			rel.R.Agent = o
		}
	}
	return nil
}

// AddAgentSalesordersG adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.AgentSalesorders.
// Sets related.R.Agent appropriately.
// Uses the global database handle.
func (o *Person) AddAgentSalesordersG(ctx context.Context, insert bool, related ...*Salesorder) error {
	return o.AddAgentSalesorders(ctx, boil.GetContextDB(), insert, related...)
}

// AddAgentSalesorders adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.AgentSalesorders.
// Sets related.R.Agent appropriately.
func (o *Person) AddAgentSalesorders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Salesorder) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AgentID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"salesorders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"agent_id"}),
				strmangle.WhereClause("\"", "\"", 2, salesorderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AgentID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &personR{
			AgentSalesorders: related,
		}
	} else {
		o.R.AgentSalesorders = append(o.R.AgentSalesorders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &salesorderR{
				Agent: o,
			}
		} else {
			rel.R.Agent = o
		}
	}
	return nil
}

// SetAgentSalesordersG removes all previously related items of the
// person replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Agent's AgentSalesorders accordingly.
// Replaces o.R.AgentSalesorders with related.
// Sets related.R.Agent's AgentSalesorders accordingly.
// Uses the global database handle.
func (o *Person) SetAgentSalesordersG(ctx context.Context, insert bool, related ...*Salesorder) error {
	return o.SetAgentSalesorders(ctx, boil.GetContextDB(), insert, related...)
}

// SetAgentSalesorders removes all previously related items of the
// person replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Agent's AgentSalesorders accordingly.
// Replaces o.R.AgentSalesorders with related.
// Sets related.R.Agent's AgentSalesorders accordingly.
func (o *Person) SetAgentSalesorders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Salesorder) error {
	query := "update \"alpha\".\"salesorders\" set \"agent_id\" = null where \"agent_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AgentSalesorders {
			queries.SetScanner(&rel.AgentID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Agent = nil
		}
		o.R.AgentSalesorders = nil
	}

	return o.AddAgentSalesorders(ctx, exec, insert, related...)
}

// RemoveAgentSalesordersG relationships from objects passed in.
// Removes related items from R.AgentSalesorders (uses pointer comparison, removal does not keep order)
// Sets related.R.Agent.
// Uses the global database handle.
func (o *Person) RemoveAgentSalesordersG(ctx context.Context, related ...*Salesorder) error {
	return o.RemoveAgentSalesorders(ctx, boil.GetContextDB(), related...)
}

// RemoveAgentSalesorders relationships from objects passed in.
// Removes related items from R.AgentSalesorders (uses pointer comparison, removal does not keep order)
// Sets related.R.Agent.
func (o *Person) RemoveAgentSalesorders(ctx context.Context, exec boil.ContextExecutor, related ...*Salesorder) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AgentID, nil)
		if rel.R != nil {
			rel.R.Agent = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("agent_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AgentSalesorders {
			if rel != ri {
				continue
			}

			ln := len(o.R.AgentSalesorders)
			if ln > 1 && i < ln-1 {
				o.R.AgentSalesorders[i] = o.R.AgentSalesorders[ln-1]
			}
			o.R.AgentSalesorders = o.R.AgentSalesorders[:ln-1]
			break
		}
	}

	return nil
}

// AddColleagueVerifiedByColleaguesG adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.ColleagueVerifiedByColleagues.
// Sets related.R.Colleague appropriately.
// Uses the global database handle.
func (o *Person) AddColleagueVerifiedByColleaguesG(ctx context.Context, insert bool, related ...*VerifiedByColleague) error {
	return o.AddColleagueVerifiedByColleagues(ctx, boil.GetContextDB(), insert, related...)
}

// AddColleagueVerifiedByColleagues adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.ColleagueVerifiedByColleagues.
// Sets related.R.Colleague appropriately.
func (o *Person) AddColleagueVerifiedByColleagues(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VerifiedByColleague) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ColleagueID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"verified_by_colleague\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"colleague_id"}),
				strmangle.WhereClause("\"", "\"", 2, verifiedByColleaguePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ColleagueID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &personR{
			ColleagueVerifiedByColleagues: related,
		}
	} else {
		o.R.ColleagueVerifiedByColleagues = append(o.R.ColleagueVerifiedByColleagues, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &verifiedByColleagueR{
				Colleague: o,
			}
		} else {
			rel.R.Colleague = o
		}
	}
	return nil
}

// SetColleagueVerifiedByColleaguesG removes all previously related items of the
// person replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Colleague's ColleagueVerifiedByColleagues accordingly.
// Replaces o.R.ColleagueVerifiedByColleagues with related.
// Sets related.R.Colleague's ColleagueVerifiedByColleagues accordingly.
// Uses the global database handle.
func (o *Person) SetColleagueVerifiedByColleaguesG(ctx context.Context, insert bool, related ...*VerifiedByColleague) error {
	return o.SetColleagueVerifiedByColleagues(ctx, boil.GetContextDB(), insert, related...)
}

// SetColleagueVerifiedByColleagues removes all previously related items of the
// person replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Colleague's ColleagueVerifiedByColleagues accordingly.
// Replaces o.R.ColleagueVerifiedByColleagues with related.
// Sets related.R.Colleague's ColleagueVerifiedByColleagues accordingly.
func (o *Person) SetColleagueVerifiedByColleagues(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VerifiedByColleague) error {
	query := "update \"alpha\".\"verified_by_colleague\" set \"colleague_id\" = null where \"colleague_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ColleagueVerifiedByColleagues {
			queries.SetScanner(&rel.ColleagueID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Colleague = nil
		}
		o.R.ColleagueVerifiedByColleagues = nil
	}

	return o.AddColleagueVerifiedByColleagues(ctx, exec, insert, related...)
}

// RemoveColleagueVerifiedByColleaguesG relationships from objects passed in.
// Removes related items from R.ColleagueVerifiedByColleagues (uses pointer comparison, removal does not keep order)
// Sets related.R.Colleague.
// Uses the global database handle.
func (o *Person) RemoveColleagueVerifiedByColleaguesG(ctx context.Context, related ...*VerifiedByColleague) error {
	return o.RemoveColleagueVerifiedByColleagues(ctx, boil.GetContextDB(), related...)
}

// RemoveColleagueVerifiedByColleagues relationships from objects passed in.
// Removes related items from R.ColleagueVerifiedByColleagues (uses pointer comparison, removal does not keep order)
// Sets related.R.Colleague.
func (o *Person) RemoveColleagueVerifiedByColleagues(ctx context.Context, exec boil.ContextExecutor, related ...*VerifiedByColleague) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ColleagueID, nil)
		if rel.R != nil {
			rel.R.Colleague = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("colleague_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ColleagueVerifiedByColleagues {
			if rel != ri {
				continue
			}

			ln := len(o.R.ColleagueVerifiedByColleagues)
			if ln > 1 && i < ln-1 {
				o.R.ColleagueVerifiedByColleagues[i] = o.R.ColleagueVerifiedByColleagues[ln-1]
			}
			o.R.ColleagueVerifiedByColleagues = o.R.ColleagueVerifiedByColleagues[:ln-1]
			break
		}
	}

	return nil
}

// AddSubjectVerifiedByColleaguesG adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.SubjectVerifiedByColleagues.
// Sets related.R.Subject appropriately.
// Uses the global database handle.
func (o *Person) AddSubjectVerifiedByColleaguesG(ctx context.Context, insert bool, related ...*VerifiedByColleague) error {
	return o.AddSubjectVerifiedByColleagues(ctx, boil.GetContextDB(), insert, related...)
}

// AddSubjectVerifiedByColleagues adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.SubjectVerifiedByColleagues.
// Sets related.R.Subject appropriately.
func (o *Person) AddSubjectVerifiedByColleagues(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VerifiedByColleague) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SubjectID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"verified_by_colleague\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"subject_id"}),
				strmangle.WhereClause("\"", "\"", 2, verifiedByColleaguePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SubjectID = o.ID
		}
	}

	if o.R == nil {
		o.R = &personR{
			SubjectVerifiedByColleagues: related,
		}
	} else {
		o.R.SubjectVerifiedByColleagues = append(o.R.SubjectVerifiedByColleagues, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &verifiedByColleagueR{
				Subject: o,
			}
		} else {
			rel.R.Subject = o
		}
	}
	return nil
}

// AddSubjectVerifiedByEmailsG adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.SubjectVerifiedByEmails.
// Sets related.R.Subject appropriately.
// Uses the global database handle.
func (o *Person) AddSubjectVerifiedByEmailsG(ctx context.Context, insert bool, related ...*VerifiedByEmail) error {
	return o.AddSubjectVerifiedByEmails(ctx, boil.GetContextDB(), insert, related...)
}

// AddSubjectVerifiedByEmails adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.SubjectVerifiedByEmails.
// Sets related.R.Subject appropriately.
func (o *Person) AddSubjectVerifiedByEmails(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VerifiedByEmail) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SubjectID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"verified_by_email\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"subject_id"}),
				strmangle.WhereClause("\"", "\"", 2, verifiedByEmailPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SubjectID = o.ID
		}
	}

	if o.R == nil {
		o.R = &personR{
			SubjectVerifiedByEmails: related,
		}
	} else {
		o.R.SubjectVerifiedByEmails = append(o.R.SubjectVerifiedByEmails, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &verifiedByEmailR{
				Subject: o,
			}
		} else {
			rel.R.Subject = o
		}
	}
	return nil
}

// Persons retrieves all the records using an executor.
func Persons(mods ...qm.QueryMod) personQuery {
	mods = append(mods, qm.From("\"alpha\".\"persons\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"persons\".*"})
	}

	return personQuery{q}
}

// FindPersonG retrieves a single record by ID.
func FindPersonG(ctx context.Context, iD int, selectCols ...string) (*Person, error) {
	return FindPerson(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindPerson retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPerson(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Person, error) {
	personObj := &Person{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"persons\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, personObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from persons")
	}

	return personObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Person) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Person) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no persons provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(personColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	personInsertCacheMut.RLock()
	cache, cached := personInsertCache[key]
	personInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			personAllColumns,
			personColumnsWithDefault,
			personColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, personGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(personType, personMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(personType, personMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"persons\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"persons\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into persons")
	}

	if !cached {
		personInsertCacheMut.Lock()
		personInsertCache[key] = cache
		personInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Person record using the global executor.
// See Update for more documentation.
func (o *Person) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Person.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Person) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	personUpdateCacheMut.RLock()
	cache, cached := personUpdateCache[key]
	personUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			personAllColumns,
			personPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, personGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update persons, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"persons\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, personPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(personType, personMapping, append(wl, personPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update persons row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for persons")
	}

	if !cached {
		personUpdateCacheMut.Lock()
		personUpdateCache[key] = cache
		personUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q personQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q personQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for persons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for persons")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PersonSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PersonSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"persons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, personPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in person slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all person")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Person) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Person) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no persons provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(personColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	personUpsertCacheMut.RLock()
	cache, cached := personUpsertCache[key]
	personUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			personAllColumns,
			personColumnsWithDefault,
			personColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			personAllColumns,
			personPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, personGeneratedColumns)
		update = strmangle.SetComplement(update, personGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert persons, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(personPrimaryKeyColumns))
			copy(conflict, personPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"persons\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(personType, personMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(personType, personMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert persons")
	}

	if !cached {
		personUpsertCacheMut.Lock()
		personUpsertCache[key] = cache
		personUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single Person record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Person) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Person record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Person) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Person provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), personPrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"persons\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from persons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for persons")
	}

	return rowsAff, nil
}

func (q personQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q personQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no personQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from persons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for persons")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o PersonSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PersonSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"persons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, personPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from person slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for persons")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Person) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Person provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Person) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPerson(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PersonSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty PersonSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PersonSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PersonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"persons\".* FROM \"alpha\".\"persons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, personPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PersonSlice")
	}

	*o = slice

	return nil
}

// PersonExistsG checks if the Person row exists.
func PersonExistsG(ctx context.Context, iD int) (bool, error) {
	return PersonExists(ctx, boil.GetContextDB(), iD)
}

// PersonExists checks if the Person row exists.
func PersonExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"persons\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if persons exists")
	}

	return exists, nil
}
