// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Receipt is an object representing the database table.
type Receipt struct {
	ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	SalesorderID null.Int  `boil:"salesorder_id" json:"salesorder_id,omitempty" toml:"salesorder_id" yaml:"salesorder_id,omitempty"`
	AccountID    null.Int  `boil:"account_id" json:"account_id,omitempty" toml:"account_id" yaml:"account_id,omitempty"`
	Total        null.Int  `boil:"total" json:"total,omitempty" toml:"total" yaml:"total,omitempty"`
	Tax          null.Int  `boil:"tax" json:"tax,omitempty" toml:"tax" yaml:"tax,omitempty"`
	AgentID      null.Int  `boil:"agent_id" json:"agent_id,omitempty" toml:"agent_id" yaml:"agent_id,omitempty"`
	Created      time.Time `boil:"created" json:"created" toml:"created" yaml:"created"`

	R *receiptR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L receiptL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReceiptColumns = struct {
	ID           string
	SalesorderID string
	AccountID    string
	Total        string
	Tax          string
	AgentID      string
	Created      string
}{
	ID:           "id",
	SalesorderID: "salesorder_id",
	AccountID:    "account_id",
	Total:        "total",
	Tax:          "tax",
	AgentID:      "agent_id",
	Created:      "created",
}

var ReceiptTableColumns = struct {
	ID           string
	SalesorderID string
	AccountID    string
	Total        string
	Tax          string
	AgentID      string
	Created      string
}{
	ID:           "receipts.id",
	SalesorderID: "receipts.salesorder_id",
	AccountID:    "receipts.account_id",
	Total:        "receipts.total",
	Tax:          "receipts.tax",
	AgentID:      "receipts.agent_id",
	Created:      "receipts.created",
}

// Generated where

var ReceiptWhere = struct {
	ID           whereHelperint
	SalesorderID whereHelpernull_Int
	AccountID    whereHelpernull_Int
	Total        whereHelpernull_Int
	Tax          whereHelpernull_Int
	AgentID      whereHelpernull_Int
	Created      whereHelpertime_Time
}{
	ID:           whereHelperint{field: "\"alpha\".\"receipts\".\"id\""},
	SalesorderID: whereHelpernull_Int{field: "\"alpha\".\"receipts\".\"salesorder_id\""},
	AccountID:    whereHelpernull_Int{field: "\"alpha\".\"receipts\".\"account_id\""},
	Total:        whereHelpernull_Int{field: "\"alpha\".\"receipts\".\"total\""},
	Tax:          whereHelpernull_Int{field: "\"alpha\".\"receipts\".\"tax\""},
	AgentID:      whereHelpernull_Int{field: "\"alpha\".\"receipts\".\"agent_id\""},
	Created:      whereHelpertime_Time{field: "\"alpha\".\"receipts\".\"created\""},
}

// ReceiptRels is where relationship names are stored.
var ReceiptRels = struct {
	Account    string
	Agent      string
	Salesorder string
}{
	Account:    "Account",
	Agent:      "Agent",
	Salesorder: "Salesorder",
}

// receiptR is where relationships are stored.
type receiptR struct {
	Account    *Payment    `boil:"Account" json:"Account" toml:"Account" yaml:"Account"`
	Agent      *Person     `boil:"Agent" json:"Agent" toml:"Agent" yaml:"Agent"`
	Salesorder *Salesorder `boil:"Salesorder" json:"Salesorder" toml:"Salesorder" yaml:"Salesorder"`
}

// NewStruct creates a new relationship struct
func (*receiptR) NewStruct() *receiptR {
	return &receiptR{}
}

func (r *receiptR) GetAccount() *Payment {
	if r == nil {
		return nil
	}
	return r.Account
}

func (r *receiptR) GetAgent() *Person {
	if r == nil {
		return nil
	}
	return r.Agent
}

func (r *receiptR) GetSalesorder() *Salesorder {
	if r == nil {
		return nil
	}
	return r.Salesorder
}

// receiptL is where Load methods for each relationship are stored.
type receiptL struct{}

var (
	receiptAllColumns            = []string{"id", "salesorder_id", "account_id", "total", "tax", "agent_id", "created"}
	receiptColumnsWithoutDefault = []string{}
	receiptColumnsWithDefault    = []string{"id", "salesorder_id", "account_id", "total", "tax", "agent_id", "created"}
	receiptPrimaryKeyColumns     = []string{"id"}
	receiptGeneratedColumns      = []string{"id"}
)

type (
	// ReceiptSlice is an alias for a slice of pointers to Receipt.
	// This should almost always be used instead of []Receipt.
	ReceiptSlice []*Receipt

	receiptQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	receiptType                 = reflect.TypeOf(&Receipt{})
	receiptMapping              = queries.MakeStructMapping(receiptType)
	receiptPrimaryKeyMapping, _ = queries.BindMapping(receiptType, receiptMapping, receiptPrimaryKeyColumns)
	receiptInsertCacheMut       sync.RWMutex
	receiptInsertCache          = make(map[string]insertCache)
	receiptUpdateCacheMut       sync.RWMutex
	receiptUpdateCache          = make(map[string]updateCache)
	receiptUpsertCacheMut       sync.RWMutex
	receiptUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single receipt record from the query using the global executor.
func (q receiptQuery) OneG(ctx context.Context) (*Receipt, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single receipt record from the query.
func (q receiptQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Receipt, error) {
	o := &Receipt{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for receipts")
	}

	return o, nil
}

// AllG returns all Receipt records from the query using the global executor.
func (q receiptQuery) AllG(ctx context.Context) (ReceiptSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Receipt records from the query.
func (q receiptQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReceiptSlice, error) {
	var o []*Receipt

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Receipt slice")
	}

	return o, nil
}

// CountG returns the count of all Receipt records in the query using the global executor
func (q receiptQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Receipt records in the query.
func (q receiptQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count receipts rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q receiptQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q receiptQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if receipts exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *Receipt) Account(mods ...qm.QueryMod) paymentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	return Payments(queryMods...)
}

// Agent pointed to by the foreign key.
func (o *Receipt) Agent(mods ...qm.QueryMod) personQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AgentID),
	}

	queryMods = append(queryMods, mods...)

	return Persons(queryMods...)
}

// Salesorder pointed to by the foreign key.
func (o *Receipt) Salesorder(mods ...qm.QueryMod) salesorderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SalesorderID),
	}

	queryMods = append(queryMods, mods...)

	return Salesorders(queryMods...)
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (receiptL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReceipt interface{}, mods queries.Applicator) error {
	var slice []*Receipt
	var object *Receipt

	if singular {
		var ok bool
		object, ok = maybeReceipt.(*Receipt)
		if !ok {
			object = new(Receipt)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReceipt)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReceipt))
			}
		}
	} else {
		s, ok := maybeReceipt.(*[]*Receipt)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReceipt)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReceipt))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &receiptR{}
		}
		if !queries.IsNil(object.AccountID) {
			args = append(args, object.AccountID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &receiptR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AccountID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AccountID) {
				args = append(args, obj.AccountID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.payment`),
		qm.WhereIn(`alpha.payment.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Payment")
	}

	var resultSlice []*Payment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Payment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for payment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payment")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &paymentR{}
		}
		foreign.R.AccountReceipts = append(foreign.R.AccountReceipts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AccountID, foreign.ID) {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &paymentR{}
				}
				foreign.R.AccountReceipts = append(foreign.R.AccountReceipts, local)
				break
			}
		}
	}

	return nil
}

// LoadAgent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (receiptL) LoadAgent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReceipt interface{}, mods queries.Applicator) error {
	var slice []*Receipt
	var object *Receipt

	if singular {
		var ok bool
		object, ok = maybeReceipt.(*Receipt)
		if !ok {
			object = new(Receipt)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReceipt)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReceipt))
			}
		}
	} else {
		s, ok := maybeReceipt.(*[]*Receipt)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReceipt)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReceipt))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &receiptR{}
		}
		if !queries.IsNil(object.AgentID) {
			args = append(args, object.AgentID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &receiptR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AgentID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AgentID) {
				args = append(args, obj.AgentID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.persons`),
		qm.WhereIn(`alpha.persons.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Person")
	}

	var resultSlice []*Person
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Person")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for persons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for persons")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Agent = foreign
		if foreign.R == nil {
			foreign.R = &personR{}
		}
		foreign.R.AgentReceipts = append(foreign.R.AgentReceipts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AgentID, foreign.ID) {
				local.R.Agent = foreign
				if foreign.R == nil {
					foreign.R = &personR{}
				}
				foreign.R.AgentReceipts = append(foreign.R.AgentReceipts, local)
				break
			}
		}
	}

	return nil
}

// LoadSalesorder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (receiptL) LoadSalesorder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReceipt interface{}, mods queries.Applicator) error {
	var slice []*Receipt
	var object *Receipt

	if singular {
		var ok bool
		object, ok = maybeReceipt.(*Receipt)
		if !ok {
			object = new(Receipt)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReceipt)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReceipt))
			}
		}
	} else {
		s, ok := maybeReceipt.(*[]*Receipt)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReceipt)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReceipt))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &receiptR{}
		}
		if !queries.IsNil(object.SalesorderID) {
			args = append(args, object.SalesorderID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &receiptR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SalesorderID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SalesorderID) {
				args = append(args, obj.SalesorderID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.salesorders`),
		qm.WhereIn(`alpha.salesorders.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Salesorder")
	}

	var resultSlice []*Salesorder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Salesorder")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for salesorders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for salesorders")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Salesorder = foreign
		if foreign.R == nil {
			foreign.R = &salesorderR{}
		}
		foreign.R.Receipts = append(foreign.R.Receipts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SalesorderID, foreign.ID) {
				local.R.Salesorder = foreign
				if foreign.R == nil {
					foreign.R = &salesorderR{}
				}
				foreign.R.Receipts = append(foreign.R.Receipts, local)
				break
			}
		}
	}

	return nil
}

// SetAccountG of the receipt to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.AccountReceipts.
// Uses the global database handle.
func (o *Receipt) SetAccountG(ctx context.Context, insert bool, related *Payment) error {
	return o.SetAccount(ctx, boil.GetContextDB(), insert, related)
}

// SetAccount of the receipt to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.AccountReceipts.
func (o *Receipt) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Payment) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"receipts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
		strmangle.WhereClause("\"", "\"", 2, receiptPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AccountID, related.ID)
	if o.R == nil {
		o.R = &receiptR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &paymentR{
			AccountReceipts: ReceiptSlice{o},
		}
	} else {
		related.R.AccountReceipts = append(related.R.AccountReceipts, o)
	}

	return nil
}

// RemoveAccountG relationship.
// Sets o.R.Account to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Receipt) RemoveAccountG(ctx context.Context, related *Payment) error {
	return o.RemoveAccount(ctx, boil.GetContextDB(), related)
}

// RemoveAccount relationship.
// Sets o.R.Account to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Receipt) RemoveAccount(ctx context.Context, exec boil.ContextExecutor, related *Payment) error {
	var err error

	queries.SetScanner(&o.AccountID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("account_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Account = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AccountReceipts {
		if queries.Equal(o.AccountID, ri.AccountID) {
			continue
		}

		ln := len(related.R.AccountReceipts)
		if ln > 1 && i < ln-1 {
			related.R.AccountReceipts[i] = related.R.AccountReceipts[ln-1]
		}
		related.R.AccountReceipts = related.R.AccountReceipts[:ln-1]
		break
	}
	return nil
}

// SetAgentG of the receipt to the related item.
// Sets o.R.Agent to related.
// Adds o to related.R.AgentReceipts.
// Uses the global database handle.
func (o *Receipt) SetAgentG(ctx context.Context, insert bool, related *Person) error {
	return o.SetAgent(ctx, boil.GetContextDB(), insert, related)
}

// SetAgent of the receipt to the related item.
// Sets o.R.Agent to related.
// Adds o to related.R.AgentReceipts.
func (o *Receipt) SetAgent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Person) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"receipts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"agent_id"}),
		strmangle.WhereClause("\"", "\"", 2, receiptPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AgentID, related.ID)
	if o.R == nil {
		o.R = &receiptR{
			Agent: related,
		}
	} else {
		o.R.Agent = related
	}

	if related.R == nil {
		related.R = &personR{
			AgentReceipts: ReceiptSlice{o},
		}
	} else {
		related.R.AgentReceipts = append(related.R.AgentReceipts, o)
	}

	return nil
}

// RemoveAgentG relationship.
// Sets o.R.Agent to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Receipt) RemoveAgentG(ctx context.Context, related *Person) error {
	return o.RemoveAgent(ctx, boil.GetContextDB(), related)
}

// RemoveAgent relationship.
// Sets o.R.Agent to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Receipt) RemoveAgent(ctx context.Context, exec boil.ContextExecutor, related *Person) error {
	var err error

	queries.SetScanner(&o.AgentID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("agent_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Agent = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AgentReceipts {
		if queries.Equal(o.AgentID, ri.AgentID) {
			continue
		}

		ln := len(related.R.AgentReceipts)
		if ln > 1 && i < ln-1 {
			related.R.AgentReceipts[i] = related.R.AgentReceipts[ln-1]
		}
		related.R.AgentReceipts = related.R.AgentReceipts[:ln-1]
		break
	}
	return nil
}

// SetSalesorderG of the receipt to the related item.
// Sets o.R.Salesorder to related.
// Adds o to related.R.Receipts.
// Uses the global database handle.
func (o *Receipt) SetSalesorderG(ctx context.Context, insert bool, related *Salesorder) error {
	return o.SetSalesorder(ctx, boil.GetContextDB(), insert, related)
}

// SetSalesorder of the receipt to the related item.
// Sets o.R.Salesorder to related.
// Adds o to related.R.Receipts.
func (o *Receipt) SetSalesorder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Salesorder) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"receipts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"salesorder_id"}),
		strmangle.WhereClause("\"", "\"", 2, receiptPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SalesorderID, related.ID)
	if o.R == nil {
		o.R = &receiptR{
			Salesorder: related,
		}
	} else {
		o.R.Salesorder = related
	}

	if related.R == nil {
		related.R = &salesorderR{
			Receipts: ReceiptSlice{o},
		}
	} else {
		related.R.Receipts = append(related.R.Receipts, o)
	}

	return nil
}

// RemoveSalesorderG relationship.
// Sets o.R.Salesorder to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Receipt) RemoveSalesorderG(ctx context.Context, related *Salesorder) error {
	return o.RemoveSalesorder(ctx, boil.GetContextDB(), related)
}

// RemoveSalesorder relationship.
// Sets o.R.Salesorder to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Receipt) RemoveSalesorder(ctx context.Context, exec boil.ContextExecutor, related *Salesorder) error {
	var err error

	queries.SetScanner(&o.SalesorderID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("salesorder_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Salesorder = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Receipts {
		if queries.Equal(o.SalesorderID, ri.SalesorderID) {
			continue
		}

		ln := len(related.R.Receipts)
		if ln > 1 && i < ln-1 {
			related.R.Receipts[i] = related.R.Receipts[ln-1]
		}
		related.R.Receipts = related.R.Receipts[:ln-1]
		break
	}
	return nil
}

// Receipts retrieves all the records using an executor.
func Receipts(mods ...qm.QueryMod) receiptQuery {
	mods = append(mods, qm.From("\"alpha\".\"receipts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"receipts\".*"})
	}

	return receiptQuery{q}
}

// FindReceiptG retrieves a single record by ID.
func FindReceiptG(ctx context.Context, iD int, selectCols ...string) (*Receipt, error) {
	return FindReceipt(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindReceipt retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReceipt(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Receipt, error) {
	receiptObj := &Receipt{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"receipts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, receiptObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from receipts")
	}

	return receiptObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Receipt) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Receipt) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no receipts provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(receiptColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	receiptInsertCacheMut.RLock()
	cache, cached := receiptInsertCache[key]
	receiptInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			receiptAllColumns,
			receiptColumnsWithDefault,
			receiptColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, receiptGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(receiptType, receiptMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(receiptType, receiptMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"receipts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"receipts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into receipts")
	}

	if !cached {
		receiptInsertCacheMut.Lock()
		receiptInsertCache[key] = cache
		receiptInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Receipt record using the global executor.
// See Update for more documentation.
func (o *Receipt) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Receipt.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Receipt) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	receiptUpdateCacheMut.RLock()
	cache, cached := receiptUpdateCache[key]
	receiptUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			receiptAllColumns,
			receiptPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, receiptGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update receipts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"receipts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, receiptPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(receiptType, receiptMapping, append(wl, receiptPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update receipts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for receipts")
	}

	if !cached {
		receiptUpdateCacheMut.Lock()
		receiptUpdateCache[key] = cache
		receiptUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q receiptQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q receiptQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for receipts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for receipts")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ReceiptSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReceiptSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), receiptPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"receipts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, receiptPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in receipt slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all receipt")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Receipt) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Receipt) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no receipts provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(receiptColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	receiptUpsertCacheMut.RLock()
	cache, cached := receiptUpsertCache[key]
	receiptUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			receiptAllColumns,
			receiptColumnsWithDefault,
			receiptColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			receiptAllColumns,
			receiptPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, receiptGeneratedColumns)
		update = strmangle.SetComplement(update, receiptGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert receipts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(receiptPrimaryKeyColumns))
			copy(conflict, receiptPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"receipts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(receiptType, receiptMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(receiptType, receiptMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert receipts")
	}

	if !cached {
		receiptUpsertCacheMut.Lock()
		receiptUpsertCache[key] = cache
		receiptUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single Receipt record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Receipt) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Receipt record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Receipt) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Receipt provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), receiptPrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"receipts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from receipts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for receipts")
	}

	return rowsAff, nil
}

func (q receiptQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q receiptQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no receiptQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from receipts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for receipts")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ReceiptSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReceiptSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), receiptPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"receipts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, receiptPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from receipt slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for receipts")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Receipt) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Receipt provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Receipt) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReceipt(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReceiptSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ReceiptSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReceiptSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReceiptSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), receiptPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"receipts\".* FROM \"alpha\".\"receipts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, receiptPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReceiptSlice")
	}

	*o = slice

	return nil
}

// ReceiptExistsG checks if the Receipt row exists.
func ReceiptExistsG(ctx context.Context, iD int) (bool, error) {
	return ReceiptExists(ctx, boil.GetContextDB(), iD)
}

// ReceiptExists checks if the Receipt row exists.
func ReceiptExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"receipts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if receipts exists")
	}

	return exists, nil
}
