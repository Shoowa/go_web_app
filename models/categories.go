// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Category is an object representing the database table.
type Category struct {
	ID   int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *categoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L categoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CategoryColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

var CategoryTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "categories.id",
	Name: "categories.name",
}

// Generated where

var CategoryWhere = struct {
	ID   whereHelperint
	Name whereHelperstring
}{
	ID:   whereHelperint{field: "\"alpha\".\"categories\".\"id\""},
	Name: whereHelperstring{field: "\"alpha\".\"categories\".\"name\""},
}

// CategoryRels is where relationship names are stored.
var CategoryRels = struct {
	CommissionItems string
	Products        string
	TaxCounties     string
	TaxMunis        string
	TaxStates       string
}{
	CommissionItems: "CommissionItems",
	Products:        "Products",
	TaxCounties:     "TaxCounties",
	TaxMunis:        "TaxMunis",
	TaxStates:       "TaxStates",
}

// categoryR is where relationships are stored.
type categoryR struct {
	CommissionItems CommissionItemSlice `boil:"CommissionItems" json:"CommissionItems" toml:"CommissionItems" yaml:"CommissionItems"`
	Products        ProductSlice        `boil:"Products" json:"Products" toml:"Products" yaml:"Products"`
	TaxCounties     TaxCountySlice      `boil:"TaxCounties" json:"TaxCounties" toml:"TaxCounties" yaml:"TaxCounties"`
	TaxMunis        TaxMuniSlice        `boil:"TaxMunis" json:"TaxMunis" toml:"TaxMunis" yaml:"TaxMunis"`
	TaxStates       TaxStateSlice       `boil:"TaxStates" json:"TaxStates" toml:"TaxStates" yaml:"TaxStates"`
}

// NewStruct creates a new relationship struct
func (*categoryR) NewStruct() *categoryR {
	return &categoryR{}
}

func (r *categoryR) GetCommissionItems() CommissionItemSlice {
	if r == nil {
		return nil
	}
	return r.CommissionItems
}

func (r *categoryR) GetProducts() ProductSlice {
	if r == nil {
		return nil
	}
	return r.Products
}

func (r *categoryR) GetTaxCounties() TaxCountySlice {
	if r == nil {
		return nil
	}
	return r.TaxCounties
}

func (r *categoryR) GetTaxMunis() TaxMuniSlice {
	if r == nil {
		return nil
	}
	return r.TaxMunis
}

func (r *categoryR) GetTaxStates() TaxStateSlice {
	if r == nil {
		return nil
	}
	return r.TaxStates
}

// categoryL is where Load methods for each relationship are stored.
type categoryL struct{}

var (
	categoryAllColumns            = []string{"id", "name"}
	categoryColumnsWithoutDefault = []string{"name"}
	categoryColumnsWithDefault    = []string{"id"}
	categoryPrimaryKeyColumns     = []string{"id"}
	categoryGeneratedColumns      = []string{"id"}
)

type (
	// CategorySlice is an alias for a slice of pointers to Category.
	// This should almost always be used instead of []Category.
	CategorySlice []*Category

	categoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	categoryType                 = reflect.TypeOf(&Category{})
	categoryMapping              = queries.MakeStructMapping(categoryType)
	categoryPrimaryKeyMapping, _ = queries.BindMapping(categoryType, categoryMapping, categoryPrimaryKeyColumns)
	categoryInsertCacheMut       sync.RWMutex
	categoryInsertCache          = make(map[string]insertCache)
	categoryUpdateCacheMut       sync.RWMutex
	categoryUpdateCache          = make(map[string]updateCache)
	categoryUpsertCacheMut       sync.RWMutex
	categoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single category record from the query using the global executor.
func (q categoryQuery) OneG(ctx context.Context) (*Category, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single category record from the query.
func (q categoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Category, error) {
	o := &Category{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for categories")
	}

	return o, nil
}

// AllG returns all Category records from the query using the global executor.
func (q categoryQuery) AllG(ctx context.Context) (CategorySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Category records from the query.
func (q categoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (CategorySlice, error) {
	var o []*Category

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Category slice")
	}

	return o, nil
}

// CountG returns the count of all Category records in the query using the global executor
func (q categoryQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Category records in the query.
func (q categoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count categories rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q categoryQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q categoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if categories exists")
	}

	return count > 0, nil
}

// CommissionItems retrieves all the commission_item's CommissionItems with an executor.
func (o *Category) CommissionItems(mods ...qm.QueryMod) commissionItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"commission_items\".\"category_id\"=?", o.ID),
	)

	return CommissionItems(queryMods...)
}

// Products retrieves all the product's Products with an executor.
func (o *Category) Products(mods ...qm.QueryMod) productQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"products\".\"category_id\"=?", o.ID),
	)

	return Products(queryMods...)
}

// TaxCounties retrieves all the tax_county's TaxCounties with an executor.
func (o *Category) TaxCounties(mods ...qm.QueryMod) taxCountyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"tax_county\".\"category_id\"=?", o.ID),
	)

	return TaxCounties(queryMods...)
}

// TaxMunis retrieves all the tax_muni's TaxMunis with an executor.
func (o *Category) TaxMunis(mods ...qm.QueryMod) taxMuniQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"tax_muni\".\"category_id\"=?", o.ID),
	)

	return TaxMunis(queryMods...)
}

// TaxStates retrieves all the tax_state's TaxStates with an executor.
func (o *Category) TaxStates(mods ...qm.QueryMod) taxStateQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"tax_state\".\"category_id\"=?", o.ID),
	)

	return TaxStates(queryMods...)
}

// LoadCommissionItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (categoryL) LoadCommissionItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCategory interface{}, mods queries.Applicator) error {
	var slice []*Category
	var object *Category

	if singular {
		var ok bool
		object, ok = maybeCategory.(*Category)
		if !ok {
			object = new(Category)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCategory))
			}
		}
	} else {
		s, ok := maybeCategory.(*[]*Category)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCategory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &categoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &categoryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.commission_items`),
		qm.WhereIn(`alpha.commission_items.category_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load commission_items")
	}

	var resultSlice []*CommissionItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice commission_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on commission_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for commission_items")
	}

	if singular {
		object.R.CommissionItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &commissionItemR{}
			}
			foreign.R.Category = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CategoryID {
				local.R.CommissionItems = append(local.R.CommissionItems, foreign)
				if foreign.R == nil {
					foreign.R = &commissionItemR{}
				}
				foreign.R.Category = local
				break
			}
		}
	}

	return nil
}

// LoadProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (categoryL) LoadProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCategory interface{}, mods queries.Applicator) error {
	var slice []*Category
	var object *Category

	if singular {
		var ok bool
		object, ok = maybeCategory.(*Category)
		if !ok {
			object = new(Category)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCategory))
			}
		}
	} else {
		s, ok := maybeCategory.(*[]*Category)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCategory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &categoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &categoryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.products`),
		qm.WhereIn(`alpha.products.category_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load products")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if singular {
		object.R.Products = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productR{}
			}
			foreign.R.Category = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CategoryID {
				local.R.Products = append(local.R.Products, foreign)
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.Category = local
				break
			}
		}
	}

	return nil
}

// LoadTaxCounties allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (categoryL) LoadTaxCounties(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCategory interface{}, mods queries.Applicator) error {
	var slice []*Category
	var object *Category

	if singular {
		var ok bool
		object, ok = maybeCategory.(*Category)
		if !ok {
			object = new(Category)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCategory))
			}
		}
	} else {
		s, ok := maybeCategory.(*[]*Category)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCategory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &categoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &categoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.tax_county`),
		qm.WhereIn(`alpha.tax_county.category_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tax_county")
	}

	var resultSlice []*TaxCounty
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tax_county")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tax_county")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tax_county")
	}

	if singular {
		object.R.TaxCounties = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &taxCountyR{}
			}
			foreign.R.Category = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CategoryID) {
				local.R.TaxCounties = append(local.R.TaxCounties, foreign)
				if foreign.R == nil {
					foreign.R = &taxCountyR{}
				}
				foreign.R.Category = local
				break
			}
		}
	}

	return nil
}

// LoadTaxMunis allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (categoryL) LoadTaxMunis(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCategory interface{}, mods queries.Applicator) error {
	var slice []*Category
	var object *Category

	if singular {
		var ok bool
		object, ok = maybeCategory.(*Category)
		if !ok {
			object = new(Category)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCategory))
			}
		}
	} else {
		s, ok := maybeCategory.(*[]*Category)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCategory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &categoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &categoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.tax_muni`),
		qm.WhereIn(`alpha.tax_muni.category_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tax_muni")
	}

	var resultSlice []*TaxMuni
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tax_muni")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tax_muni")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tax_muni")
	}

	if singular {
		object.R.TaxMunis = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &taxMuniR{}
			}
			foreign.R.Category = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CategoryID) {
				local.R.TaxMunis = append(local.R.TaxMunis, foreign)
				if foreign.R == nil {
					foreign.R = &taxMuniR{}
				}
				foreign.R.Category = local
				break
			}
		}
	}

	return nil
}

// LoadTaxStates allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (categoryL) LoadTaxStates(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCategory interface{}, mods queries.Applicator) error {
	var slice []*Category
	var object *Category

	if singular {
		var ok bool
		object, ok = maybeCategory.(*Category)
		if !ok {
			object = new(Category)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCategory))
			}
		}
	} else {
		s, ok := maybeCategory.(*[]*Category)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCategory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &categoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &categoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.tax_state`),
		qm.WhereIn(`alpha.tax_state.category_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tax_state")
	}

	var resultSlice []*TaxState
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tax_state")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tax_state")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tax_state")
	}

	if singular {
		object.R.TaxStates = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &taxStateR{}
			}
			foreign.R.Category = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CategoryID) {
				local.R.TaxStates = append(local.R.TaxStates, foreign)
				if foreign.R == nil {
					foreign.R = &taxStateR{}
				}
				foreign.R.Category = local
				break
			}
		}
	}

	return nil
}

// AddCommissionItemsG adds the given related objects to the existing relationships
// of the category, optionally inserting them as new records.
// Appends related to o.R.CommissionItems.
// Sets related.R.Category appropriately.
// Uses the global database handle.
func (o *Category) AddCommissionItemsG(ctx context.Context, insert bool, related ...*CommissionItem) error {
	return o.AddCommissionItems(ctx, boil.GetContextDB(), insert, related...)
}

// AddCommissionItems adds the given related objects to the existing relationships
// of the category, optionally inserting them as new records.
// Appends related to o.R.CommissionItems.
// Sets related.R.Category appropriately.
func (o *Category) AddCommissionItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CommissionItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CategoryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"commission_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
				strmangle.WhereClause("\"", "\"", 2, commissionItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CategoryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &categoryR{
			CommissionItems: related,
		}
	} else {
		o.R.CommissionItems = append(o.R.CommissionItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &commissionItemR{
				Category: o,
			}
		} else {
			rel.R.Category = o
		}
	}
	return nil
}

// AddProductsG adds the given related objects to the existing relationships
// of the category, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Category appropriately.
// Uses the global database handle.
func (o *Category) AddProductsG(ctx context.Context, insert bool, related ...*Product) error {
	return o.AddProducts(ctx, boil.GetContextDB(), insert, related...)
}

// AddProducts adds the given related objects to the existing relationships
// of the category, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Category appropriately.
func (o *Category) AddProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Product) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CategoryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
				strmangle.WhereClause("\"", "\"", 2, productPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CategoryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &categoryR{
			Products: related,
		}
	} else {
		o.R.Products = append(o.R.Products, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productR{
				Category: o,
			}
		} else {
			rel.R.Category = o
		}
	}
	return nil
}

// AddTaxCountiesG adds the given related objects to the existing relationships
// of the category, optionally inserting them as new records.
// Appends related to o.R.TaxCounties.
// Sets related.R.Category appropriately.
// Uses the global database handle.
func (o *Category) AddTaxCountiesG(ctx context.Context, insert bool, related ...*TaxCounty) error {
	return o.AddTaxCounties(ctx, boil.GetContextDB(), insert, related...)
}

// AddTaxCounties adds the given related objects to the existing relationships
// of the category, optionally inserting them as new records.
// Appends related to o.R.TaxCounties.
// Sets related.R.Category appropriately.
func (o *Category) AddTaxCounties(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaxCounty) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CategoryID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"tax_county\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
				strmangle.WhereClause("\"", "\"", 2, taxCountyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CategoryID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &categoryR{
			TaxCounties: related,
		}
	} else {
		o.R.TaxCounties = append(o.R.TaxCounties, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &taxCountyR{
				Category: o,
			}
		} else {
			rel.R.Category = o
		}
	}
	return nil
}

// SetTaxCountiesG removes all previously related items of the
// category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Category's TaxCounties accordingly.
// Replaces o.R.TaxCounties with related.
// Sets related.R.Category's TaxCounties accordingly.
// Uses the global database handle.
func (o *Category) SetTaxCountiesG(ctx context.Context, insert bool, related ...*TaxCounty) error {
	return o.SetTaxCounties(ctx, boil.GetContextDB(), insert, related...)
}

// SetTaxCounties removes all previously related items of the
// category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Category's TaxCounties accordingly.
// Replaces o.R.TaxCounties with related.
// Sets related.R.Category's TaxCounties accordingly.
func (o *Category) SetTaxCounties(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaxCounty) error {
	query := "update \"alpha\".\"tax_county\" set \"category_id\" = null where \"category_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TaxCounties {
			queries.SetScanner(&rel.CategoryID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Category = nil
		}
		o.R.TaxCounties = nil
	}

	return o.AddTaxCounties(ctx, exec, insert, related...)
}

// RemoveTaxCountiesG relationships from objects passed in.
// Removes related items from R.TaxCounties (uses pointer comparison, removal does not keep order)
// Sets related.R.Category.
// Uses the global database handle.
func (o *Category) RemoveTaxCountiesG(ctx context.Context, related ...*TaxCounty) error {
	return o.RemoveTaxCounties(ctx, boil.GetContextDB(), related...)
}

// RemoveTaxCounties relationships from objects passed in.
// Removes related items from R.TaxCounties (uses pointer comparison, removal does not keep order)
// Sets related.R.Category.
func (o *Category) RemoveTaxCounties(ctx context.Context, exec boil.ContextExecutor, related ...*TaxCounty) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CategoryID, nil)
		if rel.R != nil {
			rel.R.Category = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("category_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TaxCounties {
			if rel != ri {
				continue
			}

			ln := len(o.R.TaxCounties)
			if ln > 1 && i < ln-1 {
				o.R.TaxCounties[i] = o.R.TaxCounties[ln-1]
			}
			o.R.TaxCounties = o.R.TaxCounties[:ln-1]
			break
		}
	}

	return nil
}

// AddTaxMunisG adds the given related objects to the existing relationships
// of the category, optionally inserting them as new records.
// Appends related to o.R.TaxMunis.
// Sets related.R.Category appropriately.
// Uses the global database handle.
func (o *Category) AddTaxMunisG(ctx context.Context, insert bool, related ...*TaxMuni) error {
	return o.AddTaxMunis(ctx, boil.GetContextDB(), insert, related...)
}

// AddTaxMunis adds the given related objects to the existing relationships
// of the category, optionally inserting them as new records.
// Appends related to o.R.TaxMunis.
// Sets related.R.Category appropriately.
func (o *Category) AddTaxMunis(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaxMuni) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CategoryID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"tax_muni\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
				strmangle.WhereClause("\"", "\"", 2, taxMuniPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CategoryID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &categoryR{
			TaxMunis: related,
		}
	} else {
		o.R.TaxMunis = append(o.R.TaxMunis, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &taxMuniR{
				Category: o,
			}
		} else {
			rel.R.Category = o
		}
	}
	return nil
}

// SetTaxMunisG removes all previously related items of the
// category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Category's TaxMunis accordingly.
// Replaces o.R.TaxMunis with related.
// Sets related.R.Category's TaxMunis accordingly.
// Uses the global database handle.
func (o *Category) SetTaxMunisG(ctx context.Context, insert bool, related ...*TaxMuni) error {
	return o.SetTaxMunis(ctx, boil.GetContextDB(), insert, related...)
}

// SetTaxMunis removes all previously related items of the
// category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Category's TaxMunis accordingly.
// Replaces o.R.TaxMunis with related.
// Sets related.R.Category's TaxMunis accordingly.
func (o *Category) SetTaxMunis(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaxMuni) error {
	query := "update \"alpha\".\"tax_muni\" set \"category_id\" = null where \"category_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TaxMunis {
			queries.SetScanner(&rel.CategoryID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Category = nil
		}
		o.R.TaxMunis = nil
	}

	return o.AddTaxMunis(ctx, exec, insert, related...)
}

// RemoveTaxMunisG relationships from objects passed in.
// Removes related items from R.TaxMunis (uses pointer comparison, removal does not keep order)
// Sets related.R.Category.
// Uses the global database handle.
func (o *Category) RemoveTaxMunisG(ctx context.Context, related ...*TaxMuni) error {
	return o.RemoveTaxMunis(ctx, boil.GetContextDB(), related...)
}

// RemoveTaxMunis relationships from objects passed in.
// Removes related items from R.TaxMunis (uses pointer comparison, removal does not keep order)
// Sets related.R.Category.
func (o *Category) RemoveTaxMunis(ctx context.Context, exec boil.ContextExecutor, related ...*TaxMuni) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CategoryID, nil)
		if rel.R != nil {
			rel.R.Category = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("category_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TaxMunis {
			if rel != ri {
				continue
			}

			ln := len(o.R.TaxMunis)
			if ln > 1 && i < ln-1 {
				o.R.TaxMunis[i] = o.R.TaxMunis[ln-1]
			}
			o.R.TaxMunis = o.R.TaxMunis[:ln-1]
			break
		}
	}

	return nil
}

// AddTaxStatesG adds the given related objects to the existing relationships
// of the category, optionally inserting them as new records.
// Appends related to o.R.TaxStates.
// Sets related.R.Category appropriately.
// Uses the global database handle.
func (o *Category) AddTaxStatesG(ctx context.Context, insert bool, related ...*TaxState) error {
	return o.AddTaxStates(ctx, boil.GetContextDB(), insert, related...)
}

// AddTaxStates adds the given related objects to the existing relationships
// of the category, optionally inserting them as new records.
// Appends related to o.R.TaxStates.
// Sets related.R.Category appropriately.
func (o *Category) AddTaxStates(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaxState) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CategoryID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"tax_state\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
				strmangle.WhereClause("\"", "\"", 2, taxStatePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CategoryID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &categoryR{
			TaxStates: related,
		}
	} else {
		o.R.TaxStates = append(o.R.TaxStates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &taxStateR{
				Category: o,
			}
		} else {
			rel.R.Category = o
		}
	}
	return nil
}

// SetTaxStatesG removes all previously related items of the
// category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Category's TaxStates accordingly.
// Replaces o.R.TaxStates with related.
// Sets related.R.Category's TaxStates accordingly.
// Uses the global database handle.
func (o *Category) SetTaxStatesG(ctx context.Context, insert bool, related ...*TaxState) error {
	return o.SetTaxStates(ctx, boil.GetContextDB(), insert, related...)
}

// SetTaxStates removes all previously related items of the
// category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Category's TaxStates accordingly.
// Replaces o.R.TaxStates with related.
// Sets related.R.Category's TaxStates accordingly.
func (o *Category) SetTaxStates(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaxState) error {
	query := "update \"alpha\".\"tax_state\" set \"category_id\" = null where \"category_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TaxStates {
			queries.SetScanner(&rel.CategoryID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Category = nil
		}
		o.R.TaxStates = nil
	}

	return o.AddTaxStates(ctx, exec, insert, related...)
}

// RemoveTaxStatesG relationships from objects passed in.
// Removes related items from R.TaxStates (uses pointer comparison, removal does not keep order)
// Sets related.R.Category.
// Uses the global database handle.
func (o *Category) RemoveTaxStatesG(ctx context.Context, related ...*TaxState) error {
	return o.RemoveTaxStates(ctx, boil.GetContextDB(), related...)
}

// RemoveTaxStates relationships from objects passed in.
// Removes related items from R.TaxStates (uses pointer comparison, removal does not keep order)
// Sets related.R.Category.
func (o *Category) RemoveTaxStates(ctx context.Context, exec boil.ContextExecutor, related ...*TaxState) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CategoryID, nil)
		if rel.R != nil {
			rel.R.Category = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("category_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TaxStates {
			if rel != ri {
				continue
			}

			ln := len(o.R.TaxStates)
			if ln > 1 && i < ln-1 {
				o.R.TaxStates[i] = o.R.TaxStates[ln-1]
			}
			o.R.TaxStates = o.R.TaxStates[:ln-1]
			break
		}
	}

	return nil
}

// Categories retrieves all the records using an executor.
func Categories(mods ...qm.QueryMod) categoryQuery {
	mods = append(mods, qm.From("\"alpha\".\"categories\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"categories\".*"})
	}

	return categoryQuery{q}
}

// FindCategoryG retrieves a single record by ID.
func FindCategoryG(ctx context.Context, iD int, selectCols ...string) (*Category, error) {
	return FindCategory(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCategory(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Category, error) {
	categoryObj := &Category{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"categories\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, categoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from categories")
	}

	return categoryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Category) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Category) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no categories provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(categoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	categoryInsertCacheMut.RLock()
	cache, cached := categoryInsertCache[key]
	categoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			categoryAllColumns,
			categoryColumnsWithDefault,
			categoryColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, categoryGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(categoryType, categoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(categoryType, categoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"categories\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"categories\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into categories")
	}

	if !cached {
		categoryInsertCacheMut.Lock()
		categoryInsertCache[key] = cache
		categoryInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Category record using the global executor.
// See Update for more documentation.
func (o *Category) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Category.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Category) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	categoryUpdateCacheMut.RLock()
	cache, cached := categoryUpdateCache[key]
	categoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			categoryAllColumns,
			categoryPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, categoryGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update categories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"categories\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, categoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(categoryType, categoryMapping, append(wl, categoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update categories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for categories")
	}

	if !cached {
		categoryUpdateCacheMut.Lock()
		categoryUpdateCache[key] = cache
		categoryUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q categoryQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q categoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for categories")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CategorySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"categories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, categoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in category slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all category")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Category) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Category) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no categories provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(categoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	categoryUpsertCacheMut.RLock()
	cache, cached := categoryUpsertCache[key]
	categoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			categoryAllColumns,
			categoryColumnsWithDefault,
			categoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			categoryAllColumns,
			categoryPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, categoryGeneratedColumns)
		update = strmangle.SetComplement(update, categoryGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert categories, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(categoryPrimaryKeyColumns))
			copy(conflict, categoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"categories\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(categoryType, categoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(categoryType, categoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert categories")
	}

	if !cached {
		categoryUpsertCacheMut.Lock()
		categoryUpsertCache[key] = cache
		categoryUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single Category record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Category) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Category record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Category) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Category provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), categoryPrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"categories\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for categories")
	}

	return rowsAff, nil
}

func (q categoryQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q categoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no categoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for categories")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CategorySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, categoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from category slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for categories")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Category) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Category provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Category) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCategory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CategorySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty CategorySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"categories\".* FROM \"alpha\".\"categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, categoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CategorySlice")
	}

	*o = slice

	return nil
}

// CategoryExistsG checks if the Category row exists.
func CategoryExistsG(ctx context.Context, iD int) (bool, error) {
	return CategoryExists(ctx, boil.GetContextDB(), iD)
}

// CategoryExists checks if the Category row exists.
func CategoryExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"categories\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if categories exists")
	}

	return exists, nil
}
