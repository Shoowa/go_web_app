// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BrokerRole is an object representing the database table.
type BrokerRole struct {
	ID   int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *brokerRoleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L brokerRoleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BrokerRoleColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

var BrokerRoleTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "broker_roles.id",
	Name: "broker_roles.name",
}

// Generated where

var BrokerRoleWhere = struct {
	ID   whereHelperint
	Name whereHelperstring
}{
	ID:   whereHelperint{field: "\"alpha\".\"broker_roles\".\"id\""},
	Name: whereHelperstring{field: "\"alpha\".\"broker_roles\".\"name\""},
}

// BrokerRoleRels is where relationship names are stored.
var BrokerRoleRels = struct {
	RoleBrokerEmployees string
}{
	RoleBrokerEmployees: "RoleBrokerEmployees",
}

// brokerRoleR is where relationships are stored.
type brokerRoleR struct {
	RoleBrokerEmployees BrokerEmployeeSlice `boil:"RoleBrokerEmployees" json:"RoleBrokerEmployees" toml:"RoleBrokerEmployees" yaml:"RoleBrokerEmployees"`
}

// NewStruct creates a new relationship struct
func (*brokerRoleR) NewStruct() *brokerRoleR {
	return &brokerRoleR{}
}

func (r *brokerRoleR) GetRoleBrokerEmployees() BrokerEmployeeSlice {
	if r == nil {
		return nil
	}
	return r.RoleBrokerEmployees
}

// brokerRoleL is where Load methods for each relationship are stored.
type brokerRoleL struct{}

var (
	brokerRoleAllColumns            = []string{"id", "name"}
	brokerRoleColumnsWithoutDefault = []string{"name"}
	brokerRoleColumnsWithDefault    = []string{"id"}
	brokerRolePrimaryKeyColumns     = []string{"id"}
	brokerRoleGeneratedColumns      = []string{"id"}
)

type (
	// BrokerRoleSlice is an alias for a slice of pointers to BrokerRole.
	// This should almost always be used instead of []BrokerRole.
	BrokerRoleSlice []*BrokerRole

	brokerRoleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	brokerRoleType                 = reflect.TypeOf(&BrokerRole{})
	brokerRoleMapping              = queries.MakeStructMapping(brokerRoleType)
	brokerRolePrimaryKeyMapping, _ = queries.BindMapping(brokerRoleType, brokerRoleMapping, brokerRolePrimaryKeyColumns)
	brokerRoleInsertCacheMut       sync.RWMutex
	brokerRoleInsertCache          = make(map[string]insertCache)
	brokerRoleUpdateCacheMut       sync.RWMutex
	brokerRoleUpdateCache          = make(map[string]updateCache)
	brokerRoleUpsertCacheMut       sync.RWMutex
	brokerRoleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single brokerRole record from the query using the global executor.
func (q brokerRoleQuery) OneG(ctx context.Context) (*BrokerRole, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single brokerRole record from the query.
func (q brokerRoleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BrokerRole, error) {
	o := &BrokerRole{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for broker_roles")
	}

	return o, nil
}

// AllG returns all BrokerRole records from the query using the global executor.
func (q brokerRoleQuery) AllG(ctx context.Context) (BrokerRoleSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all BrokerRole records from the query.
func (q brokerRoleQuery) All(ctx context.Context, exec boil.ContextExecutor) (BrokerRoleSlice, error) {
	var o []*BrokerRole

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BrokerRole slice")
	}

	return o, nil
}

// CountG returns the count of all BrokerRole records in the query using the global executor
func (q brokerRoleQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all BrokerRole records in the query.
func (q brokerRoleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count broker_roles rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q brokerRoleQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q brokerRoleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if broker_roles exists")
	}

	return count > 0, nil
}

// RoleBrokerEmployees retrieves all the broker_employee's BrokerEmployees with an executor via role_id column.
func (o *BrokerRole) RoleBrokerEmployees(mods ...qm.QueryMod) brokerEmployeeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"broker_employees\".\"role_id\"=?", o.ID),
	)

	return BrokerEmployees(queryMods...)
}

// LoadRoleBrokerEmployees allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (brokerRoleL) LoadRoleBrokerEmployees(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBrokerRole interface{}, mods queries.Applicator) error {
	var slice []*BrokerRole
	var object *BrokerRole

	if singular {
		var ok bool
		object, ok = maybeBrokerRole.(*BrokerRole)
		if !ok {
			object = new(BrokerRole)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBrokerRole)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBrokerRole))
			}
		}
	} else {
		s, ok := maybeBrokerRole.(*[]*BrokerRole)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBrokerRole)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBrokerRole))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &brokerRoleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &brokerRoleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.broker_employees`),
		qm.WhereIn(`alpha.broker_employees.role_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load broker_employees")
	}

	var resultSlice []*BrokerEmployee
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice broker_employees")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on broker_employees")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for broker_employees")
	}

	if singular {
		object.R.RoleBrokerEmployees = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &brokerEmployeeR{}
			}
			foreign.R.Role = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RoleID) {
				local.R.RoleBrokerEmployees = append(local.R.RoleBrokerEmployees, foreign)
				if foreign.R == nil {
					foreign.R = &brokerEmployeeR{}
				}
				foreign.R.Role = local
				break
			}
		}
	}

	return nil
}

// AddRoleBrokerEmployeesG adds the given related objects to the existing relationships
// of the broker_role, optionally inserting them as new records.
// Appends related to o.R.RoleBrokerEmployees.
// Sets related.R.Role appropriately.
// Uses the global database handle.
func (o *BrokerRole) AddRoleBrokerEmployeesG(ctx context.Context, insert bool, related ...*BrokerEmployee) error {
	return o.AddRoleBrokerEmployees(ctx, boil.GetContextDB(), insert, related...)
}

// AddRoleBrokerEmployees adds the given related objects to the existing relationships
// of the broker_role, optionally inserting them as new records.
// Appends related to o.R.RoleBrokerEmployees.
// Sets related.R.Role appropriately.
func (o *BrokerRole) AddRoleBrokerEmployees(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BrokerEmployee) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RoleID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"broker_employees\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"role_id"}),
				strmangle.WhereClause("\"", "\"", 2, brokerEmployeePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RoleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &brokerRoleR{
			RoleBrokerEmployees: related,
		}
	} else {
		o.R.RoleBrokerEmployees = append(o.R.RoleBrokerEmployees, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &brokerEmployeeR{
				Role: o,
			}
		} else {
			rel.R.Role = o
		}
	}
	return nil
}

// SetRoleBrokerEmployeesG removes all previously related items of the
// broker_role replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Role's RoleBrokerEmployees accordingly.
// Replaces o.R.RoleBrokerEmployees with related.
// Sets related.R.Role's RoleBrokerEmployees accordingly.
// Uses the global database handle.
func (o *BrokerRole) SetRoleBrokerEmployeesG(ctx context.Context, insert bool, related ...*BrokerEmployee) error {
	return o.SetRoleBrokerEmployees(ctx, boil.GetContextDB(), insert, related...)
}

// SetRoleBrokerEmployees removes all previously related items of the
// broker_role replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Role's RoleBrokerEmployees accordingly.
// Replaces o.R.RoleBrokerEmployees with related.
// Sets related.R.Role's RoleBrokerEmployees accordingly.
func (o *BrokerRole) SetRoleBrokerEmployees(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BrokerEmployee) error {
	query := "update \"alpha\".\"broker_employees\" set \"role_id\" = null where \"role_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RoleBrokerEmployees {
			queries.SetScanner(&rel.RoleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Role = nil
		}
		o.R.RoleBrokerEmployees = nil
	}

	return o.AddRoleBrokerEmployees(ctx, exec, insert, related...)
}

// RemoveRoleBrokerEmployeesG relationships from objects passed in.
// Removes related items from R.RoleBrokerEmployees (uses pointer comparison, removal does not keep order)
// Sets related.R.Role.
// Uses the global database handle.
func (o *BrokerRole) RemoveRoleBrokerEmployeesG(ctx context.Context, related ...*BrokerEmployee) error {
	return o.RemoveRoleBrokerEmployees(ctx, boil.GetContextDB(), related...)
}

// RemoveRoleBrokerEmployees relationships from objects passed in.
// Removes related items from R.RoleBrokerEmployees (uses pointer comparison, removal does not keep order)
// Sets related.R.Role.
func (o *BrokerRole) RemoveRoleBrokerEmployees(ctx context.Context, exec boil.ContextExecutor, related ...*BrokerEmployee) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RoleID, nil)
		if rel.R != nil {
			rel.R.Role = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("role_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RoleBrokerEmployees {
			if rel != ri {
				continue
			}

			ln := len(o.R.RoleBrokerEmployees)
			if ln > 1 && i < ln-1 {
				o.R.RoleBrokerEmployees[i] = o.R.RoleBrokerEmployees[ln-1]
			}
			o.R.RoleBrokerEmployees = o.R.RoleBrokerEmployees[:ln-1]
			break
		}
	}

	return nil
}

// BrokerRoles retrieves all the records using an executor.
func BrokerRoles(mods ...qm.QueryMod) brokerRoleQuery {
	mods = append(mods, qm.From("\"alpha\".\"broker_roles\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"broker_roles\".*"})
	}

	return brokerRoleQuery{q}
}

// FindBrokerRoleG retrieves a single record by ID.
func FindBrokerRoleG(ctx context.Context, iD int, selectCols ...string) (*BrokerRole, error) {
	return FindBrokerRole(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindBrokerRole retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBrokerRole(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BrokerRole, error) {
	brokerRoleObj := &BrokerRole{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"broker_roles\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, brokerRoleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from broker_roles")
	}

	return brokerRoleObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BrokerRole) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BrokerRole) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no broker_roles provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(brokerRoleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	brokerRoleInsertCacheMut.RLock()
	cache, cached := brokerRoleInsertCache[key]
	brokerRoleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			brokerRoleAllColumns,
			brokerRoleColumnsWithDefault,
			brokerRoleColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, brokerRoleGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(brokerRoleType, brokerRoleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(brokerRoleType, brokerRoleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"broker_roles\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"broker_roles\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into broker_roles")
	}

	if !cached {
		brokerRoleInsertCacheMut.Lock()
		brokerRoleInsertCache[key] = cache
		brokerRoleInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single BrokerRole record using the global executor.
// See Update for more documentation.
func (o *BrokerRole) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the BrokerRole.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BrokerRole) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	brokerRoleUpdateCacheMut.RLock()
	cache, cached := brokerRoleUpdateCache[key]
	brokerRoleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			brokerRoleAllColumns,
			brokerRolePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, brokerRoleGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update broker_roles, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"broker_roles\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, brokerRolePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(brokerRoleType, brokerRoleMapping, append(wl, brokerRolePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update broker_roles row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for broker_roles")
	}

	if !cached {
		brokerRoleUpdateCacheMut.Lock()
		brokerRoleUpdateCache[key] = cache
		brokerRoleUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q brokerRoleQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q brokerRoleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for broker_roles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for broker_roles")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BrokerRoleSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BrokerRoleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), brokerRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"broker_roles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, brokerRolePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in brokerRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all brokerRole")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BrokerRole) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BrokerRole) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no broker_roles provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(brokerRoleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	brokerRoleUpsertCacheMut.RLock()
	cache, cached := brokerRoleUpsertCache[key]
	brokerRoleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			brokerRoleAllColumns,
			brokerRoleColumnsWithDefault,
			brokerRoleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			brokerRoleAllColumns,
			brokerRolePrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, brokerRoleGeneratedColumns)
		update = strmangle.SetComplement(update, brokerRoleGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert broker_roles, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(brokerRolePrimaryKeyColumns))
			copy(conflict, brokerRolePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"broker_roles\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(brokerRoleType, brokerRoleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(brokerRoleType, brokerRoleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert broker_roles")
	}

	if !cached {
		brokerRoleUpsertCacheMut.Lock()
		brokerRoleUpsertCache[key] = cache
		brokerRoleUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single BrokerRole record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BrokerRole) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single BrokerRole record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BrokerRole) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BrokerRole provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), brokerRolePrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"broker_roles\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from broker_roles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for broker_roles")
	}

	return rowsAff, nil
}

func (q brokerRoleQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q brokerRoleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no brokerRoleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from broker_roles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for broker_roles")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BrokerRoleSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BrokerRoleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), brokerRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"broker_roles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, brokerRolePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from brokerRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for broker_roles")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BrokerRole) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no BrokerRole provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BrokerRole) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBrokerRole(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BrokerRoleSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty BrokerRoleSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BrokerRoleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BrokerRoleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), brokerRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"broker_roles\".* FROM \"alpha\".\"broker_roles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, brokerRolePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BrokerRoleSlice")
	}

	*o = slice

	return nil
}

// BrokerRoleExistsG checks if the BrokerRole row exists.
func BrokerRoleExistsG(ctx context.Context, iD int) (bool, error) {
	return BrokerRoleExists(ctx, boil.GetContextDB(), iD)
}

// BrokerRoleExists checks if the BrokerRole row exists.
func BrokerRoleExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"broker_roles\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if broker_roles exists")
	}

	return exists, nil
}
