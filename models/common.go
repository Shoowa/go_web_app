// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Common is an object representing the database table.
type Common struct {
	ID   int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *commonR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L commonL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CommonColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

var CommonTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "common.id",
	Name: "common.name",
}

// Generated where

var CommonWhere = struct {
	ID   whereHelperint
	Name whereHelperstring
}{
	ID:   whereHelperint{field: "\"alpha\".\"common\".\"id\""},
	Name: whereHelperstring{field: "\"alpha\".\"common\".\"name\""},
}

// CommonRels is where relationship names are stored.
var CommonRels = struct {
	Models string
}{
	Models: "Models",
}

// commonR is where relationships are stored.
type commonR struct {
	Models ModelSlice `boil:"Models" json:"Models" toml:"Models" yaml:"Models"`
}

// NewStruct creates a new relationship struct
func (*commonR) NewStruct() *commonR {
	return &commonR{}
}

func (r *commonR) GetModels() ModelSlice {
	if r == nil {
		return nil
	}
	return r.Models
}

// commonL is where Load methods for each relationship are stored.
type commonL struct{}

var (
	commonAllColumns            = []string{"id", "name"}
	commonColumnsWithoutDefault = []string{"name"}
	commonColumnsWithDefault    = []string{"id"}
	commonPrimaryKeyColumns     = []string{"id"}
	commonGeneratedColumns      = []string{"id"}
)

type (
	// CommonSlice is an alias for a slice of pointers to Common.
	// This should almost always be used instead of []Common.
	CommonSlice []*Common

	commonQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	commonType                 = reflect.TypeOf(&Common{})
	commonMapping              = queries.MakeStructMapping(commonType)
	commonPrimaryKeyMapping, _ = queries.BindMapping(commonType, commonMapping, commonPrimaryKeyColumns)
	commonInsertCacheMut       sync.RWMutex
	commonInsertCache          = make(map[string]insertCache)
	commonUpdateCacheMut       sync.RWMutex
	commonUpdateCache          = make(map[string]updateCache)
	commonUpsertCacheMut       sync.RWMutex
	commonUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single common record from the query using the global executor.
func (q commonQuery) OneG(ctx context.Context) (*Common, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single common record from the query.
func (q commonQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Common, error) {
	o := &Common{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for common")
	}

	return o, nil
}

// AllG returns all Common records from the query using the global executor.
func (q commonQuery) AllG(ctx context.Context) (CommonSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Common records from the query.
func (q commonQuery) All(ctx context.Context, exec boil.ContextExecutor) (CommonSlice, error) {
	var o []*Common

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Common slice")
	}

	return o, nil
}

// CountG returns the count of all Common records in the query using the global executor
func (q commonQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Common records in the query.
func (q commonQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count common rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q commonQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q commonQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if common exists")
	}

	return count > 0, nil
}

// Models retrieves all the model's Models with an executor.
func (o *Common) Models(mods ...qm.QueryMod) modelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"models\".\"common_id\"=?", o.ID),
	)

	return Models(queryMods...)
}

// LoadModels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (commonL) LoadModels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommon interface{}, mods queries.Applicator) error {
	var slice []*Common
	var object *Common

	if singular {
		var ok bool
		object, ok = maybeCommon.(*Common)
		if !ok {
			object = new(Common)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCommon)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCommon))
			}
		}
	} else {
		s, ok := maybeCommon.(*[]*Common)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCommon)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCommon))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &commonR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &commonR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.models`),
		qm.WhereIn(`alpha.models.common_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load models")
	}

	var resultSlice []*Model
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice models")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on models")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for models")
	}

	if singular {
		object.R.Models = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &modelR{}
			}
			foreign.R.Common = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CommonID {
				local.R.Models = append(local.R.Models, foreign)
				if foreign.R == nil {
					foreign.R = &modelR{}
				}
				foreign.R.Common = local
				break
			}
		}
	}

	return nil
}

// AddModelsG adds the given related objects to the existing relationships
// of the common, optionally inserting them as new records.
// Appends related to o.R.Models.
// Sets related.R.Common appropriately.
// Uses the global database handle.
func (o *Common) AddModelsG(ctx context.Context, insert bool, related ...*Model) error {
	return o.AddModels(ctx, boil.GetContextDB(), insert, related...)
}

// AddModels adds the given related objects to the existing relationships
// of the common, optionally inserting them as new records.
// Appends related to o.R.Models.
// Sets related.R.Common appropriately.
func (o *Common) AddModels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Model) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CommonID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"models\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"common_id"}),
				strmangle.WhereClause("\"", "\"", 2, modelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CommonID = o.ID
		}
	}

	if o.R == nil {
		o.R = &commonR{
			Models: related,
		}
	} else {
		o.R.Models = append(o.R.Models, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &modelR{
				Common: o,
			}
		} else {
			rel.R.Common = o
		}
	}
	return nil
}

// Commons retrieves all the records using an executor.
func Commons(mods ...qm.QueryMod) commonQuery {
	mods = append(mods, qm.From("\"alpha\".\"common\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"common\".*"})
	}

	return commonQuery{q}
}

// FindCommonG retrieves a single record by ID.
func FindCommonG(ctx context.Context, iD int, selectCols ...string) (*Common, error) {
	return FindCommon(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindCommon retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCommon(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Common, error) {
	commonObj := &Common{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"common\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, commonObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from common")
	}

	return commonObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Common) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Common) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no common provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(commonColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	commonInsertCacheMut.RLock()
	cache, cached := commonInsertCache[key]
	commonInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			commonAllColumns,
			commonColumnsWithDefault,
			commonColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, commonGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(commonType, commonMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(commonType, commonMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"common\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"common\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into common")
	}

	if !cached {
		commonInsertCacheMut.Lock()
		commonInsertCache[key] = cache
		commonInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Common record using the global executor.
// See Update for more documentation.
func (o *Common) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Common.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Common) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	commonUpdateCacheMut.RLock()
	cache, cached := commonUpdateCache[key]
	commonUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			commonAllColumns,
			commonPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, commonGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update common, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"common\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, commonPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(commonType, commonMapping, append(wl, commonPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update common row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for common")
	}

	if !cached {
		commonUpdateCacheMut.Lock()
		commonUpdateCache[key] = cache
		commonUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q commonQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q commonQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for common")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for common")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CommonSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CommonSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"common\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, commonPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in common slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all common")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Common) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Common) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no common provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(commonColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	commonUpsertCacheMut.RLock()
	cache, cached := commonUpsertCache[key]
	commonUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			commonAllColumns,
			commonColumnsWithDefault,
			commonColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			commonAllColumns,
			commonPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, commonGeneratedColumns)
		update = strmangle.SetComplement(update, commonGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert common, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(commonPrimaryKeyColumns))
			copy(conflict, commonPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"common\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(commonType, commonMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(commonType, commonMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert common")
	}

	if !cached {
		commonUpsertCacheMut.Lock()
		commonUpsertCache[key] = cache
		commonUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single Common record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Common) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Common record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Common) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Common provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), commonPrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"common\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from common")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for common")
	}

	return rowsAff, nil
}

func (q commonQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q commonQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no commonQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from common")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for common")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CommonSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CommonSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"common\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, commonPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from common slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for common")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Common) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Common provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Common) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCommon(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommonSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty CommonSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommonSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CommonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"common\".* FROM \"alpha\".\"common\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, commonPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CommonSlice")
	}

	*o = slice

	return nil
}

// CommonExistsG checks if the Common row exists.
func CommonExistsG(ctx context.Context, iD int) (bool, error) {
	return CommonExists(ctx, boil.GetContextDB(), iD)
}

// CommonExists checks if the Common row exists.
func CommonExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"common\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if common exists")
	}

	return exists, nil
}
