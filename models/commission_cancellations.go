// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CommissionCancellation is an object representing the database table.
type CommissionCancellation struct {
	CommissionID int       `boil:"commission_id" json:"commission_id" toml:"commission_id" yaml:"commission_id"`
	Created      time.Time `boil:"created" json:"created" toml:"created" yaml:"created"`

	R *commissionCancellationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L commissionCancellationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CommissionCancellationColumns = struct {
	CommissionID string
	Created      string
}{
	CommissionID: "commission_id",
	Created:      "created",
}

var CommissionCancellationTableColumns = struct {
	CommissionID string
	Created      string
}{
	CommissionID: "commission_cancellations.commission_id",
	Created:      "commission_cancellations.created",
}

// Generated where

var CommissionCancellationWhere = struct {
	CommissionID whereHelperint
	Created      whereHelpertime_Time
}{
	CommissionID: whereHelperint{field: "\"alpha\".\"commission_cancellations\".\"commission_id\""},
	Created:      whereHelpertime_Time{field: "\"alpha\".\"commission_cancellations\".\"created\""},
}

// CommissionCancellationRels is where relationship names are stored.
var CommissionCancellationRels = struct {
	Commission string
}{
	Commission: "Commission",
}

// commissionCancellationR is where relationships are stored.
type commissionCancellationR struct {
	Commission *Commission `boil:"Commission" json:"Commission" toml:"Commission" yaml:"Commission"`
}

// NewStruct creates a new relationship struct
func (*commissionCancellationR) NewStruct() *commissionCancellationR {
	return &commissionCancellationR{}
}

func (r *commissionCancellationR) GetCommission() *Commission {
	if r == nil {
		return nil
	}
	return r.Commission
}

// commissionCancellationL is where Load methods for each relationship are stored.
type commissionCancellationL struct{}

var (
	commissionCancellationAllColumns            = []string{"commission_id", "created"}
	commissionCancellationColumnsWithoutDefault = []string{"commission_id"}
	commissionCancellationColumnsWithDefault    = []string{"created"}
	commissionCancellationPrimaryKeyColumns     = []string{"commission_id"}
	commissionCancellationGeneratedColumns      = []string{}
)

type (
	// CommissionCancellationSlice is an alias for a slice of pointers to CommissionCancellation.
	// This should almost always be used instead of []CommissionCancellation.
	CommissionCancellationSlice []*CommissionCancellation

	commissionCancellationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	commissionCancellationType                 = reflect.TypeOf(&CommissionCancellation{})
	commissionCancellationMapping              = queries.MakeStructMapping(commissionCancellationType)
	commissionCancellationPrimaryKeyMapping, _ = queries.BindMapping(commissionCancellationType, commissionCancellationMapping, commissionCancellationPrimaryKeyColumns)
	commissionCancellationInsertCacheMut       sync.RWMutex
	commissionCancellationInsertCache          = make(map[string]insertCache)
	commissionCancellationUpdateCacheMut       sync.RWMutex
	commissionCancellationUpdateCache          = make(map[string]updateCache)
	commissionCancellationUpsertCacheMut       sync.RWMutex
	commissionCancellationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single commissionCancellation record from the query using the global executor.
func (q commissionCancellationQuery) OneG(ctx context.Context) (*CommissionCancellation, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single commissionCancellation record from the query.
func (q commissionCancellationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CommissionCancellation, error) {
	o := &CommissionCancellation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for commission_cancellations")
	}

	return o, nil
}

// AllG returns all CommissionCancellation records from the query using the global executor.
func (q commissionCancellationQuery) AllG(ctx context.Context) (CommissionCancellationSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all CommissionCancellation records from the query.
func (q commissionCancellationQuery) All(ctx context.Context, exec boil.ContextExecutor) (CommissionCancellationSlice, error) {
	var o []*CommissionCancellation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CommissionCancellation slice")
	}

	return o, nil
}

// CountG returns the count of all CommissionCancellation records in the query using the global executor
func (q commissionCancellationQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all CommissionCancellation records in the query.
func (q commissionCancellationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count commission_cancellations rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q commissionCancellationQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q commissionCancellationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if commission_cancellations exists")
	}

	return count > 0, nil
}

// Commission pointed to by the foreign key.
func (o *CommissionCancellation) Commission(mods ...qm.QueryMod) commissionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CommissionID),
	}

	queryMods = append(queryMods, mods...)

	return Commissions(queryMods...)
}

// LoadCommission allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (commissionCancellationL) LoadCommission(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommissionCancellation interface{}, mods queries.Applicator) error {
	var slice []*CommissionCancellation
	var object *CommissionCancellation

	if singular {
		var ok bool
		object, ok = maybeCommissionCancellation.(*CommissionCancellation)
		if !ok {
			object = new(CommissionCancellation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCommissionCancellation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCommissionCancellation))
			}
		}
	} else {
		s, ok := maybeCommissionCancellation.(*[]*CommissionCancellation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCommissionCancellation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCommissionCancellation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &commissionCancellationR{}
		}
		args = append(args, object.CommissionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &commissionCancellationR{}
			}

			for _, a := range args {
				if a == obj.CommissionID {
					continue Outer
				}
			}

			args = append(args, obj.CommissionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.commissions`),
		qm.WhereIn(`alpha.commissions.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Commission")
	}

	var resultSlice []*Commission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Commission")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for commissions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for commissions")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Commission = foreign
		if foreign.R == nil {
			foreign.R = &commissionR{}
		}
		foreign.R.CommissionCancellation = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CommissionID == foreign.ID {
				local.R.Commission = foreign
				if foreign.R == nil {
					foreign.R = &commissionR{}
				}
				foreign.R.CommissionCancellation = local
				break
			}
		}
	}

	return nil
}

// SetCommissionG of the commissionCancellation to the related item.
// Sets o.R.Commission to related.
// Adds o to related.R.CommissionCancellation.
// Uses the global database handle.
func (o *CommissionCancellation) SetCommissionG(ctx context.Context, insert bool, related *Commission) error {
	return o.SetCommission(ctx, boil.GetContextDB(), insert, related)
}

// SetCommission of the commissionCancellation to the related item.
// Sets o.R.Commission to related.
// Adds o to related.R.CommissionCancellation.
func (o *CommissionCancellation) SetCommission(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Commission) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"commission_cancellations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"commission_id"}),
		strmangle.WhereClause("\"", "\"", 2, commissionCancellationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.CommissionID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CommissionID = related.ID
	if o.R == nil {
		o.R = &commissionCancellationR{
			Commission: related,
		}
	} else {
		o.R.Commission = related
	}

	if related.R == nil {
		related.R = &commissionR{
			CommissionCancellation: o,
		}
	} else {
		related.R.CommissionCancellation = o
	}

	return nil
}

// CommissionCancellations retrieves all the records using an executor.
func CommissionCancellations(mods ...qm.QueryMod) commissionCancellationQuery {
	mods = append(mods, qm.From("\"alpha\".\"commission_cancellations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"commission_cancellations\".*"})
	}

	return commissionCancellationQuery{q}
}

// FindCommissionCancellationG retrieves a single record by ID.
func FindCommissionCancellationG(ctx context.Context, commissionID int, selectCols ...string) (*CommissionCancellation, error) {
	return FindCommissionCancellation(ctx, boil.GetContextDB(), commissionID, selectCols...)
}

// FindCommissionCancellation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCommissionCancellation(ctx context.Context, exec boil.ContextExecutor, commissionID int, selectCols ...string) (*CommissionCancellation, error) {
	commissionCancellationObj := &CommissionCancellation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"commission_cancellations\" where \"commission_id\"=$1", sel,
	)

	q := queries.Raw(query, commissionID)

	err := q.Bind(ctx, exec, commissionCancellationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from commission_cancellations")
	}

	return commissionCancellationObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CommissionCancellation) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CommissionCancellation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no commission_cancellations provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(commissionCancellationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	commissionCancellationInsertCacheMut.RLock()
	cache, cached := commissionCancellationInsertCache[key]
	commissionCancellationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			commissionCancellationAllColumns,
			commissionCancellationColumnsWithDefault,
			commissionCancellationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(commissionCancellationType, commissionCancellationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(commissionCancellationType, commissionCancellationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"commission_cancellations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"commission_cancellations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into commission_cancellations")
	}

	if !cached {
		commissionCancellationInsertCacheMut.Lock()
		commissionCancellationInsertCache[key] = cache
		commissionCancellationInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single CommissionCancellation record using the global executor.
// See Update for more documentation.
func (o *CommissionCancellation) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the CommissionCancellation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CommissionCancellation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	commissionCancellationUpdateCacheMut.RLock()
	cache, cached := commissionCancellationUpdateCache[key]
	commissionCancellationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			commissionCancellationAllColumns,
			commissionCancellationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update commission_cancellations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"commission_cancellations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, commissionCancellationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(commissionCancellationType, commissionCancellationMapping, append(wl, commissionCancellationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update commission_cancellations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for commission_cancellations")
	}

	if !cached {
		commissionCancellationUpdateCacheMut.Lock()
		commissionCancellationUpdateCache[key] = cache
		commissionCancellationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q commissionCancellationQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q commissionCancellationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for commission_cancellations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for commission_cancellations")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CommissionCancellationSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CommissionCancellationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commissionCancellationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"commission_cancellations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, commissionCancellationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in commissionCancellation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all commissionCancellation")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CommissionCancellation) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CommissionCancellation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no commission_cancellations provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(commissionCancellationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	commissionCancellationUpsertCacheMut.RLock()
	cache, cached := commissionCancellationUpsertCache[key]
	commissionCancellationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			commissionCancellationAllColumns,
			commissionCancellationColumnsWithDefault,
			commissionCancellationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			commissionCancellationAllColumns,
			commissionCancellationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert commission_cancellations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(commissionCancellationPrimaryKeyColumns))
			copy(conflict, commissionCancellationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"commission_cancellations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(commissionCancellationType, commissionCancellationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(commissionCancellationType, commissionCancellationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert commission_cancellations")
	}

	if !cached {
		commissionCancellationUpsertCacheMut.Lock()
		commissionCancellationUpsertCache[key] = cache
		commissionCancellationUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single CommissionCancellation record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CommissionCancellation) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single CommissionCancellation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CommissionCancellation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CommissionCancellation provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), commissionCancellationPrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"commission_cancellations\" WHERE \"commission_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from commission_cancellations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for commission_cancellations")
	}

	return rowsAff, nil
}

func (q commissionCancellationQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q commissionCancellationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no commissionCancellationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from commission_cancellations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for commission_cancellations")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CommissionCancellationSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CommissionCancellationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commissionCancellationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"commission_cancellations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, commissionCancellationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from commissionCancellation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for commission_cancellations")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CommissionCancellation) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no CommissionCancellation provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CommissionCancellation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCommissionCancellation(ctx, exec, o.CommissionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommissionCancellationSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty CommissionCancellationSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommissionCancellationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CommissionCancellationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commissionCancellationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"commission_cancellations\".* FROM \"alpha\".\"commission_cancellations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, commissionCancellationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CommissionCancellationSlice")
	}

	*o = slice

	return nil
}

// CommissionCancellationExistsG checks if the CommissionCancellation row exists.
func CommissionCancellationExistsG(ctx context.Context, commissionID int) (bool, error) {
	return CommissionCancellationExists(ctx, boil.GetContextDB(), commissionID)
}

// CommissionCancellationExists checks if the CommissionCancellation row exists.
func CommissionCancellationExists(ctx context.Context, exec boil.ContextExecutor, commissionID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"commission_cancellations\" where \"commission_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, commissionID)
	}
	row := exec.QueryRowContext(ctx, sql, commissionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if commission_cancellations exists")
	}

	return exists, nil
}
