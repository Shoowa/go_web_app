// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Model is an object representing the database table.
type Model struct {
	ID         int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Code       string    `boil:"code" json:"code" toml:"code" yaml:"code"`
	CommonID   int       `boil:"common_id" json:"common_id" toml:"common_id" yaml:"common_id"`
	CategoryID int       `boil:"category_id" json:"category_id" toml:"category_id" yaml:"category_id"`
	BrandID    int       `boil:"brand_id" json:"brand_id" toml:"brand_id" yaml:"brand_id"`
	Traits     null.JSON `boil:"traits" json:"traits,omitempty" toml:"traits" yaml:"traits,omitempty"`

	R *modelR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L modelL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ModelColumns = struct {
	ID         string
	Code       string
	CommonID   string
	CategoryID string
	BrandID    string
	Traits     string
}{
	ID:         "id",
	Code:       "code",
	CommonID:   "common_id",
	CategoryID: "category_id",
	BrandID:    "brand_id",
	Traits:     "traits",
}

var ModelTableColumns = struct {
	ID         string
	Code       string
	CommonID   string
	CategoryID string
	BrandID    string
	Traits     string
}{
	ID:         "models.id",
	Code:       "models.code",
	CommonID:   "models.common_id",
	CategoryID: "models.category_id",
	BrandID:    "models.brand_id",
	Traits:     "models.traits",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ModelWhere = struct {
	ID         whereHelperint
	Code       whereHelperstring
	CommonID   whereHelperint
	CategoryID whereHelperint
	BrandID    whereHelperint
	Traits     whereHelpernull_JSON
}{
	ID:         whereHelperint{field: "\"alpha\".\"models\".\"id\""},
	Code:       whereHelperstring{field: "\"alpha\".\"models\".\"code\""},
	CommonID:   whereHelperint{field: "\"alpha\".\"models\".\"common_id\""},
	CategoryID: whereHelperint{field: "\"alpha\".\"models\".\"category_id\""},
	BrandID:    whereHelperint{field: "\"alpha\".\"models\".\"brand_id\""},
	Traits:     whereHelpernull_JSON{field: "\"alpha\".\"models\".\"traits\""},
}

// ModelRels is where relationship names are stored.
var ModelRels = struct {
	Brand    string
	Category string
	Common   string
	Products string
}{
	Brand:    "Brand",
	Category: "Category",
	Common:   "Common",
	Products: "Products",
}

// modelR is where relationships are stored.
type modelR struct {
	Brand    *Brand       `boil:"Brand" json:"Brand" toml:"Brand" yaml:"Brand"`
	Category *Category    `boil:"Category" json:"Category" toml:"Category" yaml:"Category"`
	Common   *Common      `boil:"Common" json:"Common" toml:"Common" yaml:"Common"`
	Products ProductSlice `boil:"Products" json:"Products" toml:"Products" yaml:"Products"`
}

// NewStruct creates a new relationship struct
func (*modelR) NewStruct() *modelR {
	return &modelR{}
}

func (r *modelR) GetBrand() *Brand {
	if r == nil {
		return nil
	}
	return r.Brand
}

func (r *modelR) GetCategory() *Category {
	if r == nil {
		return nil
	}
	return r.Category
}

func (r *modelR) GetCommon() *Common {
	if r == nil {
		return nil
	}
	return r.Common
}

func (r *modelR) GetProducts() ProductSlice {
	if r == nil {
		return nil
	}
	return r.Products
}

// modelL is where Load methods for each relationship are stored.
type modelL struct{}

var (
	modelAllColumns            = []string{"id", "code", "common_id", "category_id", "brand_id", "traits"}
	modelColumnsWithoutDefault = []string{"code", "common_id", "category_id", "brand_id"}
	modelColumnsWithDefault    = []string{"id", "traits"}
	modelPrimaryKeyColumns     = []string{"id"}
	modelGeneratedColumns      = []string{"id"}
)

type (
	// ModelSlice is an alias for a slice of pointers to Model.
	// This should almost always be used instead of []Model.
	ModelSlice []*Model

	modelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	modelType                 = reflect.TypeOf(&Model{})
	modelMapping              = queries.MakeStructMapping(modelType)
	modelPrimaryKeyMapping, _ = queries.BindMapping(modelType, modelMapping, modelPrimaryKeyColumns)
	modelInsertCacheMut       sync.RWMutex
	modelInsertCache          = make(map[string]insertCache)
	modelUpdateCacheMut       sync.RWMutex
	modelUpdateCache          = make(map[string]updateCache)
	modelUpsertCacheMut       sync.RWMutex
	modelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single model record from the query using the global executor.
func (q modelQuery) OneG(ctx context.Context) (*Model, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single model record from the query.
func (q modelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Model, error) {
	o := &Model{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for models")
	}

	return o, nil
}

// AllG returns all Model records from the query using the global executor.
func (q modelQuery) AllG(ctx context.Context) (ModelSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Model records from the query.
func (q modelQuery) All(ctx context.Context, exec boil.ContextExecutor) (ModelSlice, error) {
	var o []*Model

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Model slice")
	}

	return o, nil
}

// CountG returns the count of all Model records in the query using the global executor
func (q modelQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Model records in the query.
func (q modelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count models rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q modelQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q modelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if models exists")
	}

	return count > 0, nil
}

// Brand pointed to by the foreign key.
func (o *Model) Brand(mods ...qm.QueryMod) brandQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BrandID),
	}

	queryMods = append(queryMods, mods...)

	return Brands(queryMods...)
}

// Category pointed to by the foreign key.
func (o *Model) Category(mods ...qm.QueryMod) categoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	return Categories(queryMods...)
}

// Common pointed to by the foreign key.
func (o *Model) Common(mods ...qm.QueryMod) commonQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CommonID),
	}

	queryMods = append(queryMods, mods...)

	return Commons(queryMods...)
}

// Products retrieves all the product's Products with an executor.
func (o *Model) Products(mods ...qm.QueryMod) productQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"products\".\"model_id\"=?", o.ID),
	)

	return Products(queryMods...)
}

// LoadBrand allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (modelL) LoadBrand(ctx context.Context, e boil.ContextExecutor, singular bool, maybeModel interface{}, mods queries.Applicator) error {
	var slice []*Model
	var object *Model

	if singular {
		var ok bool
		object, ok = maybeModel.(*Model)
		if !ok {
			object = new(Model)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeModel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeModel))
			}
		}
	} else {
		s, ok := maybeModel.(*[]*Model)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeModel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeModel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &modelR{}
		}
		args = append(args, object.BrandID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &modelR{}
			}

			for _, a := range args {
				if a == obj.BrandID {
					continue Outer
				}
			}

			args = append(args, obj.BrandID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.brands`),
		qm.WhereIn(`alpha.brands.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Brand")
	}

	var resultSlice []*Brand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Brand")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for brands")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for brands")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Brand = foreign
		if foreign.R == nil {
			foreign.R = &brandR{}
		}
		foreign.R.Models = append(foreign.R.Models, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BrandID == foreign.ID {
				local.R.Brand = foreign
				if foreign.R == nil {
					foreign.R = &brandR{}
				}
				foreign.R.Models = append(foreign.R.Models, local)
				break
			}
		}
	}

	return nil
}

// LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (modelL) LoadCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeModel interface{}, mods queries.Applicator) error {
	var slice []*Model
	var object *Model

	if singular {
		var ok bool
		object, ok = maybeModel.(*Model)
		if !ok {
			object = new(Model)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeModel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeModel))
			}
		}
	} else {
		s, ok := maybeModel.(*[]*Model)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeModel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeModel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &modelR{}
		}
		args = append(args, object.CategoryID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &modelR{}
			}

			for _, a := range args {
				if a == obj.CategoryID {
					continue Outer
				}
			}

			args = append(args, obj.CategoryID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.categories`),
		qm.WhereIn(`alpha.categories.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Category")
	}

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categories")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Category = foreign
		if foreign.R == nil {
			foreign.R = &categoryR{}
		}
		foreign.R.Models = append(foreign.R.Models, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CategoryID == foreign.ID {
				local.R.Category = foreign
				if foreign.R == nil {
					foreign.R = &categoryR{}
				}
				foreign.R.Models = append(foreign.R.Models, local)
				break
			}
		}
	}

	return nil
}

// LoadCommon allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (modelL) LoadCommon(ctx context.Context, e boil.ContextExecutor, singular bool, maybeModel interface{}, mods queries.Applicator) error {
	var slice []*Model
	var object *Model

	if singular {
		var ok bool
		object, ok = maybeModel.(*Model)
		if !ok {
			object = new(Model)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeModel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeModel))
			}
		}
	} else {
		s, ok := maybeModel.(*[]*Model)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeModel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeModel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &modelR{}
		}
		args = append(args, object.CommonID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &modelR{}
			}

			for _, a := range args {
				if a == obj.CommonID {
					continue Outer
				}
			}

			args = append(args, obj.CommonID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.common`),
		qm.WhereIn(`alpha.common.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Common")
	}

	var resultSlice []*Common
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Common")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for common")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for common")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Common = foreign
		if foreign.R == nil {
			foreign.R = &commonR{}
		}
		foreign.R.Models = append(foreign.R.Models, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CommonID == foreign.ID {
				local.R.Common = foreign
				if foreign.R == nil {
					foreign.R = &commonR{}
				}
				foreign.R.Models = append(foreign.R.Models, local)
				break
			}
		}
	}

	return nil
}

// LoadProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (modelL) LoadProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeModel interface{}, mods queries.Applicator) error {
	var slice []*Model
	var object *Model

	if singular {
		var ok bool
		object, ok = maybeModel.(*Model)
		if !ok {
			object = new(Model)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeModel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeModel))
			}
		}
	} else {
		s, ok := maybeModel.(*[]*Model)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeModel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeModel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &modelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &modelR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.products`),
		qm.WhereIn(`alpha.products.model_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load products")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if singular {
		object.R.Products = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productR{}
			}
			foreign.R.Model = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ModelID {
				local.R.Products = append(local.R.Products, foreign)
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.Model = local
				break
			}
		}
	}

	return nil
}

// SetBrandG of the model to the related item.
// Sets o.R.Brand to related.
// Adds o to related.R.Models.
// Uses the global database handle.
func (o *Model) SetBrandG(ctx context.Context, insert bool, related *Brand) error {
	return o.SetBrand(ctx, boil.GetContextDB(), insert, related)
}

// SetBrand of the model to the related item.
// Sets o.R.Brand to related.
// Adds o to related.R.Models.
func (o *Model) SetBrand(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Brand) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"models\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"brand_id"}),
		strmangle.WhereClause("\"", "\"", 2, modelPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BrandID = related.ID
	if o.R == nil {
		o.R = &modelR{
			Brand: related,
		}
	} else {
		o.R.Brand = related
	}

	if related.R == nil {
		related.R = &brandR{
			Models: ModelSlice{o},
		}
	} else {
		related.R.Models = append(related.R.Models, o)
	}

	return nil
}

// SetCategoryG of the model to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.Models.
// Uses the global database handle.
func (o *Model) SetCategoryG(ctx context.Context, insert bool, related *Category) error {
	return o.SetCategory(ctx, boil.GetContextDB(), insert, related)
}

// SetCategory of the model to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.Models.
func (o *Model) SetCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Category) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"models\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
		strmangle.WhereClause("\"", "\"", 2, modelPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CategoryID = related.ID
	if o.R == nil {
		o.R = &modelR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &categoryR{
			Models: ModelSlice{o},
		}
	} else {
		related.R.Models = append(related.R.Models, o)
	}

	return nil
}

// SetCommonG of the model to the related item.
// Sets o.R.Common to related.
// Adds o to related.R.Models.
// Uses the global database handle.
func (o *Model) SetCommonG(ctx context.Context, insert bool, related *Common) error {
	return o.SetCommon(ctx, boil.GetContextDB(), insert, related)
}

// SetCommon of the model to the related item.
// Sets o.R.Common to related.
// Adds o to related.R.Models.
func (o *Model) SetCommon(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Common) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"models\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"common_id"}),
		strmangle.WhereClause("\"", "\"", 2, modelPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CommonID = related.ID
	if o.R == nil {
		o.R = &modelR{
			Common: related,
		}
	} else {
		o.R.Common = related
	}

	if related.R == nil {
		related.R = &commonR{
			Models: ModelSlice{o},
		}
	} else {
		related.R.Models = append(related.R.Models, o)
	}

	return nil
}

// AddProductsG adds the given related objects to the existing relationships
// of the model, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Model appropriately.
// Uses the global database handle.
func (o *Model) AddProductsG(ctx context.Context, insert bool, related ...*Product) error {
	return o.AddProducts(ctx, boil.GetContextDB(), insert, related...)
}

// AddProducts adds the given related objects to the existing relationships
// of the model, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Model appropriately.
func (o *Model) AddProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Product) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ModelID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"model_id"}),
				strmangle.WhereClause("\"", "\"", 2, productPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ModelID = o.ID
		}
	}

	if o.R == nil {
		o.R = &modelR{
			Products: related,
		}
	} else {
		o.R.Products = append(o.R.Products, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productR{
				Model: o,
			}
		} else {
			rel.R.Model = o
		}
	}
	return nil
}

// Models retrieves all the records using an executor.
func Models(mods ...qm.QueryMod) modelQuery {
	mods = append(mods, qm.From("\"alpha\".\"models\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"models\".*"})
	}

	return modelQuery{q}
}

// FindModelG retrieves a single record by ID.
func FindModelG(ctx context.Context, iD int, selectCols ...string) (*Model, error) {
	return FindModel(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindModel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindModel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Model, error) {
	modelObj := &Model{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"models\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, modelObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from models")
	}

	return modelObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Model) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Model) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no models provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(modelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	modelInsertCacheMut.RLock()
	cache, cached := modelInsertCache[key]
	modelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			modelAllColumns,
			modelColumnsWithDefault,
			modelColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, modelGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(modelType, modelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(modelType, modelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"models\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"models\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into models")
	}

	if !cached {
		modelInsertCacheMut.Lock()
		modelInsertCache[key] = cache
		modelInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Model record using the global executor.
// See Update for more documentation.
func (o *Model) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Model.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Model) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	modelUpdateCacheMut.RLock()
	cache, cached := modelUpdateCache[key]
	modelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			modelAllColumns,
			modelPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, modelGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update models, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"models\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, modelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(modelType, modelMapping, append(wl, modelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update models row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for models")
	}

	if !cached {
		modelUpdateCacheMut.Lock()
		modelUpdateCache[key] = cache
		modelUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q modelQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q modelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for models")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for models")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ModelSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ModelSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), modelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"models\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, modelPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in model slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all model")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Model) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Model) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no models provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(modelColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	modelUpsertCacheMut.RLock()
	cache, cached := modelUpsertCache[key]
	modelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			modelAllColumns,
			modelColumnsWithDefault,
			modelColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			modelAllColumns,
			modelPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, modelGeneratedColumns)
		update = strmangle.SetComplement(update, modelGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert models, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(modelPrimaryKeyColumns))
			copy(conflict, modelPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"models\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(modelType, modelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(modelType, modelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert models")
	}

	if !cached {
		modelUpsertCacheMut.Lock()
		modelUpsertCache[key] = cache
		modelUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single Model record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Model) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Model record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Model) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Model provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), modelPrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"models\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from models")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for models")
	}

	return rowsAff, nil
}

func (q modelQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q modelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no modelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from models")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for models")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ModelSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ModelSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), modelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"models\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, modelPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from model slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for models")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Model) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Model provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Model) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindModel(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ModelSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ModelSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ModelSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ModelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), modelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"models\".* FROM \"alpha\".\"models\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, modelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ModelSlice")
	}

	*o = slice

	return nil
}

// ModelExistsG checks if the Model row exists.
func ModelExistsG(ctx context.Context, iD int) (bool, error) {
	return ModelExists(ctx, boil.GetContextDB(), iD)
}

// ModelExists checks if the Model row exists.
func ModelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"models\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if models exists")
	}

	return exists, nil
}
