// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Commission is an object representing the database table.
type Commission struct {
	ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CompanyID    int       `boil:"company_id" json:"company_id" toml:"company_id" yaml:"company_id"`
	InternalCode int       `boil:"internal_code" json:"internal_code" toml:"internal_code" yaml:"internal_code"`
	Expected     time.Time `boil:"expected" json:"expected" toml:"expected" yaml:"expected"`
	AgentID      null.Int  `boil:"agent_id" json:"agent_id,omitempty" toml:"agent_id" yaml:"agent_id,omitempty"`
	Created      time.Time `boil:"created" json:"created" toml:"created" yaml:"created"`
	Cancel       null.Bool `boil:"cancel" json:"cancel,omitempty" toml:"cancel" yaml:"cancel,omitempty"`

	R *commissionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L commissionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CommissionColumns = struct {
	ID           string
	CompanyID    string
	InternalCode string
	Expected     string
	AgentID      string
	Created      string
	Cancel       string
}{
	ID:           "id",
	CompanyID:    "company_id",
	InternalCode: "internal_code",
	Expected:     "expected",
	AgentID:      "agent_id",
	Created:      "created",
	Cancel:       "cancel",
}

var CommissionTableColumns = struct {
	ID           string
	CompanyID    string
	InternalCode string
	Expected     string
	AgentID      string
	Created      string
	Cancel       string
}{
	ID:           "commissions.id",
	CompanyID:    "commissions.company_id",
	InternalCode: "commissions.internal_code",
	Expected:     "commissions.expected",
	AgentID:      "commissions.agent_id",
	Created:      "commissions.created",
	Cancel:       "commissions.cancel",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CommissionWhere = struct {
	ID           whereHelperint
	CompanyID    whereHelperint
	InternalCode whereHelperint
	Expected     whereHelpertime_Time
	AgentID      whereHelpernull_Int
	Created      whereHelpertime_Time
	Cancel       whereHelpernull_Bool
}{
	ID:           whereHelperint{field: "\"alpha\".\"commissions\".\"id\""},
	CompanyID:    whereHelperint{field: "\"alpha\".\"commissions\".\"company_id\""},
	InternalCode: whereHelperint{field: "\"alpha\".\"commissions\".\"internal_code\""},
	Expected:     whereHelpertime_Time{field: "\"alpha\".\"commissions\".\"expected\""},
	AgentID:      whereHelpernull_Int{field: "\"alpha\".\"commissions\".\"agent_id\""},
	Created:      whereHelpertime_Time{field: "\"alpha\".\"commissions\".\"created\""},
	Cancel:       whereHelpernull_Bool{field: "\"alpha\".\"commissions\".\"cancel\""},
}

// CommissionRels is where relationship names are stored.
var CommissionRels = struct {
	Agent                  string
	Company                string
	CommissionCancellation string
	CommissionItems        string
	Salesorders            string
}{
	Agent:                  "Agent",
	Company:                "Company",
	CommissionCancellation: "CommissionCancellation",
	CommissionItems:        "CommissionItems",
	Salesorders:            "Salesorders",
}

// commissionR is where relationships are stored.
type commissionR struct {
	Agent                  *Person                 `boil:"Agent" json:"Agent" toml:"Agent" yaml:"Agent"`
	Company                *Company                `boil:"Company" json:"Company" toml:"Company" yaml:"Company"`
	CommissionCancellation *CommissionCancellation `boil:"CommissionCancellation" json:"CommissionCancellation" toml:"CommissionCancellation" yaml:"CommissionCancellation"`
	CommissionItems        CommissionItemSlice     `boil:"CommissionItems" json:"CommissionItems" toml:"CommissionItems" yaml:"CommissionItems"`
	Salesorders            SalesorderSlice         `boil:"Salesorders" json:"Salesorders" toml:"Salesorders" yaml:"Salesorders"`
}

// NewStruct creates a new relationship struct
func (*commissionR) NewStruct() *commissionR {
	return &commissionR{}
}

func (r *commissionR) GetAgent() *Person {
	if r == nil {
		return nil
	}
	return r.Agent
}

func (r *commissionR) GetCompany() *Company {
	if r == nil {
		return nil
	}
	return r.Company
}

func (r *commissionR) GetCommissionCancellation() *CommissionCancellation {
	if r == nil {
		return nil
	}
	return r.CommissionCancellation
}

func (r *commissionR) GetCommissionItems() CommissionItemSlice {
	if r == nil {
		return nil
	}
	return r.CommissionItems
}

func (r *commissionR) GetSalesorders() SalesorderSlice {
	if r == nil {
		return nil
	}
	return r.Salesorders
}

// commissionL is where Load methods for each relationship are stored.
type commissionL struct{}

var (
	commissionAllColumns            = []string{"id", "company_id", "internal_code", "expected", "agent_id", "created", "cancel"}
	commissionColumnsWithoutDefault = []string{"company_id", "internal_code", "expected"}
	commissionColumnsWithDefault    = []string{"id", "agent_id", "created", "cancel"}
	commissionPrimaryKeyColumns     = []string{"id"}
	commissionGeneratedColumns      = []string{"id"}
)

type (
	// CommissionSlice is an alias for a slice of pointers to Commission.
	// This should almost always be used instead of []Commission.
	CommissionSlice []*Commission

	commissionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	commissionType                 = reflect.TypeOf(&Commission{})
	commissionMapping              = queries.MakeStructMapping(commissionType)
	commissionPrimaryKeyMapping, _ = queries.BindMapping(commissionType, commissionMapping, commissionPrimaryKeyColumns)
	commissionInsertCacheMut       sync.RWMutex
	commissionInsertCache          = make(map[string]insertCache)
	commissionUpdateCacheMut       sync.RWMutex
	commissionUpdateCache          = make(map[string]updateCache)
	commissionUpsertCacheMut       sync.RWMutex
	commissionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single commission record from the query using the global executor.
func (q commissionQuery) OneG(ctx context.Context) (*Commission, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single commission record from the query.
func (q commissionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Commission, error) {
	o := &Commission{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for commissions")
	}

	return o, nil
}

// AllG returns all Commission records from the query using the global executor.
func (q commissionQuery) AllG(ctx context.Context) (CommissionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Commission records from the query.
func (q commissionQuery) All(ctx context.Context, exec boil.ContextExecutor) (CommissionSlice, error) {
	var o []*Commission

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Commission slice")
	}

	return o, nil
}

// CountG returns the count of all Commission records in the query using the global executor
func (q commissionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Commission records in the query.
func (q commissionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count commissions rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q commissionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q commissionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if commissions exists")
	}

	return count > 0, nil
}

// Agent pointed to by the foreign key.
func (o *Commission) Agent(mods ...qm.QueryMod) personQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AgentID),
	}

	queryMods = append(queryMods, mods...)

	return Persons(queryMods...)
}

// Company pointed to by the foreign key.
func (o *Commission) Company(mods ...qm.QueryMod) companyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CompanyID),
	}

	queryMods = append(queryMods, mods...)

	return Companies(queryMods...)
}

// CommissionCancellation pointed to by the foreign key.
func (o *Commission) CommissionCancellation(mods ...qm.QueryMod) commissionCancellationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"commission_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return CommissionCancellations(queryMods...)
}

// CommissionItems retrieves all the commission_item's CommissionItems with an executor.
func (o *Commission) CommissionItems(mods ...qm.QueryMod) commissionItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"commission_items\".\"commission_id\"=?", o.ID),
	)

	return CommissionItems(queryMods...)
}

// Salesorders retrieves all the salesorder's Salesorders with an executor.
func (o *Commission) Salesorders(mods ...qm.QueryMod) salesorderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"salesorders\".\"commission_id\"=?", o.ID),
	)

	return Salesorders(queryMods...)
}

// LoadAgent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (commissionL) LoadAgent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommission interface{}, mods queries.Applicator) error {
	var slice []*Commission
	var object *Commission

	if singular {
		var ok bool
		object, ok = maybeCommission.(*Commission)
		if !ok {
			object = new(Commission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCommission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCommission))
			}
		}
	} else {
		s, ok := maybeCommission.(*[]*Commission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCommission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCommission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &commissionR{}
		}
		if !queries.IsNil(object.AgentID) {
			args = append(args, object.AgentID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &commissionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AgentID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AgentID) {
				args = append(args, obj.AgentID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.persons`),
		qm.WhereIn(`alpha.persons.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Person")
	}

	var resultSlice []*Person
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Person")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for persons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for persons")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Agent = foreign
		if foreign.R == nil {
			foreign.R = &personR{}
		}
		foreign.R.AgentCommissions = append(foreign.R.AgentCommissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AgentID, foreign.ID) {
				local.R.Agent = foreign
				if foreign.R == nil {
					foreign.R = &personR{}
				}
				foreign.R.AgentCommissions = append(foreign.R.AgentCommissions, local)
				break
			}
		}
	}

	return nil
}

// LoadCompany allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (commissionL) LoadCompany(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommission interface{}, mods queries.Applicator) error {
	var slice []*Commission
	var object *Commission

	if singular {
		var ok bool
		object, ok = maybeCommission.(*Commission)
		if !ok {
			object = new(Commission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCommission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCommission))
			}
		}
	} else {
		s, ok := maybeCommission.(*[]*Commission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCommission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCommission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &commissionR{}
		}
		args = append(args, object.CompanyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &commissionR{}
			}

			for _, a := range args {
				if a == obj.CompanyID {
					continue Outer
				}
			}

			args = append(args, obj.CompanyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.companies`),
		qm.WhereIn(`alpha.companies.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Company")
	}

	var resultSlice []*Company
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Company")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for companies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for companies")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Company = foreign
		if foreign.R == nil {
			foreign.R = &companyR{}
		}
		foreign.R.Commissions = append(foreign.R.Commissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CompanyID == foreign.ID {
				local.R.Company = foreign
				if foreign.R == nil {
					foreign.R = &companyR{}
				}
				foreign.R.Commissions = append(foreign.R.Commissions, local)
				break
			}
		}
	}

	return nil
}

// LoadCommissionCancellation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (commissionL) LoadCommissionCancellation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommission interface{}, mods queries.Applicator) error {
	var slice []*Commission
	var object *Commission

	if singular {
		var ok bool
		object, ok = maybeCommission.(*Commission)
		if !ok {
			object = new(Commission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCommission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCommission))
			}
		}
	} else {
		s, ok := maybeCommission.(*[]*Commission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCommission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCommission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &commissionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &commissionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.commission_cancellations`),
		qm.WhereIn(`alpha.commission_cancellations.commission_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CommissionCancellation")
	}

	var resultSlice []*CommissionCancellation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CommissionCancellation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for commission_cancellations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for commission_cancellations")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CommissionCancellation = foreign
		if foreign.R == nil {
			foreign.R = &commissionCancellationR{}
		}
		foreign.R.Commission = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.CommissionID {
				local.R.CommissionCancellation = foreign
				if foreign.R == nil {
					foreign.R = &commissionCancellationR{}
				}
				foreign.R.Commission = local
				break
			}
		}
	}

	return nil
}

// LoadCommissionItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (commissionL) LoadCommissionItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommission interface{}, mods queries.Applicator) error {
	var slice []*Commission
	var object *Commission

	if singular {
		var ok bool
		object, ok = maybeCommission.(*Commission)
		if !ok {
			object = new(Commission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCommission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCommission))
			}
		}
	} else {
		s, ok := maybeCommission.(*[]*Commission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCommission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCommission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &commissionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &commissionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.commission_items`),
		qm.WhereIn(`alpha.commission_items.commission_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load commission_items")
	}

	var resultSlice []*CommissionItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice commission_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on commission_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for commission_items")
	}

	if singular {
		object.R.CommissionItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &commissionItemR{}
			}
			foreign.R.Commission = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CommissionID {
				local.R.CommissionItems = append(local.R.CommissionItems, foreign)
				if foreign.R == nil {
					foreign.R = &commissionItemR{}
				}
				foreign.R.Commission = local
				break
			}
		}
	}

	return nil
}

// LoadSalesorders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (commissionL) LoadSalesorders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommission interface{}, mods queries.Applicator) error {
	var slice []*Commission
	var object *Commission

	if singular {
		var ok bool
		object, ok = maybeCommission.(*Commission)
		if !ok {
			object = new(Commission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCommission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCommission))
			}
		}
	} else {
		s, ok := maybeCommission.(*[]*Commission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCommission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCommission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &commissionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &commissionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.salesorders`),
		qm.WhereIn(`alpha.salesorders.commission_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load salesorders")
	}

	var resultSlice []*Salesorder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice salesorders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on salesorders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for salesorders")
	}

	if singular {
		object.R.Salesorders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &salesorderR{}
			}
			foreign.R.Commission = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CommissionID {
				local.R.Salesorders = append(local.R.Salesorders, foreign)
				if foreign.R == nil {
					foreign.R = &salesorderR{}
				}
				foreign.R.Commission = local
				break
			}
		}
	}

	return nil
}

// SetAgentG of the commission to the related item.
// Sets o.R.Agent to related.
// Adds o to related.R.AgentCommissions.
// Uses the global database handle.
func (o *Commission) SetAgentG(ctx context.Context, insert bool, related *Person) error {
	return o.SetAgent(ctx, boil.GetContextDB(), insert, related)
}

// SetAgent of the commission to the related item.
// Sets o.R.Agent to related.
// Adds o to related.R.AgentCommissions.
func (o *Commission) SetAgent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Person) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"commissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"agent_id"}),
		strmangle.WhereClause("\"", "\"", 2, commissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AgentID, related.ID)
	if o.R == nil {
		o.R = &commissionR{
			Agent: related,
		}
	} else {
		o.R.Agent = related
	}

	if related.R == nil {
		related.R = &personR{
			AgentCommissions: CommissionSlice{o},
		}
	} else {
		related.R.AgentCommissions = append(related.R.AgentCommissions, o)
	}

	return nil
}

// RemoveAgentG relationship.
// Sets o.R.Agent to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Commission) RemoveAgentG(ctx context.Context, related *Person) error {
	return o.RemoveAgent(ctx, boil.GetContextDB(), related)
}

// RemoveAgent relationship.
// Sets o.R.Agent to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Commission) RemoveAgent(ctx context.Context, exec boil.ContextExecutor, related *Person) error {
	var err error

	queries.SetScanner(&o.AgentID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("agent_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Agent = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AgentCommissions {
		if queries.Equal(o.AgentID, ri.AgentID) {
			continue
		}

		ln := len(related.R.AgentCommissions)
		if ln > 1 && i < ln-1 {
			related.R.AgentCommissions[i] = related.R.AgentCommissions[ln-1]
		}
		related.R.AgentCommissions = related.R.AgentCommissions[:ln-1]
		break
	}
	return nil
}

// SetCompanyG of the commission to the related item.
// Sets o.R.Company to related.
// Adds o to related.R.Commissions.
// Uses the global database handle.
func (o *Commission) SetCompanyG(ctx context.Context, insert bool, related *Company) error {
	return o.SetCompany(ctx, boil.GetContextDB(), insert, related)
}

// SetCompany of the commission to the related item.
// Sets o.R.Company to related.
// Adds o to related.R.Commissions.
func (o *Commission) SetCompany(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Company) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"commissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"company_id"}),
		strmangle.WhereClause("\"", "\"", 2, commissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CompanyID = related.ID
	if o.R == nil {
		o.R = &commissionR{
			Company: related,
		}
	} else {
		o.R.Company = related
	}

	if related.R == nil {
		related.R = &companyR{
			Commissions: CommissionSlice{o},
		}
	} else {
		related.R.Commissions = append(related.R.Commissions, o)
	}

	return nil
}

// SetCommissionCancellationG of the commission to the related item.
// Sets o.R.CommissionCancellation to related.
// Adds o to related.R.Commission.
// Uses the global database handle.
func (o *Commission) SetCommissionCancellationG(ctx context.Context, insert bool, related *CommissionCancellation) error {
	return o.SetCommissionCancellation(ctx, boil.GetContextDB(), insert, related)
}

// SetCommissionCancellation of the commission to the related item.
// Sets o.R.CommissionCancellation to related.
// Adds o to related.R.Commission.
func (o *Commission) SetCommissionCancellation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CommissionCancellation) error {
	var err error

	if insert {
		related.CommissionID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"alpha\".\"commission_cancellations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"commission_id"}),
			strmangle.WhereClause("\"", "\"", 2, commissionCancellationPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.CommissionID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.CommissionID = o.ID
	}

	if o.R == nil {
		o.R = &commissionR{
			CommissionCancellation: related,
		}
	} else {
		o.R.CommissionCancellation = related
	}

	if related.R == nil {
		related.R = &commissionCancellationR{
			Commission: o,
		}
	} else {
		related.R.Commission = o
	}
	return nil
}

// AddCommissionItemsG adds the given related objects to the existing relationships
// of the commission, optionally inserting them as new records.
// Appends related to o.R.CommissionItems.
// Sets related.R.Commission appropriately.
// Uses the global database handle.
func (o *Commission) AddCommissionItemsG(ctx context.Context, insert bool, related ...*CommissionItem) error {
	return o.AddCommissionItems(ctx, boil.GetContextDB(), insert, related...)
}

// AddCommissionItems adds the given related objects to the existing relationships
// of the commission, optionally inserting them as new records.
// Appends related to o.R.CommissionItems.
// Sets related.R.Commission appropriately.
func (o *Commission) AddCommissionItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CommissionItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CommissionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"commission_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"commission_id"}),
				strmangle.WhereClause("\"", "\"", 2, commissionItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CommissionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &commissionR{
			CommissionItems: related,
		}
	} else {
		o.R.CommissionItems = append(o.R.CommissionItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &commissionItemR{
				Commission: o,
			}
		} else {
			rel.R.Commission = o
		}
	}
	return nil
}

// AddSalesordersG adds the given related objects to the existing relationships
// of the commission, optionally inserting them as new records.
// Appends related to o.R.Salesorders.
// Sets related.R.Commission appropriately.
// Uses the global database handle.
func (o *Commission) AddSalesordersG(ctx context.Context, insert bool, related ...*Salesorder) error {
	return o.AddSalesorders(ctx, boil.GetContextDB(), insert, related...)
}

// AddSalesorders adds the given related objects to the existing relationships
// of the commission, optionally inserting them as new records.
// Appends related to o.R.Salesorders.
// Sets related.R.Commission appropriately.
func (o *Commission) AddSalesorders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Salesorder) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CommissionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"salesorders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"commission_id"}),
				strmangle.WhereClause("\"", "\"", 2, salesorderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CommissionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &commissionR{
			Salesorders: related,
		}
	} else {
		o.R.Salesorders = append(o.R.Salesorders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &salesorderR{
				Commission: o,
			}
		} else {
			rel.R.Commission = o
		}
	}
	return nil
}

// Commissions retrieves all the records using an executor.
func Commissions(mods ...qm.QueryMod) commissionQuery {
	mods = append(mods, qm.From("\"alpha\".\"commissions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"commissions\".*"})
	}

	return commissionQuery{q}
}

// FindCommissionG retrieves a single record by ID.
func FindCommissionG(ctx context.Context, iD int, selectCols ...string) (*Commission, error) {
	return FindCommission(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindCommission retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCommission(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Commission, error) {
	commissionObj := &Commission{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"commissions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, commissionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from commissions")
	}

	return commissionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Commission) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Commission) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no commissions provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(commissionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	commissionInsertCacheMut.RLock()
	cache, cached := commissionInsertCache[key]
	commissionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			commissionAllColumns,
			commissionColumnsWithDefault,
			commissionColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, commissionGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(commissionType, commissionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(commissionType, commissionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"commissions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"commissions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into commissions")
	}

	if !cached {
		commissionInsertCacheMut.Lock()
		commissionInsertCache[key] = cache
		commissionInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Commission record using the global executor.
// See Update for more documentation.
func (o *Commission) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Commission.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Commission) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	commissionUpdateCacheMut.RLock()
	cache, cached := commissionUpdateCache[key]
	commissionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			commissionAllColumns,
			commissionPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, commissionGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update commissions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"commissions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, commissionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(commissionType, commissionMapping, append(wl, commissionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update commissions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for commissions")
	}

	if !cached {
		commissionUpdateCacheMut.Lock()
		commissionUpdateCache[key] = cache
		commissionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q commissionQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q commissionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for commissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for commissions")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CommissionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CommissionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"commissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, commissionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in commission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all commission")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Commission) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Commission) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no commissions provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(commissionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	commissionUpsertCacheMut.RLock()
	cache, cached := commissionUpsertCache[key]
	commissionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			commissionAllColumns,
			commissionColumnsWithDefault,
			commissionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			commissionAllColumns,
			commissionPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, commissionGeneratedColumns)
		update = strmangle.SetComplement(update, commissionGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert commissions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(commissionPrimaryKeyColumns))
			copy(conflict, commissionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"commissions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(commissionType, commissionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(commissionType, commissionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert commissions")
	}

	if !cached {
		commissionUpsertCacheMut.Lock()
		commissionUpsertCache[key] = cache
		commissionUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single Commission record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Commission) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Commission record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Commission) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Commission provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), commissionPrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"commissions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from commissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for commissions")
	}

	return rowsAff, nil
}

func (q commissionQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q commissionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no commissionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from commissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for commissions")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CommissionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CommissionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"commissions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, commissionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from commission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for commissions")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Commission) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Commission provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Commission) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCommission(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommissionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty CommissionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommissionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CommissionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"commissions\".* FROM \"alpha\".\"commissions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, commissionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CommissionSlice")
	}

	*o = slice

	return nil
}

// CommissionExistsG checks if the Commission row exists.
func CommissionExistsG(ctx context.Context, iD int) (bool, error) {
	return CommissionExists(ctx, boil.GetContextDB(), iD)
}

// CommissionExists checks if the Commission row exists.
func CommissionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"commissions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if commissions exists")
	}

	return exists, nil
}
