// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DeliveryComplaint is an object representing the database table.
type DeliveryComplaint struct {
	ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	SalesorderID null.Int  `boil:"salesorder_id" json:"salesorder_id,omitempty" toml:"salesorder_id" yaml:"salesorder_id,omitempty"`
	ReasonID     null.Int  `boil:"reason_id" json:"reason_id,omitempty" toml:"reason_id" yaml:"reason_id,omitempty"`
	ProductID    int       `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	Qty          int       `boil:"qty" json:"qty" toml:"qty" yaml:"qty"`
	Created      time.Time `boil:"created" json:"created" toml:"created" yaml:"created"`

	R *deliveryComplaintR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deliveryComplaintL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeliveryComplaintColumns = struct {
	ID           string
	SalesorderID string
	ReasonID     string
	ProductID    string
	Qty          string
	Created      string
}{
	ID:           "id",
	SalesorderID: "salesorder_id",
	ReasonID:     "reason_id",
	ProductID:    "product_id",
	Qty:          "qty",
	Created:      "created",
}

var DeliveryComplaintTableColumns = struct {
	ID           string
	SalesorderID string
	ReasonID     string
	ProductID    string
	Qty          string
	Created      string
}{
	ID:           "delivery_complaints.id",
	SalesorderID: "delivery_complaints.salesorder_id",
	ReasonID:     "delivery_complaints.reason_id",
	ProductID:    "delivery_complaints.product_id",
	Qty:          "delivery_complaints.qty",
	Created:      "delivery_complaints.created",
}

// Generated where

var DeliveryComplaintWhere = struct {
	ID           whereHelperint
	SalesorderID whereHelpernull_Int
	ReasonID     whereHelpernull_Int
	ProductID    whereHelperint
	Qty          whereHelperint
	Created      whereHelpertime_Time
}{
	ID:           whereHelperint{field: "\"alpha\".\"delivery_complaints\".\"id\""},
	SalesorderID: whereHelpernull_Int{field: "\"alpha\".\"delivery_complaints\".\"salesorder_id\""},
	ReasonID:     whereHelpernull_Int{field: "\"alpha\".\"delivery_complaints\".\"reason_id\""},
	ProductID:    whereHelperint{field: "\"alpha\".\"delivery_complaints\".\"product_id\""},
	Qty:          whereHelperint{field: "\"alpha\".\"delivery_complaints\".\"qty\""},
	Created:      whereHelpertime_Time{field: "\"alpha\".\"delivery_complaints\".\"created\""},
}

// DeliveryComplaintRels is where relationship names are stored.
var DeliveryComplaintRels = struct {
	Product    string
	Reason     string
	Salesorder string
}{
	Product:    "Product",
	Reason:     "Reason",
	Salesorder: "Salesorder",
}

// deliveryComplaintR is where relationships are stored.
type deliveryComplaintR struct {
	Product    *Product        `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Reason     *DeliveryReason `boil:"Reason" json:"Reason" toml:"Reason" yaml:"Reason"`
	Salesorder *Salesorder     `boil:"Salesorder" json:"Salesorder" toml:"Salesorder" yaml:"Salesorder"`
}

// NewStruct creates a new relationship struct
func (*deliveryComplaintR) NewStruct() *deliveryComplaintR {
	return &deliveryComplaintR{}
}

func (r *deliveryComplaintR) GetProduct() *Product {
	if r == nil {
		return nil
	}
	return r.Product
}

func (r *deliveryComplaintR) GetReason() *DeliveryReason {
	if r == nil {
		return nil
	}
	return r.Reason
}

func (r *deliveryComplaintR) GetSalesorder() *Salesorder {
	if r == nil {
		return nil
	}
	return r.Salesorder
}

// deliveryComplaintL is where Load methods for each relationship are stored.
type deliveryComplaintL struct{}

var (
	deliveryComplaintAllColumns            = []string{"id", "salesorder_id", "reason_id", "product_id", "qty", "created"}
	deliveryComplaintColumnsWithoutDefault = []string{"product_id", "qty"}
	deliveryComplaintColumnsWithDefault    = []string{"id", "salesorder_id", "reason_id", "created"}
	deliveryComplaintPrimaryKeyColumns     = []string{"id"}
	deliveryComplaintGeneratedColumns      = []string{"id"}
)

type (
	// DeliveryComplaintSlice is an alias for a slice of pointers to DeliveryComplaint.
	// This should almost always be used instead of []DeliveryComplaint.
	DeliveryComplaintSlice []*DeliveryComplaint

	deliveryComplaintQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deliveryComplaintType                 = reflect.TypeOf(&DeliveryComplaint{})
	deliveryComplaintMapping              = queries.MakeStructMapping(deliveryComplaintType)
	deliveryComplaintPrimaryKeyMapping, _ = queries.BindMapping(deliveryComplaintType, deliveryComplaintMapping, deliveryComplaintPrimaryKeyColumns)
	deliveryComplaintInsertCacheMut       sync.RWMutex
	deliveryComplaintInsertCache          = make(map[string]insertCache)
	deliveryComplaintUpdateCacheMut       sync.RWMutex
	deliveryComplaintUpdateCache          = make(map[string]updateCache)
	deliveryComplaintUpsertCacheMut       sync.RWMutex
	deliveryComplaintUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single deliveryComplaint record from the query using the global executor.
func (q deliveryComplaintQuery) OneG(ctx context.Context) (*DeliveryComplaint, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single deliveryComplaint record from the query.
func (q deliveryComplaintQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeliveryComplaint, error) {
	o := &DeliveryComplaint{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for delivery_complaints")
	}

	return o, nil
}

// AllG returns all DeliveryComplaint records from the query using the global executor.
func (q deliveryComplaintQuery) AllG(ctx context.Context) (DeliveryComplaintSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all DeliveryComplaint records from the query.
func (q deliveryComplaintQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeliveryComplaintSlice, error) {
	var o []*DeliveryComplaint

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DeliveryComplaint slice")
	}

	return o, nil
}

// CountG returns the count of all DeliveryComplaint records in the query using the global executor
func (q deliveryComplaintQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all DeliveryComplaint records in the query.
func (q deliveryComplaintQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count delivery_complaints rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q deliveryComplaintQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q deliveryComplaintQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if delivery_complaints exists")
	}

	return count > 0, nil
}

// Product pointed to by the foreign key.
func (o *DeliveryComplaint) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// Reason pointed to by the foreign key.
func (o *DeliveryComplaint) Reason(mods ...qm.QueryMod) deliveryReasonQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ReasonID),
	}

	queryMods = append(queryMods, mods...)

	return DeliveryReasons(queryMods...)
}

// Salesorder pointed to by the foreign key.
func (o *DeliveryComplaint) Salesorder(mods ...qm.QueryMod) salesorderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SalesorderID),
	}

	queryMods = append(queryMods, mods...)

	return Salesorders(queryMods...)
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deliveryComplaintL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeliveryComplaint interface{}, mods queries.Applicator) error {
	var slice []*DeliveryComplaint
	var object *DeliveryComplaint

	if singular {
		var ok bool
		object, ok = maybeDeliveryComplaint.(*DeliveryComplaint)
		if !ok {
			object = new(DeliveryComplaint)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeliveryComplaint)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeliveryComplaint))
			}
		}
	} else {
		s, ok := maybeDeliveryComplaint.(*[]*DeliveryComplaint)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeliveryComplaint)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeliveryComplaint))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deliveryComplaintR{}
		}
		args = append(args, object.ProductID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryComplaintR{}
			}

			for _, a := range args {
				if a == obj.ProductID {
					continue Outer
				}
			}

			args = append(args, obj.ProductID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.products`),
		qm.WhereIn(`alpha.products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.DeliveryComplaints = append(foreign.R.DeliveryComplaints, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.DeliveryComplaints = append(foreign.R.DeliveryComplaints, local)
				break
			}
		}
	}

	return nil
}

// LoadReason allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deliveryComplaintL) LoadReason(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeliveryComplaint interface{}, mods queries.Applicator) error {
	var slice []*DeliveryComplaint
	var object *DeliveryComplaint

	if singular {
		var ok bool
		object, ok = maybeDeliveryComplaint.(*DeliveryComplaint)
		if !ok {
			object = new(DeliveryComplaint)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeliveryComplaint)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeliveryComplaint))
			}
		}
	} else {
		s, ok := maybeDeliveryComplaint.(*[]*DeliveryComplaint)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeliveryComplaint)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeliveryComplaint))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deliveryComplaintR{}
		}
		if !queries.IsNil(object.ReasonID) {
			args = append(args, object.ReasonID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryComplaintR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ReasonID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ReasonID) {
				args = append(args, obj.ReasonID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.delivery_reasons`),
		qm.WhereIn(`alpha.delivery_reasons.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DeliveryReason")
	}

	var resultSlice []*DeliveryReason
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DeliveryReason")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for delivery_reasons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for delivery_reasons")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Reason = foreign
		if foreign.R == nil {
			foreign.R = &deliveryReasonR{}
		}
		foreign.R.ReasonDeliveryComplaints = append(foreign.R.ReasonDeliveryComplaints, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ReasonID, foreign.ID) {
				local.R.Reason = foreign
				if foreign.R == nil {
					foreign.R = &deliveryReasonR{}
				}
				foreign.R.ReasonDeliveryComplaints = append(foreign.R.ReasonDeliveryComplaints, local)
				break
			}
		}
	}

	return nil
}

// LoadSalesorder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deliveryComplaintL) LoadSalesorder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeliveryComplaint interface{}, mods queries.Applicator) error {
	var slice []*DeliveryComplaint
	var object *DeliveryComplaint

	if singular {
		var ok bool
		object, ok = maybeDeliveryComplaint.(*DeliveryComplaint)
		if !ok {
			object = new(DeliveryComplaint)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeliveryComplaint)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeliveryComplaint))
			}
		}
	} else {
		s, ok := maybeDeliveryComplaint.(*[]*DeliveryComplaint)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeliveryComplaint)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeliveryComplaint))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deliveryComplaintR{}
		}
		if !queries.IsNil(object.SalesorderID) {
			args = append(args, object.SalesorderID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryComplaintR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SalesorderID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SalesorderID) {
				args = append(args, obj.SalesorderID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.salesorders`),
		qm.WhereIn(`alpha.salesorders.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Salesorder")
	}

	var resultSlice []*Salesorder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Salesorder")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for salesorders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for salesorders")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Salesorder = foreign
		if foreign.R == nil {
			foreign.R = &salesorderR{}
		}
		foreign.R.DeliveryComplaints = append(foreign.R.DeliveryComplaints, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SalesorderID, foreign.ID) {
				local.R.Salesorder = foreign
				if foreign.R == nil {
					foreign.R = &salesorderR{}
				}
				foreign.R.DeliveryComplaints = append(foreign.R.DeliveryComplaints, local)
				break
			}
		}
	}

	return nil
}

// SetProductG of the deliveryComplaint to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.DeliveryComplaints.
// Uses the global database handle.
func (o *DeliveryComplaint) SetProductG(ctx context.Context, insert bool, related *Product) error {
	return o.SetProduct(ctx, boil.GetContextDB(), insert, related)
}

// SetProduct of the deliveryComplaint to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.DeliveryComplaints.
func (o *DeliveryComplaint) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"delivery_complaints\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, deliveryComplaintPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ID
	if o.R == nil {
		o.R = &deliveryComplaintR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			DeliveryComplaints: DeliveryComplaintSlice{o},
		}
	} else {
		related.R.DeliveryComplaints = append(related.R.DeliveryComplaints, o)
	}

	return nil
}

// SetReasonG of the deliveryComplaint to the related item.
// Sets o.R.Reason to related.
// Adds o to related.R.ReasonDeliveryComplaints.
// Uses the global database handle.
func (o *DeliveryComplaint) SetReasonG(ctx context.Context, insert bool, related *DeliveryReason) error {
	return o.SetReason(ctx, boil.GetContextDB(), insert, related)
}

// SetReason of the deliveryComplaint to the related item.
// Sets o.R.Reason to related.
// Adds o to related.R.ReasonDeliveryComplaints.
func (o *DeliveryComplaint) SetReason(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DeliveryReason) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"delivery_complaints\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"reason_id"}),
		strmangle.WhereClause("\"", "\"", 2, deliveryComplaintPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ReasonID, related.ID)
	if o.R == nil {
		o.R = &deliveryComplaintR{
			Reason: related,
		}
	} else {
		o.R.Reason = related
	}

	if related.R == nil {
		related.R = &deliveryReasonR{
			ReasonDeliveryComplaints: DeliveryComplaintSlice{o},
		}
	} else {
		related.R.ReasonDeliveryComplaints = append(related.R.ReasonDeliveryComplaints, o)
	}

	return nil
}

// RemoveReasonG relationship.
// Sets o.R.Reason to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *DeliveryComplaint) RemoveReasonG(ctx context.Context, related *DeliveryReason) error {
	return o.RemoveReason(ctx, boil.GetContextDB(), related)
}

// RemoveReason relationship.
// Sets o.R.Reason to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DeliveryComplaint) RemoveReason(ctx context.Context, exec boil.ContextExecutor, related *DeliveryReason) error {
	var err error

	queries.SetScanner(&o.ReasonID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("reason_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Reason = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ReasonDeliveryComplaints {
		if queries.Equal(o.ReasonID, ri.ReasonID) {
			continue
		}

		ln := len(related.R.ReasonDeliveryComplaints)
		if ln > 1 && i < ln-1 {
			related.R.ReasonDeliveryComplaints[i] = related.R.ReasonDeliveryComplaints[ln-1]
		}
		related.R.ReasonDeliveryComplaints = related.R.ReasonDeliveryComplaints[:ln-1]
		break
	}
	return nil
}

// SetSalesorderG of the deliveryComplaint to the related item.
// Sets o.R.Salesorder to related.
// Adds o to related.R.DeliveryComplaints.
// Uses the global database handle.
func (o *DeliveryComplaint) SetSalesorderG(ctx context.Context, insert bool, related *Salesorder) error {
	return o.SetSalesorder(ctx, boil.GetContextDB(), insert, related)
}

// SetSalesorder of the deliveryComplaint to the related item.
// Sets o.R.Salesorder to related.
// Adds o to related.R.DeliveryComplaints.
func (o *DeliveryComplaint) SetSalesorder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Salesorder) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"delivery_complaints\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"salesorder_id"}),
		strmangle.WhereClause("\"", "\"", 2, deliveryComplaintPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SalesorderID, related.ID)
	if o.R == nil {
		o.R = &deliveryComplaintR{
			Salesorder: related,
		}
	} else {
		o.R.Salesorder = related
	}

	if related.R == nil {
		related.R = &salesorderR{
			DeliveryComplaints: DeliveryComplaintSlice{o},
		}
	} else {
		related.R.DeliveryComplaints = append(related.R.DeliveryComplaints, o)
	}

	return nil
}

// RemoveSalesorderG relationship.
// Sets o.R.Salesorder to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *DeliveryComplaint) RemoveSalesorderG(ctx context.Context, related *Salesorder) error {
	return o.RemoveSalesorder(ctx, boil.GetContextDB(), related)
}

// RemoveSalesorder relationship.
// Sets o.R.Salesorder to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DeliveryComplaint) RemoveSalesorder(ctx context.Context, exec boil.ContextExecutor, related *Salesorder) error {
	var err error

	queries.SetScanner(&o.SalesorderID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("salesorder_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Salesorder = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DeliveryComplaints {
		if queries.Equal(o.SalesorderID, ri.SalesorderID) {
			continue
		}

		ln := len(related.R.DeliveryComplaints)
		if ln > 1 && i < ln-1 {
			related.R.DeliveryComplaints[i] = related.R.DeliveryComplaints[ln-1]
		}
		related.R.DeliveryComplaints = related.R.DeliveryComplaints[:ln-1]
		break
	}
	return nil
}

// DeliveryComplaints retrieves all the records using an executor.
func DeliveryComplaints(mods ...qm.QueryMod) deliveryComplaintQuery {
	mods = append(mods, qm.From("\"alpha\".\"delivery_complaints\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"delivery_complaints\".*"})
	}

	return deliveryComplaintQuery{q}
}

// FindDeliveryComplaintG retrieves a single record by ID.
func FindDeliveryComplaintG(ctx context.Context, iD int, selectCols ...string) (*DeliveryComplaint, error) {
	return FindDeliveryComplaint(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindDeliveryComplaint retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeliveryComplaint(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DeliveryComplaint, error) {
	deliveryComplaintObj := &DeliveryComplaint{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"delivery_complaints\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, deliveryComplaintObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from delivery_complaints")
	}

	return deliveryComplaintObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *DeliveryComplaint) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeliveryComplaint) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no delivery_complaints provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(deliveryComplaintColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deliveryComplaintInsertCacheMut.RLock()
	cache, cached := deliveryComplaintInsertCache[key]
	deliveryComplaintInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deliveryComplaintAllColumns,
			deliveryComplaintColumnsWithDefault,
			deliveryComplaintColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, deliveryComplaintGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(deliveryComplaintType, deliveryComplaintMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deliveryComplaintType, deliveryComplaintMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"delivery_complaints\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"delivery_complaints\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into delivery_complaints")
	}

	if !cached {
		deliveryComplaintInsertCacheMut.Lock()
		deliveryComplaintInsertCache[key] = cache
		deliveryComplaintInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single DeliveryComplaint record using the global executor.
// See Update for more documentation.
func (o *DeliveryComplaint) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the DeliveryComplaint.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeliveryComplaint) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	deliveryComplaintUpdateCacheMut.RLock()
	cache, cached := deliveryComplaintUpdateCache[key]
	deliveryComplaintUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deliveryComplaintAllColumns,
			deliveryComplaintPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, deliveryComplaintGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update delivery_complaints, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"delivery_complaints\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, deliveryComplaintPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deliveryComplaintType, deliveryComplaintMapping, append(wl, deliveryComplaintPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update delivery_complaints row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for delivery_complaints")
	}

	if !cached {
		deliveryComplaintUpdateCacheMut.Lock()
		deliveryComplaintUpdateCache[key] = cache
		deliveryComplaintUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q deliveryComplaintQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q deliveryComplaintQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for delivery_complaints")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for delivery_complaints")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DeliveryComplaintSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeliveryComplaintSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryComplaintPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"delivery_complaints\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, deliveryComplaintPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in deliveryComplaint slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all deliveryComplaint")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *DeliveryComplaint) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeliveryComplaint) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no delivery_complaints provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(deliveryComplaintColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deliveryComplaintUpsertCacheMut.RLock()
	cache, cached := deliveryComplaintUpsertCache[key]
	deliveryComplaintUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			deliveryComplaintAllColumns,
			deliveryComplaintColumnsWithDefault,
			deliveryComplaintColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deliveryComplaintAllColumns,
			deliveryComplaintPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, deliveryComplaintGeneratedColumns)
		update = strmangle.SetComplement(update, deliveryComplaintGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert delivery_complaints, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(deliveryComplaintPrimaryKeyColumns))
			copy(conflict, deliveryComplaintPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"delivery_complaints\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(deliveryComplaintType, deliveryComplaintMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deliveryComplaintType, deliveryComplaintMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert delivery_complaints")
	}

	if !cached {
		deliveryComplaintUpsertCacheMut.Lock()
		deliveryComplaintUpsertCache[key] = cache
		deliveryComplaintUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single DeliveryComplaint record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *DeliveryComplaint) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single DeliveryComplaint record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeliveryComplaint) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DeliveryComplaint provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), deliveryComplaintPrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"delivery_complaints\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from delivery_complaints")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for delivery_complaints")
	}

	return rowsAff, nil
}

func (q deliveryComplaintQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q deliveryComplaintQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no deliveryComplaintQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from delivery_complaints")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for delivery_complaints")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DeliveryComplaintSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeliveryComplaintSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryComplaintPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"delivery_complaints\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deliveryComplaintPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from deliveryComplaint slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for delivery_complaints")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *DeliveryComplaint) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no DeliveryComplaint provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeliveryComplaint) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeliveryComplaint(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeliveryComplaintSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty DeliveryComplaintSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeliveryComplaintSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeliveryComplaintSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryComplaintPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"delivery_complaints\".* FROM \"alpha\".\"delivery_complaints\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deliveryComplaintPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DeliveryComplaintSlice")
	}

	*o = slice

	return nil
}

// DeliveryComplaintExistsG checks if the DeliveryComplaint row exists.
func DeliveryComplaintExistsG(ctx context.Context, iD int) (bool, error) {
	return DeliveryComplaintExists(ctx, boil.GetContextDB(), iD)
}

// DeliveryComplaintExists checks if the DeliveryComplaint row exists.
func DeliveryComplaintExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"delivery_complaints\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if delivery_complaints exists")
	}

	return exists, nil
}
