// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RefundItem is an object representing the database table.
type RefundItem struct {
	ID        int      `boil:"id" json:"id" toml:"id" yaml:"id"`
	RefundID  null.Int `boil:"refund_id" json:"refund_id,omitempty" toml:"refund_id" yaml:"refund_id,omitempty"`
	ProductID int      `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	Qty       int      `boil:"qty" json:"qty" toml:"qty" yaml:"qty"`
	Total     int      `boil:"total" json:"total" toml:"total" yaml:"total"`
	Tax       int      `boil:"tax" json:"tax" toml:"tax" yaml:"tax"`

	R *refundItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L refundItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RefundItemColumns = struct {
	ID        string
	RefundID  string
	ProductID string
	Qty       string
	Total     string
	Tax       string
}{
	ID:        "id",
	RefundID:  "refund_id",
	ProductID: "product_id",
	Qty:       "qty",
	Total:     "total",
	Tax:       "tax",
}

var RefundItemTableColumns = struct {
	ID        string
	RefundID  string
	ProductID string
	Qty       string
	Total     string
	Tax       string
}{
	ID:        "refund_items.id",
	RefundID:  "refund_items.refund_id",
	ProductID: "refund_items.product_id",
	Qty:       "refund_items.qty",
	Total:     "refund_items.total",
	Tax:       "refund_items.tax",
}

// Generated where

var RefundItemWhere = struct {
	ID        whereHelperint
	RefundID  whereHelpernull_Int
	ProductID whereHelperint
	Qty       whereHelperint
	Total     whereHelperint
	Tax       whereHelperint
}{
	ID:        whereHelperint{field: "\"alpha\".\"refund_items\".\"id\""},
	RefundID:  whereHelpernull_Int{field: "\"alpha\".\"refund_items\".\"refund_id\""},
	ProductID: whereHelperint{field: "\"alpha\".\"refund_items\".\"product_id\""},
	Qty:       whereHelperint{field: "\"alpha\".\"refund_items\".\"qty\""},
	Total:     whereHelperint{field: "\"alpha\".\"refund_items\".\"total\""},
	Tax:       whereHelperint{field: "\"alpha\".\"refund_items\".\"tax\""},
}

// RefundItemRels is where relationship names are stored.
var RefundItemRels = struct {
	Product string
	Refund  string
}{
	Product: "Product",
	Refund:  "Refund",
}

// refundItemR is where relationships are stored.
type refundItemR struct {
	Product *Product `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Refund  *Refund  `boil:"Refund" json:"Refund" toml:"Refund" yaml:"Refund"`
}

// NewStruct creates a new relationship struct
func (*refundItemR) NewStruct() *refundItemR {
	return &refundItemR{}
}

func (r *refundItemR) GetProduct() *Product {
	if r == nil {
		return nil
	}
	return r.Product
}

func (r *refundItemR) GetRefund() *Refund {
	if r == nil {
		return nil
	}
	return r.Refund
}

// refundItemL is where Load methods for each relationship are stored.
type refundItemL struct{}

var (
	refundItemAllColumns            = []string{"id", "refund_id", "product_id", "qty", "total", "tax"}
	refundItemColumnsWithoutDefault = []string{"product_id", "qty", "total", "tax"}
	refundItemColumnsWithDefault    = []string{"id", "refund_id"}
	refundItemPrimaryKeyColumns     = []string{"id"}
	refundItemGeneratedColumns      = []string{"id"}
)

type (
	// RefundItemSlice is an alias for a slice of pointers to RefundItem.
	// This should almost always be used instead of []RefundItem.
	RefundItemSlice []*RefundItem

	refundItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	refundItemType                 = reflect.TypeOf(&RefundItem{})
	refundItemMapping              = queries.MakeStructMapping(refundItemType)
	refundItemPrimaryKeyMapping, _ = queries.BindMapping(refundItemType, refundItemMapping, refundItemPrimaryKeyColumns)
	refundItemInsertCacheMut       sync.RWMutex
	refundItemInsertCache          = make(map[string]insertCache)
	refundItemUpdateCacheMut       sync.RWMutex
	refundItemUpdateCache          = make(map[string]updateCache)
	refundItemUpsertCacheMut       sync.RWMutex
	refundItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single refundItem record from the query using the global executor.
func (q refundItemQuery) OneG(ctx context.Context) (*RefundItem, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single refundItem record from the query.
func (q refundItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RefundItem, error) {
	o := &RefundItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for refund_items")
	}

	return o, nil
}

// AllG returns all RefundItem records from the query using the global executor.
func (q refundItemQuery) AllG(ctx context.Context) (RefundItemSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all RefundItem records from the query.
func (q refundItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (RefundItemSlice, error) {
	var o []*RefundItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RefundItem slice")
	}

	return o, nil
}

// CountG returns the count of all RefundItem records in the query using the global executor
func (q refundItemQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all RefundItem records in the query.
func (q refundItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count refund_items rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q refundItemQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q refundItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if refund_items exists")
	}

	return count > 0, nil
}

// Product pointed to by the foreign key.
func (o *RefundItem) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// Refund pointed to by the foreign key.
func (o *RefundItem) Refund(mods ...qm.QueryMod) refundQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RefundID),
	}

	queryMods = append(queryMods, mods...)

	return Refunds(queryMods...)
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (refundItemL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRefundItem interface{}, mods queries.Applicator) error {
	var slice []*RefundItem
	var object *RefundItem

	if singular {
		var ok bool
		object, ok = maybeRefundItem.(*RefundItem)
		if !ok {
			object = new(RefundItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRefundItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRefundItem))
			}
		}
	} else {
		s, ok := maybeRefundItem.(*[]*RefundItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRefundItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRefundItem))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &refundItemR{}
		}
		args = append(args, object.ProductID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &refundItemR{}
			}

			for _, a := range args {
				if a == obj.ProductID {
					continue Outer
				}
			}

			args = append(args, obj.ProductID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.products`),
		qm.WhereIn(`alpha.products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.RefundItems = append(foreign.R.RefundItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.RefundItems = append(foreign.R.RefundItems, local)
				break
			}
		}
	}

	return nil
}

// LoadRefund allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (refundItemL) LoadRefund(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRefundItem interface{}, mods queries.Applicator) error {
	var slice []*RefundItem
	var object *RefundItem

	if singular {
		var ok bool
		object, ok = maybeRefundItem.(*RefundItem)
		if !ok {
			object = new(RefundItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRefundItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRefundItem))
			}
		}
	} else {
		s, ok := maybeRefundItem.(*[]*RefundItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRefundItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRefundItem))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &refundItemR{}
		}
		if !queries.IsNil(object.RefundID) {
			args = append(args, object.RefundID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &refundItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RefundID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RefundID) {
				args = append(args, obj.RefundID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.refunds`),
		qm.WhereIn(`alpha.refunds.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Refund")
	}

	var resultSlice []*Refund
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Refund")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for refunds")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for refunds")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Refund = foreign
		if foreign.R == nil {
			foreign.R = &refundR{}
		}
		foreign.R.RefundItems = append(foreign.R.RefundItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RefundID, foreign.ID) {
				local.R.Refund = foreign
				if foreign.R == nil {
					foreign.R = &refundR{}
				}
				foreign.R.RefundItems = append(foreign.R.RefundItems, local)
				break
			}
		}
	}

	return nil
}

// SetProductG of the refundItem to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.RefundItems.
// Uses the global database handle.
func (o *RefundItem) SetProductG(ctx context.Context, insert bool, related *Product) error {
	return o.SetProduct(ctx, boil.GetContextDB(), insert, related)
}

// SetProduct of the refundItem to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.RefundItems.
func (o *RefundItem) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"refund_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, refundItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ID
	if o.R == nil {
		o.R = &refundItemR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			RefundItems: RefundItemSlice{o},
		}
	} else {
		related.R.RefundItems = append(related.R.RefundItems, o)
	}

	return nil
}

// SetRefundG of the refundItem to the related item.
// Sets o.R.Refund to related.
// Adds o to related.R.RefundItems.
// Uses the global database handle.
func (o *RefundItem) SetRefundG(ctx context.Context, insert bool, related *Refund) error {
	return o.SetRefund(ctx, boil.GetContextDB(), insert, related)
}

// SetRefund of the refundItem to the related item.
// Sets o.R.Refund to related.
// Adds o to related.R.RefundItems.
func (o *RefundItem) SetRefund(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Refund) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"refund_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"refund_id"}),
		strmangle.WhereClause("\"", "\"", 2, refundItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RefundID, related.ID)
	if o.R == nil {
		o.R = &refundItemR{
			Refund: related,
		}
	} else {
		o.R.Refund = related
	}

	if related.R == nil {
		related.R = &refundR{
			RefundItems: RefundItemSlice{o},
		}
	} else {
		related.R.RefundItems = append(related.R.RefundItems, o)
	}

	return nil
}

// RemoveRefundG relationship.
// Sets o.R.Refund to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *RefundItem) RemoveRefundG(ctx context.Context, related *Refund) error {
	return o.RemoveRefund(ctx, boil.GetContextDB(), related)
}

// RemoveRefund relationship.
// Sets o.R.Refund to nil.
// Removes o from all passed in related items' relationships struct.
func (o *RefundItem) RemoveRefund(ctx context.Context, exec boil.ContextExecutor, related *Refund) error {
	var err error

	queries.SetScanner(&o.RefundID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("refund_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Refund = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RefundItems {
		if queries.Equal(o.RefundID, ri.RefundID) {
			continue
		}

		ln := len(related.R.RefundItems)
		if ln > 1 && i < ln-1 {
			related.R.RefundItems[i] = related.R.RefundItems[ln-1]
		}
		related.R.RefundItems = related.R.RefundItems[:ln-1]
		break
	}
	return nil
}

// RefundItems retrieves all the records using an executor.
func RefundItems(mods ...qm.QueryMod) refundItemQuery {
	mods = append(mods, qm.From("\"alpha\".\"refund_items\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"refund_items\".*"})
	}

	return refundItemQuery{q}
}

// FindRefundItemG retrieves a single record by ID.
func FindRefundItemG(ctx context.Context, iD int, selectCols ...string) (*RefundItem, error) {
	return FindRefundItem(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindRefundItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRefundItem(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RefundItem, error) {
	refundItemObj := &RefundItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"refund_items\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, refundItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from refund_items")
	}

	return refundItemObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RefundItem) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RefundItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no refund_items provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(refundItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	refundItemInsertCacheMut.RLock()
	cache, cached := refundItemInsertCache[key]
	refundItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			refundItemAllColumns,
			refundItemColumnsWithDefault,
			refundItemColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, refundItemGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(refundItemType, refundItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(refundItemType, refundItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"refund_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"refund_items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into refund_items")
	}

	if !cached {
		refundItemInsertCacheMut.Lock()
		refundItemInsertCache[key] = cache
		refundItemInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single RefundItem record using the global executor.
// See Update for more documentation.
func (o *RefundItem) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the RefundItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RefundItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	refundItemUpdateCacheMut.RLock()
	cache, cached := refundItemUpdateCache[key]
	refundItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			refundItemAllColumns,
			refundItemPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, refundItemGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update refund_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"refund_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, refundItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(refundItemType, refundItemMapping, append(wl, refundItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update refund_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for refund_items")
	}

	if !cached {
		refundItemUpdateCacheMut.Lock()
		refundItemUpdateCache[key] = cache
		refundItemUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q refundItemQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q refundItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for refund_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for refund_items")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RefundItemSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RefundItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), refundItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"refund_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, refundItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in refundItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all refundItem")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RefundItem) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RefundItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no refund_items provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(refundItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	refundItemUpsertCacheMut.RLock()
	cache, cached := refundItemUpsertCache[key]
	refundItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			refundItemAllColumns,
			refundItemColumnsWithDefault,
			refundItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			refundItemAllColumns,
			refundItemPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, refundItemGeneratedColumns)
		update = strmangle.SetComplement(update, refundItemGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert refund_items, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(refundItemPrimaryKeyColumns))
			copy(conflict, refundItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"refund_items\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(refundItemType, refundItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(refundItemType, refundItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert refund_items")
	}

	if !cached {
		refundItemUpsertCacheMut.Lock()
		refundItemUpsertCache[key] = cache
		refundItemUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single RefundItem record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RefundItem) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single RefundItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RefundItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RefundItem provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), refundItemPrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"refund_items\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from refund_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for refund_items")
	}

	return rowsAff, nil
}

func (q refundItemQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q refundItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no refundItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from refund_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for refund_items")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RefundItemSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RefundItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), refundItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"refund_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, refundItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from refundItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for refund_items")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RefundItem) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no RefundItem provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RefundItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRefundItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RefundItemSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty RefundItemSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RefundItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RefundItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), refundItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"refund_items\".* FROM \"alpha\".\"refund_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, refundItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RefundItemSlice")
	}

	*o = slice

	return nil
}

// RefundItemExistsG checks if the RefundItem row exists.
func RefundItemExistsG(ctx context.Context, iD int) (bool, error) {
	return RefundItemExists(ctx, boil.GetContextDB(), iD)
}

// RefundItemExists checks if the RefundItem row exists.
func RefundItemExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"refund_items\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if refund_items exists")
	}

	return exists, nil
}
