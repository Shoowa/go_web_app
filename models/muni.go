// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Muni is an object representing the database table.
type Muni struct {
	ID       int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name     string `boil:"name" json:"name" toml:"name" yaml:"name"`
	CountyID int    `boil:"county_id" json:"county_id" toml:"county_id" yaml:"county_id"`
	StateID  string `boil:"state_id" json:"state_id" toml:"state_id" yaml:"state_id"`

	R *muniR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L muniL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MuniColumns = struct {
	ID       string
	Name     string
	CountyID string
	StateID  string
}{
	ID:       "id",
	Name:     "name",
	CountyID: "county_id",
	StateID:  "state_id",
}

var MuniTableColumns = struct {
	ID       string
	Name     string
	CountyID string
	StateID  string
}{
	ID:       "muni.id",
	Name:     "muni.name",
	CountyID: "muni.county_id",
	StateID:  "muni.state_id",
}

// Generated where

var MuniWhere = struct {
	ID       whereHelperint
	Name     whereHelperstring
	CountyID whereHelperint
	StateID  whereHelperstring
}{
	ID:       whereHelperint{field: "\"alpha\".\"muni\".\"id\""},
	Name:     whereHelperstring{field: "\"alpha\".\"muni\".\"name\""},
	CountyID: whereHelperint{field: "\"alpha\".\"muni\".\"county_id\""},
	StateID:  whereHelperstring{field: "\"alpha\".\"muni\".\"state_id\""},
}

// MuniRels is where relationship names are stored.
var MuniRels = struct {
	County                   string
	State                    string
	Companies                string
	Depots                   string
	Offices                  string
	BuyerMuniTaxExemptions   string
	SellerMuniDTaxExemptions string
	TaxMunis                 string
}{
	County:                   "County",
	State:                    "State",
	Companies:                "Companies",
	Depots:                   "Depots",
	Offices:                  "Offices",
	BuyerMuniTaxExemptions:   "BuyerMuniTaxExemptions",
	SellerMuniDTaxExemptions: "SellerMuniDTaxExemptions",
	TaxMunis:                 "TaxMunis",
}

// muniR is where relationships are stored.
type muniR struct {
	County                   *County           `boil:"County" json:"County" toml:"County" yaml:"County"`
	State                    *State            `boil:"State" json:"State" toml:"State" yaml:"State"`
	Companies                CompanySlice      `boil:"Companies" json:"Companies" toml:"Companies" yaml:"Companies"`
	Depots                   DepotSlice        `boil:"Depots" json:"Depots" toml:"Depots" yaml:"Depots"`
	Offices                  OfficeSlice       `boil:"Offices" json:"Offices" toml:"Offices" yaml:"Offices"`
	BuyerMuniTaxExemptions   TaxExemptionSlice `boil:"BuyerMuniTaxExemptions" json:"BuyerMuniTaxExemptions" toml:"BuyerMuniTaxExemptions" yaml:"BuyerMuniTaxExemptions"`
	SellerMuniDTaxExemptions TaxExemptionSlice `boil:"SellerMuniDTaxExemptions" json:"SellerMuniDTaxExemptions" toml:"SellerMuniDTaxExemptions" yaml:"SellerMuniDTaxExemptions"`
	TaxMunis                 TaxMuniSlice      `boil:"TaxMunis" json:"TaxMunis" toml:"TaxMunis" yaml:"TaxMunis"`
}

// NewStruct creates a new relationship struct
func (*muniR) NewStruct() *muniR {
	return &muniR{}
}

func (r *muniR) GetCounty() *County {
	if r == nil {
		return nil
	}
	return r.County
}

func (r *muniR) GetState() *State {
	if r == nil {
		return nil
	}
	return r.State
}

func (r *muniR) GetCompanies() CompanySlice {
	if r == nil {
		return nil
	}
	return r.Companies
}

func (r *muniR) GetDepots() DepotSlice {
	if r == nil {
		return nil
	}
	return r.Depots
}

func (r *muniR) GetOffices() OfficeSlice {
	if r == nil {
		return nil
	}
	return r.Offices
}

func (r *muniR) GetBuyerMuniTaxExemptions() TaxExemptionSlice {
	if r == nil {
		return nil
	}
	return r.BuyerMuniTaxExemptions
}

func (r *muniR) GetSellerMuniDTaxExemptions() TaxExemptionSlice {
	if r == nil {
		return nil
	}
	return r.SellerMuniDTaxExemptions
}

func (r *muniR) GetTaxMunis() TaxMuniSlice {
	if r == nil {
		return nil
	}
	return r.TaxMunis
}

// muniL is where Load methods for each relationship are stored.
type muniL struct{}

var (
	muniAllColumns            = []string{"id", "name", "county_id", "state_id"}
	muniColumnsWithoutDefault = []string{"name", "county_id", "state_id"}
	muniColumnsWithDefault    = []string{"id"}
	muniPrimaryKeyColumns     = []string{"id"}
	muniGeneratedColumns      = []string{"id"}
)

type (
	// MuniSlice is an alias for a slice of pointers to Muni.
	// This should almost always be used instead of []Muni.
	MuniSlice []*Muni

	muniQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	muniType                 = reflect.TypeOf(&Muni{})
	muniMapping              = queries.MakeStructMapping(muniType)
	muniPrimaryKeyMapping, _ = queries.BindMapping(muniType, muniMapping, muniPrimaryKeyColumns)
	muniInsertCacheMut       sync.RWMutex
	muniInsertCache          = make(map[string]insertCache)
	muniUpdateCacheMut       sync.RWMutex
	muniUpdateCache          = make(map[string]updateCache)
	muniUpsertCacheMut       sync.RWMutex
	muniUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single muni record from the query using the global executor.
func (q muniQuery) OneG(ctx context.Context) (*Muni, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single muni record from the query.
func (q muniQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Muni, error) {
	o := &Muni{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for muni")
	}

	return o, nil
}

// AllG returns all Muni records from the query using the global executor.
func (q muniQuery) AllG(ctx context.Context) (MuniSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Muni records from the query.
func (q muniQuery) All(ctx context.Context, exec boil.ContextExecutor) (MuniSlice, error) {
	var o []*Muni

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Muni slice")
	}

	return o, nil
}

// CountG returns the count of all Muni records in the query using the global executor
func (q muniQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Muni records in the query.
func (q muniQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count muni rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q muniQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q muniQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if muni exists")
	}

	return count > 0, nil
}

// County pointed to by the foreign key.
func (o *Muni) County(mods ...qm.QueryMod) countyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CountyID),
	}

	queryMods = append(queryMods, mods...)

	return Counties(queryMods...)
}

// State pointed to by the foreign key.
func (o *Muni) State(mods ...qm.QueryMod) stateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StateID),
	}

	queryMods = append(queryMods, mods...)

	return States(queryMods...)
}

// Companies retrieves all the company's Companies with an executor.
func (o *Muni) Companies(mods ...qm.QueryMod) companyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"companies\".\"muni_id\"=?", o.ID),
	)

	return Companies(queryMods...)
}

// Depots retrieves all the depot's Depots with an executor.
func (o *Muni) Depots(mods ...qm.QueryMod) depotQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"depots\".\"muni_id\"=?", o.ID),
	)

	return Depots(queryMods...)
}

// Offices retrieves all the office's Offices with an executor.
func (o *Muni) Offices(mods ...qm.QueryMod) officeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"offices\".\"muni_id\"=?", o.ID),
	)

	return Offices(queryMods...)
}

// BuyerMuniTaxExemptions retrieves all the tax_exemption's TaxExemptions with an executor via buyer_muni_id column.
func (o *Muni) BuyerMuniTaxExemptions(mods ...qm.QueryMod) taxExemptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"tax_exemptions\".\"buyer_muni_id\"=?", o.ID),
	)

	return TaxExemptions(queryMods...)
}

// SellerMuniDTaxExemptions retrieves all the tax_exemption's TaxExemptions with an executor via seller_muni_d column.
func (o *Muni) SellerMuniDTaxExemptions(mods ...qm.QueryMod) taxExemptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"tax_exemptions\".\"seller_muni_d\"=?", o.ID),
	)

	return TaxExemptions(queryMods...)
}

// TaxMunis retrieves all the tax_muni's TaxMunis with an executor.
func (o *Muni) TaxMunis(mods ...qm.QueryMod) taxMuniQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"tax_muni\".\"muni_id\"=?", o.ID),
	)

	return TaxMunis(queryMods...)
}

// LoadCounty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (muniL) LoadCounty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMuni interface{}, mods queries.Applicator) error {
	var slice []*Muni
	var object *Muni

	if singular {
		var ok bool
		object, ok = maybeMuni.(*Muni)
		if !ok {
			object = new(Muni)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMuni)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMuni))
			}
		}
	} else {
		s, ok := maybeMuni.(*[]*Muni)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMuni)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMuni))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &muniR{}
		}
		args = append(args, object.CountyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &muniR{}
			}

			for _, a := range args {
				if a == obj.CountyID {
					continue Outer
				}
			}

			args = append(args, obj.CountyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.county`),
		qm.WhereIn(`alpha.county.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load County")
	}

	var resultSlice []*County
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice County")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for county")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for county")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.County = foreign
		if foreign.R == nil {
			foreign.R = &countyR{}
		}
		foreign.R.Munis = append(foreign.R.Munis, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CountyID == foreign.ID {
				local.R.County = foreign
				if foreign.R == nil {
					foreign.R = &countyR{}
				}
				foreign.R.Munis = append(foreign.R.Munis, local)
				break
			}
		}
	}

	return nil
}

// LoadState allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (muniL) LoadState(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMuni interface{}, mods queries.Applicator) error {
	var slice []*Muni
	var object *Muni

	if singular {
		var ok bool
		object, ok = maybeMuni.(*Muni)
		if !ok {
			object = new(Muni)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMuni)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMuni))
			}
		}
	} else {
		s, ok := maybeMuni.(*[]*Muni)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMuni)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMuni))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &muniR{}
		}
		args = append(args, object.StateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &muniR{}
			}

			for _, a := range args {
				if a == obj.StateID {
					continue Outer
				}
			}

			args = append(args, obj.StateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.state`),
		qm.WhereIn(`alpha.state.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load State")
	}

	var resultSlice []*State
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice State")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for state")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for state")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.State = foreign
		if foreign.R == nil {
			foreign.R = &stateR{}
		}
		foreign.R.Munis = append(foreign.R.Munis, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StateID == foreign.ID {
				local.R.State = foreign
				if foreign.R == nil {
					foreign.R = &stateR{}
				}
				foreign.R.Munis = append(foreign.R.Munis, local)
				break
			}
		}
	}

	return nil
}

// LoadCompanies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (muniL) LoadCompanies(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMuni interface{}, mods queries.Applicator) error {
	var slice []*Muni
	var object *Muni

	if singular {
		var ok bool
		object, ok = maybeMuni.(*Muni)
		if !ok {
			object = new(Muni)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMuni)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMuni))
			}
		}
	} else {
		s, ok := maybeMuni.(*[]*Muni)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMuni)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMuni))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &muniR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &muniR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.companies`),
		qm.WhereIn(`alpha.companies.muni_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load companies")
	}

	var resultSlice []*Company
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice companies")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on companies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for companies")
	}

	if singular {
		object.R.Companies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &companyR{}
			}
			foreign.R.Muni = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.MuniID) {
				local.R.Companies = append(local.R.Companies, foreign)
				if foreign.R == nil {
					foreign.R = &companyR{}
				}
				foreign.R.Muni = local
				break
			}
		}
	}

	return nil
}

// LoadDepots allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (muniL) LoadDepots(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMuni interface{}, mods queries.Applicator) error {
	var slice []*Muni
	var object *Muni

	if singular {
		var ok bool
		object, ok = maybeMuni.(*Muni)
		if !ok {
			object = new(Muni)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMuni)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMuni))
			}
		}
	} else {
		s, ok := maybeMuni.(*[]*Muni)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMuni)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMuni))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &muniR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &muniR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.depots`),
		qm.WhereIn(`alpha.depots.muni_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load depots")
	}

	var resultSlice []*Depot
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice depots")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on depots")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for depots")
	}

	if singular {
		object.R.Depots = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &depotR{}
			}
			foreign.R.Muni = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.MuniID) {
				local.R.Depots = append(local.R.Depots, foreign)
				if foreign.R == nil {
					foreign.R = &depotR{}
				}
				foreign.R.Muni = local
				break
			}
		}
	}

	return nil
}

// LoadOffices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (muniL) LoadOffices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMuni interface{}, mods queries.Applicator) error {
	var slice []*Muni
	var object *Muni

	if singular {
		var ok bool
		object, ok = maybeMuni.(*Muni)
		if !ok {
			object = new(Muni)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMuni)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMuni))
			}
		}
	} else {
		s, ok := maybeMuni.(*[]*Muni)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMuni)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMuni))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &muniR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &muniR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.offices`),
		qm.WhereIn(`alpha.offices.muni_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load offices")
	}

	var resultSlice []*Office
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice offices")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on offices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for offices")
	}

	if singular {
		object.R.Offices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &officeR{}
			}
			foreign.R.Muni = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.MuniID) {
				local.R.Offices = append(local.R.Offices, foreign)
				if foreign.R == nil {
					foreign.R = &officeR{}
				}
				foreign.R.Muni = local
				break
			}
		}
	}

	return nil
}

// LoadBuyerMuniTaxExemptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (muniL) LoadBuyerMuniTaxExemptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMuni interface{}, mods queries.Applicator) error {
	var slice []*Muni
	var object *Muni

	if singular {
		var ok bool
		object, ok = maybeMuni.(*Muni)
		if !ok {
			object = new(Muni)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMuni)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMuni))
			}
		}
	} else {
		s, ok := maybeMuni.(*[]*Muni)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMuni)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMuni))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &muniR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &muniR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.tax_exemptions`),
		qm.WhereIn(`alpha.tax_exemptions.buyer_muni_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tax_exemptions")
	}

	var resultSlice []*TaxExemption
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tax_exemptions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tax_exemptions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tax_exemptions")
	}

	if singular {
		object.R.BuyerMuniTaxExemptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &taxExemptionR{}
			}
			foreign.R.BuyerMuni = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BuyerMuniID) {
				local.R.BuyerMuniTaxExemptions = append(local.R.BuyerMuniTaxExemptions, foreign)
				if foreign.R == nil {
					foreign.R = &taxExemptionR{}
				}
				foreign.R.BuyerMuni = local
				break
			}
		}
	}

	return nil
}

// LoadSellerMuniDTaxExemptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (muniL) LoadSellerMuniDTaxExemptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMuni interface{}, mods queries.Applicator) error {
	var slice []*Muni
	var object *Muni

	if singular {
		var ok bool
		object, ok = maybeMuni.(*Muni)
		if !ok {
			object = new(Muni)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMuni)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMuni))
			}
		}
	} else {
		s, ok := maybeMuni.(*[]*Muni)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMuni)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMuni))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &muniR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &muniR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.tax_exemptions`),
		qm.WhereIn(`alpha.tax_exemptions.seller_muni_d in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tax_exemptions")
	}

	var resultSlice []*TaxExemption
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tax_exemptions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tax_exemptions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tax_exemptions")
	}

	if singular {
		object.R.SellerMuniDTaxExemptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &taxExemptionR{}
			}
			foreign.R.SellerMuniDMuni = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SellerMuniD) {
				local.R.SellerMuniDTaxExemptions = append(local.R.SellerMuniDTaxExemptions, foreign)
				if foreign.R == nil {
					foreign.R = &taxExemptionR{}
				}
				foreign.R.SellerMuniDMuni = local
				break
			}
		}
	}

	return nil
}

// LoadTaxMunis allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (muniL) LoadTaxMunis(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMuni interface{}, mods queries.Applicator) error {
	var slice []*Muni
	var object *Muni

	if singular {
		var ok bool
		object, ok = maybeMuni.(*Muni)
		if !ok {
			object = new(Muni)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMuni)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMuni))
			}
		}
	} else {
		s, ok := maybeMuni.(*[]*Muni)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMuni)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMuni))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &muniR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &muniR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.tax_muni`),
		qm.WhereIn(`alpha.tax_muni.muni_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tax_muni")
	}

	var resultSlice []*TaxMuni
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tax_muni")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tax_muni")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tax_muni")
	}

	if singular {
		object.R.TaxMunis = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &taxMuniR{}
			}
			foreign.R.Muni = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MuniID {
				local.R.TaxMunis = append(local.R.TaxMunis, foreign)
				if foreign.R == nil {
					foreign.R = &taxMuniR{}
				}
				foreign.R.Muni = local
				break
			}
		}
	}

	return nil
}

// SetCountyG of the muni to the related item.
// Sets o.R.County to related.
// Adds o to related.R.Munis.
// Uses the global database handle.
func (o *Muni) SetCountyG(ctx context.Context, insert bool, related *County) error {
	return o.SetCounty(ctx, boil.GetContextDB(), insert, related)
}

// SetCounty of the muni to the related item.
// Sets o.R.County to related.
// Adds o to related.R.Munis.
func (o *Muni) SetCounty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *County) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"muni\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"county_id"}),
		strmangle.WhereClause("\"", "\"", 2, muniPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CountyID = related.ID
	if o.R == nil {
		o.R = &muniR{
			County: related,
		}
	} else {
		o.R.County = related
	}

	if related.R == nil {
		related.R = &countyR{
			Munis: MuniSlice{o},
		}
	} else {
		related.R.Munis = append(related.R.Munis, o)
	}

	return nil
}

// SetStateG of the muni to the related item.
// Sets o.R.State to related.
// Adds o to related.R.Munis.
// Uses the global database handle.
func (o *Muni) SetStateG(ctx context.Context, insert bool, related *State) error {
	return o.SetState(ctx, boil.GetContextDB(), insert, related)
}

// SetState of the muni to the related item.
// Sets o.R.State to related.
// Adds o to related.R.Munis.
func (o *Muni) SetState(ctx context.Context, exec boil.ContextExecutor, insert bool, related *State) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"muni\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"state_id"}),
		strmangle.WhereClause("\"", "\"", 2, muniPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StateID = related.ID
	if o.R == nil {
		o.R = &muniR{
			State: related,
		}
	} else {
		o.R.State = related
	}

	if related.R == nil {
		related.R = &stateR{
			Munis: MuniSlice{o},
		}
	} else {
		related.R.Munis = append(related.R.Munis, o)
	}

	return nil
}

// AddCompaniesG adds the given related objects to the existing relationships
// of the muni, optionally inserting them as new records.
// Appends related to o.R.Companies.
// Sets related.R.Muni appropriately.
// Uses the global database handle.
func (o *Muni) AddCompaniesG(ctx context.Context, insert bool, related ...*Company) error {
	return o.AddCompanies(ctx, boil.GetContextDB(), insert, related...)
}

// AddCompanies adds the given related objects to the existing relationships
// of the muni, optionally inserting them as new records.
// Appends related to o.R.Companies.
// Sets related.R.Muni appropriately.
func (o *Muni) AddCompanies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Company) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.MuniID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"companies\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"muni_id"}),
				strmangle.WhereClause("\"", "\"", 2, companyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.MuniID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &muniR{
			Companies: related,
		}
	} else {
		o.R.Companies = append(o.R.Companies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &companyR{
				Muni: o,
			}
		} else {
			rel.R.Muni = o
		}
	}
	return nil
}

// SetCompaniesG removes all previously related items of the
// muni replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Muni's Companies accordingly.
// Replaces o.R.Companies with related.
// Sets related.R.Muni's Companies accordingly.
// Uses the global database handle.
func (o *Muni) SetCompaniesG(ctx context.Context, insert bool, related ...*Company) error {
	return o.SetCompanies(ctx, boil.GetContextDB(), insert, related...)
}

// SetCompanies removes all previously related items of the
// muni replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Muni's Companies accordingly.
// Replaces o.R.Companies with related.
// Sets related.R.Muni's Companies accordingly.
func (o *Muni) SetCompanies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Company) error {
	query := "update \"alpha\".\"companies\" set \"muni_id\" = null where \"muni_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Companies {
			queries.SetScanner(&rel.MuniID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Muni = nil
		}
		o.R.Companies = nil
	}

	return o.AddCompanies(ctx, exec, insert, related...)
}

// RemoveCompaniesG relationships from objects passed in.
// Removes related items from R.Companies (uses pointer comparison, removal does not keep order)
// Sets related.R.Muni.
// Uses the global database handle.
func (o *Muni) RemoveCompaniesG(ctx context.Context, related ...*Company) error {
	return o.RemoveCompanies(ctx, boil.GetContextDB(), related...)
}

// RemoveCompanies relationships from objects passed in.
// Removes related items from R.Companies (uses pointer comparison, removal does not keep order)
// Sets related.R.Muni.
func (o *Muni) RemoveCompanies(ctx context.Context, exec boil.ContextExecutor, related ...*Company) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.MuniID, nil)
		if rel.R != nil {
			rel.R.Muni = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("muni_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Companies {
			if rel != ri {
				continue
			}

			ln := len(o.R.Companies)
			if ln > 1 && i < ln-1 {
				o.R.Companies[i] = o.R.Companies[ln-1]
			}
			o.R.Companies = o.R.Companies[:ln-1]
			break
		}
	}

	return nil
}

// AddDepotsG adds the given related objects to the existing relationships
// of the muni, optionally inserting them as new records.
// Appends related to o.R.Depots.
// Sets related.R.Muni appropriately.
// Uses the global database handle.
func (o *Muni) AddDepotsG(ctx context.Context, insert bool, related ...*Depot) error {
	return o.AddDepots(ctx, boil.GetContextDB(), insert, related...)
}

// AddDepots adds the given related objects to the existing relationships
// of the muni, optionally inserting them as new records.
// Appends related to o.R.Depots.
// Sets related.R.Muni appropriately.
func (o *Muni) AddDepots(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Depot) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.MuniID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"depots\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"muni_id"}),
				strmangle.WhereClause("\"", "\"", 2, depotPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.MuniID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &muniR{
			Depots: related,
		}
	} else {
		o.R.Depots = append(o.R.Depots, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &depotR{
				Muni: o,
			}
		} else {
			rel.R.Muni = o
		}
	}
	return nil
}

// SetDepotsG removes all previously related items of the
// muni replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Muni's Depots accordingly.
// Replaces o.R.Depots with related.
// Sets related.R.Muni's Depots accordingly.
// Uses the global database handle.
func (o *Muni) SetDepotsG(ctx context.Context, insert bool, related ...*Depot) error {
	return o.SetDepots(ctx, boil.GetContextDB(), insert, related...)
}

// SetDepots removes all previously related items of the
// muni replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Muni's Depots accordingly.
// Replaces o.R.Depots with related.
// Sets related.R.Muni's Depots accordingly.
func (o *Muni) SetDepots(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Depot) error {
	query := "update \"alpha\".\"depots\" set \"muni_id\" = null where \"muni_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Depots {
			queries.SetScanner(&rel.MuniID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Muni = nil
		}
		o.R.Depots = nil
	}

	return o.AddDepots(ctx, exec, insert, related...)
}

// RemoveDepotsG relationships from objects passed in.
// Removes related items from R.Depots (uses pointer comparison, removal does not keep order)
// Sets related.R.Muni.
// Uses the global database handle.
func (o *Muni) RemoveDepotsG(ctx context.Context, related ...*Depot) error {
	return o.RemoveDepots(ctx, boil.GetContextDB(), related...)
}

// RemoveDepots relationships from objects passed in.
// Removes related items from R.Depots (uses pointer comparison, removal does not keep order)
// Sets related.R.Muni.
func (o *Muni) RemoveDepots(ctx context.Context, exec boil.ContextExecutor, related ...*Depot) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.MuniID, nil)
		if rel.R != nil {
			rel.R.Muni = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("muni_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Depots {
			if rel != ri {
				continue
			}

			ln := len(o.R.Depots)
			if ln > 1 && i < ln-1 {
				o.R.Depots[i] = o.R.Depots[ln-1]
			}
			o.R.Depots = o.R.Depots[:ln-1]
			break
		}
	}

	return nil
}

// AddOfficesG adds the given related objects to the existing relationships
// of the muni, optionally inserting them as new records.
// Appends related to o.R.Offices.
// Sets related.R.Muni appropriately.
// Uses the global database handle.
func (o *Muni) AddOfficesG(ctx context.Context, insert bool, related ...*Office) error {
	return o.AddOffices(ctx, boil.GetContextDB(), insert, related...)
}

// AddOffices adds the given related objects to the existing relationships
// of the muni, optionally inserting them as new records.
// Appends related to o.R.Offices.
// Sets related.R.Muni appropriately.
func (o *Muni) AddOffices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Office) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.MuniID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"offices\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"muni_id"}),
				strmangle.WhereClause("\"", "\"", 2, officePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.MuniID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &muniR{
			Offices: related,
		}
	} else {
		o.R.Offices = append(o.R.Offices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &officeR{
				Muni: o,
			}
		} else {
			rel.R.Muni = o
		}
	}
	return nil
}

// SetOfficesG removes all previously related items of the
// muni replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Muni's Offices accordingly.
// Replaces o.R.Offices with related.
// Sets related.R.Muni's Offices accordingly.
// Uses the global database handle.
func (o *Muni) SetOfficesG(ctx context.Context, insert bool, related ...*Office) error {
	return o.SetOffices(ctx, boil.GetContextDB(), insert, related...)
}

// SetOffices removes all previously related items of the
// muni replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Muni's Offices accordingly.
// Replaces o.R.Offices with related.
// Sets related.R.Muni's Offices accordingly.
func (o *Muni) SetOffices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Office) error {
	query := "update \"alpha\".\"offices\" set \"muni_id\" = null where \"muni_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Offices {
			queries.SetScanner(&rel.MuniID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Muni = nil
		}
		o.R.Offices = nil
	}

	return o.AddOffices(ctx, exec, insert, related...)
}

// RemoveOfficesG relationships from objects passed in.
// Removes related items from R.Offices (uses pointer comparison, removal does not keep order)
// Sets related.R.Muni.
// Uses the global database handle.
func (o *Muni) RemoveOfficesG(ctx context.Context, related ...*Office) error {
	return o.RemoveOffices(ctx, boil.GetContextDB(), related...)
}

// RemoveOffices relationships from objects passed in.
// Removes related items from R.Offices (uses pointer comparison, removal does not keep order)
// Sets related.R.Muni.
func (o *Muni) RemoveOffices(ctx context.Context, exec boil.ContextExecutor, related ...*Office) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.MuniID, nil)
		if rel.R != nil {
			rel.R.Muni = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("muni_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Offices {
			if rel != ri {
				continue
			}

			ln := len(o.R.Offices)
			if ln > 1 && i < ln-1 {
				o.R.Offices[i] = o.R.Offices[ln-1]
			}
			o.R.Offices = o.R.Offices[:ln-1]
			break
		}
	}

	return nil
}

// AddBuyerMuniTaxExemptionsG adds the given related objects to the existing relationships
// of the muni, optionally inserting them as new records.
// Appends related to o.R.BuyerMuniTaxExemptions.
// Sets related.R.BuyerMuni appropriately.
// Uses the global database handle.
func (o *Muni) AddBuyerMuniTaxExemptionsG(ctx context.Context, insert bool, related ...*TaxExemption) error {
	return o.AddBuyerMuniTaxExemptions(ctx, boil.GetContextDB(), insert, related...)
}

// AddBuyerMuniTaxExemptions adds the given related objects to the existing relationships
// of the muni, optionally inserting them as new records.
// Appends related to o.R.BuyerMuniTaxExemptions.
// Sets related.R.BuyerMuni appropriately.
func (o *Muni) AddBuyerMuniTaxExemptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaxExemption) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BuyerMuniID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"tax_exemptions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"buyer_muni_id"}),
				strmangle.WhereClause("\"", "\"", 2, taxExemptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BuyerMuniID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &muniR{
			BuyerMuniTaxExemptions: related,
		}
	} else {
		o.R.BuyerMuniTaxExemptions = append(o.R.BuyerMuniTaxExemptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &taxExemptionR{
				BuyerMuni: o,
			}
		} else {
			rel.R.BuyerMuni = o
		}
	}
	return nil
}

// SetBuyerMuniTaxExemptionsG removes all previously related items of the
// muni replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BuyerMuni's BuyerMuniTaxExemptions accordingly.
// Replaces o.R.BuyerMuniTaxExemptions with related.
// Sets related.R.BuyerMuni's BuyerMuniTaxExemptions accordingly.
// Uses the global database handle.
func (o *Muni) SetBuyerMuniTaxExemptionsG(ctx context.Context, insert bool, related ...*TaxExemption) error {
	return o.SetBuyerMuniTaxExemptions(ctx, boil.GetContextDB(), insert, related...)
}

// SetBuyerMuniTaxExemptions removes all previously related items of the
// muni replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BuyerMuni's BuyerMuniTaxExemptions accordingly.
// Replaces o.R.BuyerMuniTaxExemptions with related.
// Sets related.R.BuyerMuni's BuyerMuniTaxExemptions accordingly.
func (o *Muni) SetBuyerMuniTaxExemptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaxExemption) error {
	query := "update \"alpha\".\"tax_exemptions\" set \"buyer_muni_id\" = null where \"buyer_muni_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BuyerMuniTaxExemptions {
			queries.SetScanner(&rel.BuyerMuniID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.BuyerMuni = nil
		}
		o.R.BuyerMuniTaxExemptions = nil
	}

	return o.AddBuyerMuniTaxExemptions(ctx, exec, insert, related...)
}

// RemoveBuyerMuniTaxExemptionsG relationships from objects passed in.
// Removes related items from R.BuyerMuniTaxExemptions (uses pointer comparison, removal does not keep order)
// Sets related.R.BuyerMuni.
// Uses the global database handle.
func (o *Muni) RemoveBuyerMuniTaxExemptionsG(ctx context.Context, related ...*TaxExemption) error {
	return o.RemoveBuyerMuniTaxExemptions(ctx, boil.GetContextDB(), related...)
}

// RemoveBuyerMuniTaxExemptions relationships from objects passed in.
// Removes related items from R.BuyerMuniTaxExemptions (uses pointer comparison, removal does not keep order)
// Sets related.R.BuyerMuni.
func (o *Muni) RemoveBuyerMuniTaxExemptions(ctx context.Context, exec boil.ContextExecutor, related ...*TaxExemption) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BuyerMuniID, nil)
		if rel.R != nil {
			rel.R.BuyerMuni = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("buyer_muni_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BuyerMuniTaxExemptions {
			if rel != ri {
				continue
			}

			ln := len(o.R.BuyerMuniTaxExemptions)
			if ln > 1 && i < ln-1 {
				o.R.BuyerMuniTaxExemptions[i] = o.R.BuyerMuniTaxExemptions[ln-1]
			}
			o.R.BuyerMuniTaxExemptions = o.R.BuyerMuniTaxExemptions[:ln-1]
			break
		}
	}

	return nil
}

// AddSellerMuniDTaxExemptionsG adds the given related objects to the existing relationships
// of the muni, optionally inserting them as new records.
// Appends related to o.R.SellerMuniDTaxExemptions.
// Sets related.R.SellerMuniDMuni appropriately.
// Uses the global database handle.
func (o *Muni) AddSellerMuniDTaxExemptionsG(ctx context.Context, insert bool, related ...*TaxExemption) error {
	return o.AddSellerMuniDTaxExemptions(ctx, boil.GetContextDB(), insert, related...)
}

// AddSellerMuniDTaxExemptions adds the given related objects to the existing relationships
// of the muni, optionally inserting them as new records.
// Appends related to o.R.SellerMuniDTaxExemptions.
// Sets related.R.SellerMuniDMuni appropriately.
func (o *Muni) AddSellerMuniDTaxExemptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaxExemption) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SellerMuniD, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"tax_exemptions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"seller_muni_d"}),
				strmangle.WhereClause("\"", "\"", 2, taxExemptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SellerMuniD, o.ID)
		}
	}

	if o.R == nil {
		o.R = &muniR{
			SellerMuniDTaxExemptions: related,
		}
	} else {
		o.R.SellerMuniDTaxExemptions = append(o.R.SellerMuniDTaxExemptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &taxExemptionR{
				SellerMuniDMuni: o,
			}
		} else {
			rel.R.SellerMuniDMuni = o
		}
	}
	return nil
}

// SetSellerMuniDTaxExemptionsG removes all previously related items of the
// muni replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SellerMuniDMuni's SellerMuniDTaxExemptions accordingly.
// Replaces o.R.SellerMuniDTaxExemptions with related.
// Sets related.R.SellerMuniDMuni's SellerMuniDTaxExemptions accordingly.
// Uses the global database handle.
func (o *Muni) SetSellerMuniDTaxExemptionsG(ctx context.Context, insert bool, related ...*TaxExemption) error {
	return o.SetSellerMuniDTaxExemptions(ctx, boil.GetContextDB(), insert, related...)
}

// SetSellerMuniDTaxExemptions removes all previously related items of the
// muni replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SellerMuniDMuni's SellerMuniDTaxExemptions accordingly.
// Replaces o.R.SellerMuniDTaxExemptions with related.
// Sets related.R.SellerMuniDMuni's SellerMuniDTaxExemptions accordingly.
func (o *Muni) SetSellerMuniDTaxExemptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaxExemption) error {
	query := "update \"alpha\".\"tax_exemptions\" set \"seller_muni_d\" = null where \"seller_muni_d\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SellerMuniDTaxExemptions {
			queries.SetScanner(&rel.SellerMuniD, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SellerMuniDMuni = nil
		}
		o.R.SellerMuniDTaxExemptions = nil
	}

	return o.AddSellerMuniDTaxExemptions(ctx, exec, insert, related...)
}

// RemoveSellerMuniDTaxExemptionsG relationships from objects passed in.
// Removes related items from R.SellerMuniDTaxExemptions (uses pointer comparison, removal does not keep order)
// Sets related.R.SellerMuniDMuni.
// Uses the global database handle.
func (o *Muni) RemoveSellerMuniDTaxExemptionsG(ctx context.Context, related ...*TaxExemption) error {
	return o.RemoveSellerMuniDTaxExemptions(ctx, boil.GetContextDB(), related...)
}

// RemoveSellerMuniDTaxExemptions relationships from objects passed in.
// Removes related items from R.SellerMuniDTaxExemptions (uses pointer comparison, removal does not keep order)
// Sets related.R.SellerMuniDMuni.
func (o *Muni) RemoveSellerMuniDTaxExemptions(ctx context.Context, exec boil.ContextExecutor, related ...*TaxExemption) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SellerMuniD, nil)
		if rel.R != nil {
			rel.R.SellerMuniDMuni = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("seller_muni_d")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SellerMuniDTaxExemptions {
			if rel != ri {
				continue
			}

			ln := len(o.R.SellerMuniDTaxExemptions)
			if ln > 1 && i < ln-1 {
				o.R.SellerMuniDTaxExemptions[i] = o.R.SellerMuniDTaxExemptions[ln-1]
			}
			o.R.SellerMuniDTaxExemptions = o.R.SellerMuniDTaxExemptions[:ln-1]
			break
		}
	}

	return nil
}

// AddTaxMunisG adds the given related objects to the existing relationships
// of the muni, optionally inserting them as new records.
// Appends related to o.R.TaxMunis.
// Sets related.R.Muni appropriately.
// Uses the global database handle.
func (o *Muni) AddTaxMunisG(ctx context.Context, insert bool, related ...*TaxMuni) error {
	return o.AddTaxMunis(ctx, boil.GetContextDB(), insert, related...)
}

// AddTaxMunis adds the given related objects to the existing relationships
// of the muni, optionally inserting them as new records.
// Appends related to o.R.TaxMunis.
// Sets related.R.Muni appropriately.
func (o *Muni) AddTaxMunis(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaxMuni) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MuniID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"tax_muni\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"muni_id"}),
				strmangle.WhereClause("\"", "\"", 2, taxMuniPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MuniID = o.ID
		}
	}

	if o.R == nil {
		o.R = &muniR{
			TaxMunis: related,
		}
	} else {
		o.R.TaxMunis = append(o.R.TaxMunis, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &taxMuniR{
				Muni: o,
			}
		} else {
			rel.R.Muni = o
		}
	}
	return nil
}

// Munis retrieves all the records using an executor.
func Munis(mods ...qm.QueryMod) muniQuery {
	mods = append(mods, qm.From("\"alpha\".\"muni\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"muni\".*"})
	}

	return muniQuery{q}
}

// FindMuniG retrieves a single record by ID.
func FindMuniG(ctx context.Context, iD int, selectCols ...string) (*Muni, error) {
	return FindMuni(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindMuni retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMuni(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Muni, error) {
	muniObj := &Muni{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"muni\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, muniObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from muni")
	}

	return muniObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Muni) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Muni) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no muni provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(muniColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	muniInsertCacheMut.RLock()
	cache, cached := muniInsertCache[key]
	muniInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			muniAllColumns,
			muniColumnsWithDefault,
			muniColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, muniGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(muniType, muniMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(muniType, muniMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"muni\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"muni\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into muni")
	}

	if !cached {
		muniInsertCacheMut.Lock()
		muniInsertCache[key] = cache
		muniInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Muni record using the global executor.
// See Update for more documentation.
func (o *Muni) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Muni.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Muni) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	muniUpdateCacheMut.RLock()
	cache, cached := muniUpdateCache[key]
	muniUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			muniAllColumns,
			muniPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, muniGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update muni, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"muni\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, muniPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(muniType, muniMapping, append(wl, muniPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update muni row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for muni")
	}

	if !cached {
		muniUpdateCacheMut.Lock()
		muniUpdateCache[key] = cache
		muniUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q muniQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q muniQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for muni")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for muni")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MuniSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MuniSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), muniPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"muni\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, muniPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in muni slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all muni")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Muni) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Muni) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no muni provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(muniColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	muniUpsertCacheMut.RLock()
	cache, cached := muniUpsertCache[key]
	muniUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			muniAllColumns,
			muniColumnsWithDefault,
			muniColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			muniAllColumns,
			muniPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, muniGeneratedColumns)
		update = strmangle.SetComplement(update, muniGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert muni, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(muniPrimaryKeyColumns))
			copy(conflict, muniPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"muni\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(muniType, muniMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(muniType, muniMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert muni")
	}

	if !cached {
		muniUpsertCacheMut.Lock()
		muniUpsertCache[key] = cache
		muniUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single Muni record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Muni) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Muni record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Muni) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Muni provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), muniPrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"muni\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from muni")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for muni")
	}

	return rowsAff, nil
}

func (q muniQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q muniQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no muniQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from muni")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for muni")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MuniSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MuniSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), muniPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"muni\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, muniPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from muni slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for muni")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Muni) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Muni provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Muni) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMuni(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MuniSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty MuniSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MuniSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MuniSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), muniPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"muni\".* FROM \"alpha\".\"muni\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, muniPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MuniSlice")
	}

	*o = slice

	return nil
}

// MuniExistsG checks if the Muni row exists.
func MuniExistsG(ctx context.Context, iD int) (bool, error) {
	return MuniExists(ctx, boil.GetContextDB(), iD)
}

// MuniExists checks if the Muni row exists.
func MuniExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"muni\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if muni exists")
	}

	return exists, nil
}
