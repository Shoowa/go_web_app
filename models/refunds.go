// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Refund is an object representing the database table.
type Refund struct {
	ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	SalesorderID int       `boil:"salesorder_id" json:"salesorder_id" toml:"salesorder_id" yaml:"salesorder_id"`
	AgentID      int       `boil:"agent_id" json:"agent_id" toml:"agent_id" yaml:"agent_id"`
	Created      time.Time `boil:"created" json:"created" toml:"created" yaml:"created"`

	R *refundR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L refundL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RefundColumns = struct {
	ID           string
	SalesorderID string
	AgentID      string
	Created      string
}{
	ID:           "id",
	SalesorderID: "salesorder_id",
	AgentID:      "agent_id",
	Created:      "created",
}

var RefundTableColumns = struct {
	ID           string
	SalesorderID string
	AgentID      string
	Created      string
}{
	ID:           "refunds.id",
	SalesorderID: "refunds.salesorder_id",
	AgentID:      "refunds.agent_id",
	Created:      "refunds.created",
}

// Generated where

var RefundWhere = struct {
	ID           whereHelperint
	SalesorderID whereHelperint
	AgentID      whereHelperint
	Created      whereHelpertime_Time
}{
	ID:           whereHelperint{field: "\"alpha\".\"refunds\".\"id\""},
	SalesorderID: whereHelperint{field: "\"alpha\".\"refunds\".\"salesorder_id\""},
	AgentID:      whereHelperint{field: "\"alpha\".\"refunds\".\"agent_id\""},
	Created:      whereHelpertime_Time{field: "\"alpha\".\"refunds\".\"created\""},
}

// RefundRels is where relationship names are stored.
var RefundRels = struct {
	Agent       string
	Salesorder  string
	RefundItems string
}{
	Agent:       "Agent",
	Salesorder:  "Salesorder",
	RefundItems: "RefundItems",
}

// refundR is where relationships are stored.
type refundR struct {
	Agent       *Person         `boil:"Agent" json:"Agent" toml:"Agent" yaml:"Agent"`
	Salesorder  *Salesorder     `boil:"Salesorder" json:"Salesorder" toml:"Salesorder" yaml:"Salesorder"`
	RefundItems RefundItemSlice `boil:"RefundItems" json:"RefundItems" toml:"RefundItems" yaml:"RefundItems"`
}

// NewStruct creates a new relationship struct
func (*refundR) NewStruct() *refundR {
	return &refundR{}
}

func (r *refundR) GetAgent() *Person {
	if r == nil {
		return nil
	}
	return r.Agent
}

func (r *refundR) GetSalesorder() *Salesorder {
	if r == nil {
		return nil
	}
	return r.Salesorder
}

func (r *refundR) GetRefundItems() RefundItemSlice {
	if r == nil {
		return nil
	}
	return r.RefundItems
}

// refundL is where Load methods for each relationship are stored.
type refundL struct{}

var (
	refundAllColumns            = []string{"id", "salesorder_id", "agent_id", "created"}
	refundColumnsWithoutDefault = []string{"salesorder_id", "agent_id"}
	refundColumnsWithDefault    = []string{"id", "created"}
	refundPrimaryKeyColumns     = []string{"id"}
	refundGeneratedColumns      = []string{"id"}
)

type (
	// RefundSlice is an alias for a slice of pointers to Refund.
	// This should almost always be used instead of []Refund.
	RefundSlice []*Refund

	refundQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	refundType                 = reflect.TypeOf(&Refund{})
	refundMapping              = queries.MakeStructMapping(refundType)
	refundPrimaryKeyMapping, _ = queries.BindMapping(refundType, refundMapping, refundPrimaryKeyColumns)
	refundInsertCacheMut       sync.RWMutex
	refundInsertCache          = make(map[string]insertCache)
	refundUpdateCacheMut       sync.RWMutex
	refundUpdateCache          = make(map[string]updateCache)
	refundUpsertCacheMut       sync.RWMutex
	refundUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single refund record from the query using the global executor.
func (q refundQuery) OneG(ctx context.Context) (*Refund, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single refund record from the query.
func (q refundQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Refund, error) {
	o := &Refund{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for refunds")
	}

	return o, nil
}

// AllG returns all Refund records from the query using the global executor.
func (q refundQuery) AllG(ctx context.Context) (RefundSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Refund records from the query.
func (q refundQuery) All(ctx context.Context, exec boil.ContextExecutor) (RefundSlice, error) {
	var o []*Refund

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Refund slice")
	}

	return o, nil
}

// CountG returns the count of all Refund records in the query using the global executor
func (q refundQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Refund records in the query.
func (q refundQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count refunds rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q refundQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q refundQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if refunds exists")
	}

	return count > 0, nil
}

// Agent pointed to by the foreign key.
func (o *Refund) Agent(mods ...qm.QueryMod) personQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AgentID),
	}

	queryMods = append(queryMods, mods...)

	return Persons(queryMods...)
}

// Salesorder pointed to by the foreign key.
func (o *Refund) Salesorder(mods ...qm.QueryMod) salesorderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SalesorderID),
	}

	queryMods = append(queryMods, mods...)

	return Salesorders(queryMods...)
}

// RefundItems retrieves all the refund_item's RefundItems with an executor.
func (o *Refund) RefundItems(mods ...qm.QueryMod) refundItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alpha\".\"refund_items\".\"refund_id\"=?", o.ID),
	)

	return RefundItems(queryMods...)
}

// LoadAgent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (refundL) LoadAgent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRefund interface{}, mods queries.Applicator) error {
	var slice []*Refund
	var object *Refund

	if singular {
		var ok bool
		object, ok = maybeRefund.(*Refund)
		if !ok {
			object = new(Refund)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRefund)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRefund))
			}
		}
	} else {
		s, ok := maybeRefund.(*[]*Refund)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRefund)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRefund))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &refundR{}
		}
		args = append(args, object.AgentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &refundR{}
			}

			for _, a := range args {
				if a == obj.AgentID {
					continue Outer
				}
			}

			args = append(args, obj.AgentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.persons`),
		qm.WhereIn(`alpha.persons.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Person")
	}

	var resultSlice []*Person
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Person")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for persons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for persons")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Agent = foreign
		if foreign.R == nil {
			foreign.R = &personR{}
		}
		foreign.R.AgentRefunds = append(foreign.R.AgentRefunds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AgentID == foreign.ID {
				local.R.Agent = foreign
				if foreign.R == nil {
					foreign.R = &personR{}
				}
				foreign.R.AgentRefunds = append(foreign.R.AgentRefunds, local)
				break
			}
		}
	}

	return nil
}

// LoadSalesorder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (refundL) LoadSalesorder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRefund interface{}, mods queries.Applicator) error {
	var slice []*Refund
	var object *Refund

	if singular {
		var ok bool
		object, ok = maybeRefund.(*Refund)
		if !ok {
			object = new(Refund)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRefund)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRefund))
			}
		}
	} else {
		s, ok := maybeRefund.(*[]*Refund)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRefund)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRefund))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &refundR{}
		}
		args = append(args, object.SalesorderID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &refundR{}
			}

			for _, a := range args {
				if a == obj.SalesorderID {
					continue Outer
				}
			}

			args = append(args, obj.SalesorderID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.salesorders`),
		qm.WhereIn(`alpha.salesorders.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Salesorder")
	}

	var resultSlice []*Salesorder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Salesorder")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for salesorders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for salesorders")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Salesorder = foreign
		if foreign.R == nil {
			foreign.R = &salesorderR{}
		}
		foreign.R.Refunds = append(foreign.R.Refunds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SalesorderID == foreign.ID {
				local.R.Salesorder = foreign
				if foreign.R == nil {
					foreign.R = &salesorderR{}
				}
				foreign.R.Refunds = append(foreign.R.Refunds, local)
				break
			}
		}
	}

	return nil
}

// LoadRefundItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (refundL) LoadRefundItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRefund interface{}, mods queries.Applicator) error {
	var slice []*Refund
	var object *Refund

	if singular {
		var ok bool
		object, ok = maybeRefund.(*Refund)
		if !ok {
			object = new(Refund)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRefund)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRefund))
			}
		}
	} else {
		s, ok := maybeRefund.(*[]*Refund)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRefund)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRefund))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &refundR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &refundR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alpha.refund_items`),
		qm.WhereIn(`alpha.refund_items.refund_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load refund_items")
	}

	var resultSlice []*RefundItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice refund_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on refund_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for refund_items")
	}

	if singular {
		object.R.RefundItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &refundItemR{}
			}
			foreign.R.Refund = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RefundID) {
				local.R.RefundItems = append(local.R.RefundItems, foreign)
				if foreign.R == nil {
					foreign.R = &refundItemR{}
				}
				foreign.R.Refund = local
				break
			}
		}
	}

	return nil
}

// SetAgentG of the refund to the related item.
// Sets o.R.Agent to related.
// Adds o to related.R.AgentRefunds.
// Uses the global database handle.
func (o *Refund) SetAgentG(ctx context.Context, insert bool, related *Person) error {
	return o.SetAgent(ctx, boil.GetContextDB(), insert, related)
}

// SetAgent of the refund to the related item.
// Sets o.R.Agent to related.
// Adds o to related.R.AgentRefunds.
func (o *Refund) SetAgent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Person) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"refunds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"agent_id"}),
		strmangle.WhereClause("\"", "\"", 2, refundPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AgentID = related.ID
	if o.R == nil {
		o.R = &refundR{
			Agent: related,
		}
	} else {
		o.R.Agent = related
	}

	if related.R == nil {
		related.R = &personR{
			AgentRefunds: RefundSlice{o},
		}
	} else {
		related.R.AgentRefunds = append(related.R.AgentRefunds, o)
	}

	return nil
}

// SetSalesorderG of the refund to the related item.
// Sets o.R.Salesorder to related.
// Adds o to related.R.Refunds.
// Uses the global database handle.
func (o *Refund) SetSalesorderG(ctx context.Context, insert bool, related *Salesorder) error {
	return o.SetSalesorder(ctx, boil.GetContextDB(), insert, related)
}

// SetSalesorder of the refund to the related item.
// Sets o.R.Salesorder to related.
// Adds o to related.R.Refunds.
func (o *Refund) SetSalesorder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Salesorder) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alpha\".\"refunds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"salesorder_id"}),
		strmangle.WhereClause("\"", "\"", 2, refundPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SalesorderID = related.ID
	if o.R == nil {
		o.R = &refundR{
			Salesorder: related,
		}
	} else {
		o.R.Salesorder = related
	}

	if related.R == nil {
		related.R = &salesorderR{
			Refunds: RefundSlice{o},
		}
	} else {
		related.R.Refunds = append(related.R.Refunds, o)
	}

	return nil
}

// AddRefundItemsG adds the given related objects to the existing relationships
// of the refund, optionally inserting them as new records.
// Appends related to o.R.RefundItems.
// Sets related.R.Refund appropriately.
// Uses the global database handle.
func (o *Refund) AddRefundItemsG(ctx context.Context, insert bool, related ...*RefundItem) error {
	return o.AddRefundItems(ctx, boil.GetContextDB(), insert, related...)
}

// AddRefundItems adds the given related objects to the existing relationships
// of the refund, optionally inserting them as new records.
// Appends related to o.R.RefundItems.
// Sets related.R.Refund appropriately.
func (o *Refund) AddRefundItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RefundItem) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RefundID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alpha\".\"refund_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"refund_id"}),
				strmangle.WhereClause("\"", "\"", 2, refundItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RefundID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &refundR{
			RefundItems: related,
		}
	} else {
		o.R.RefundItems = append(o.R.RefundItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &refundItemR{
				Refund: o,
			}
		} else {
			rel.R.Refund = o
		}
	}
	return nil
}

// SetRefundItemsG removes all previously related items of the
// refund replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Refund's RefundItems accordingly.
// Replaces o.R.RefundItems with related.
// Sets related.R.Refund's RefundItems accordingly.
// Uses the global database handle.
func (o *Refund) SetRefundItemsG(ctx context.Context, insert bool, related ...*RefundItem) error {
	return o.SetRefundItems(ctx, boil.GetContextDB(), insert, related...)
}

// SetRefundItems removes all previously related items of the
// refund replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Refund's RefundItems accordingly.
// Replaces o.R.RefundItems with related.
// Sets related.R.Refund's RefundItems accordingly.
func (o *Refund) SetRefundItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RefundItem) error {
	query := "update \"alpha\".\"refund_items\" set \"refund_id\" = null where \"refund_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RefundItems {
			queries.SetScanner(&rel.RefundID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Refund = nil
		}
		o.R.RefundItems = nil
	}

	return o.AddRefundItems(ctx, exec, insert, related...)
}

// RemoveRefundItemsG relationships from objects passed in.
// Removes related items from R.RefundItems (uses pointer comparison, removal does not keep order)
// Sets related.R.Refund.
// Uses the global database handle.
func (o *Refund) RemoveRefundItemsG(ctx context.Context, related ...*RefundItem) error {
	return o.RemoveRefundItems(ctx, boil.GetContextDB(), related...)
}

// RemoveRefundItems relationships from objects passed in.
// Removes related items from R.RefundItems (uses pointer comparison, removal does not keep order)
// Sets related.R.Refund.
func (o *Refund) RemoveRefundItems(ctx context.Context, exec boil.ContextExecutor, related ...*RefundItem) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RefundID, nil)
		if rel.R != nil {
			rel.R.Refund = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("refund_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RefundItems {
			if rel != ri {
				continue
			}

			ln := len(o.R.RefundItems)
			if ln > 1 && i < ln-1 {
				o.R.RefundItems[i] = o.R.RefundItems[ln-1]
			}
			o.R.RefundItems = o.R.RefundItems[:ln-1]
			break
		}
	}

	return nil
}

// Refunds retrieves all the records using an executor.
func Refunds(mods ...qm.QueryMod) refundQuery {
	mods = append(mods, qm.From("\"alpha\".\"refunds\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alpha\".\"refunds\".*"})
	}

	return refundQuery{q}
}

// FindRefundG retrieves a single record by ID.
func FindRefundG(ctx context.Context, iD int, selectCols ...string) (*Refund, error) {
	return FindRefund(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindRefund retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRefund(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Refund, error) {
	refundObj := &Refund{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alpha\".\"refunds\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, refundObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from refunds")
	}

	return refundObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Refund) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Refund) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no refunds provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(refundColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	refundInsertCacheMut.RLock()
	cache, cached := refundInsertCache[key]
	refundInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			refundAllColumns,
			refundColumnsWithDefault,
			refundColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, refundGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(refundType, refundMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(refundType, refundMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alpha\".\"refunds\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alpha\".\"refunds\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into refunds")
	}

	if !cached {
		refundInsertCacheMut.Lock()
		refundInsertCache[key] = cache
		refundInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Refund record using the global executor.
// See Update for more documentation.
func (o *Refund) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Refund.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Refund) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	refundUpdateCacheMut.RLock()
	cache, cached := refundUpdateCache[key]
	refundUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			refundAllColumns,
			refundPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, refundGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update refunds, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alpha\".\"refunds\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, refundPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(refundType, refundMapping, append(wl, refundPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update refunds row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for refunds")
	}

	if !cached {
		refundUpdateCacheMut.Lock()
		refundUpdateCache[key] = cache
		refundUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q refundQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q refundQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for refunds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for refunds")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RefundSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RefundSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), refundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alpha\".\"refunds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, refundPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in refund slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all refund")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Refund) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Refund) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no refunds provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(refundColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	refundUpsertCacheMut.RLock()
	cache, cached := refundUpsertCache[key]
	refundUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			refundAllColumns,
			refundColumnsWithDefault,
			refundColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			refundAllColumns,
			refundPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, refundGeneratedColumns)
		update = strmangle.SetComplement(update, refundGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert refunds, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(refundPrimaryKeyColumns))
			copy(conflict, refundPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alpha\".\"refunds\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(refundType, refundMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(refundType, refundMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert refunds")
	}

	if !cached {
		refundUpsertCacheMut.Lock()
		refundUpsertCache[key] = cache
		refundUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single Refund record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Refund) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Refund record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Refund) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Refund provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), refundPrimaryKeyMapping)
	sql := "DELETE FROM \"alpha\".\"refunds\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from refunds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for refunds")
	}

	return rowsAff, nil
}

func (q refundQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q refundQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no refundQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from refunds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for refunds")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RefundSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RefundSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), refundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alpha\".\"refunds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, refundPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from refund slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for refunds")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Refund) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Refund provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Refund) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRefund(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RefundSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty RefundSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RefundSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RefundSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), refundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alpha\".\"refunds\".* FROM \"alpha\".\"refunds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, refundPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RefundSlice")
	}

	*o = slice

	return nil
}

// RefundExistsG checks if the Refund row exists.
func RefundExistsG(ctx context.Context, iD int) (bool, error) {
	return RefundExists(ctx, boil.GetContextDB(), iD)
}

// RefundExists checks if the Refund row exists.
func RefundExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alpha\".\"refunds\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if refunds exists")
	}

	return exists, nil
}
